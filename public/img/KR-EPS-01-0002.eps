%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: KR-EPS-01-0002.eps
%%Creator: Adobe Illustrator(R) 21.0
%%For: Ted Grajeda
%%CreationDate: 11/23/16
%%BoundingBox: 0 0 720 540
%%HiResBoundingBox: 0 0 720 540
%%CropBox: 0 0 720 540
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 21.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 21.0.0 x223 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c137 79.159768, 2016/08/11-13:24:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">KR</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator CC 2017 (Macintosh)</xmp:CreatorTool>
         <xmp:CreateDate>2016-11-23T22:53:05-07:00</xmp:CreateDate>
         <xmp:ModifyDate>2016-11-23T22:53:06-07:00</xmp:ModifyDate>
         <xmp:MetadataDate>2016-11-23T22:53:06-07:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>192</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+IMWElDQ19QUk9GSUxFAAEBAAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJ&#xA;AAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1IUCAgAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAz&#xA;ZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtwdAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwA&#xA;AAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABwZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAA&#xA;A9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwAAAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RS&#xA;QwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAAAABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1Q&#xA;YWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAAEnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAS&#xA;c1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#xA;AAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAAARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAA&#xA;AAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNj&#xA;AAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5p&#xA;ZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAALFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBp&#xA;biBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxSZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4g&#xA;SUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDP&#xA;FAAD7cwABBMLAANcngAAAAFYWVogAAAAAABMCVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAA&#xA;AAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JUIGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMA&#xA;KAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBoAG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCy&#xA;ALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIB&#xA;WQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4&#xA;AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYCwQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oD&#xA;ZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQGBBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATT&#xA;BOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYFpgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowG&#xA;nQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeGB5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiq&#xA;CL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJzwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsL&#xA;Igs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxcDHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3e&#xA;DfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EPXg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPUR&#xA;ExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKjEsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSL&#xA;FK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkWbBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUY&#xA;ihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzM&#xA;HPUdHh1HHXAdmR3DHeweFh5AHmoelB6+HukfEx8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUh&#xA;oSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPwJB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3&#xA;JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgpaymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDks&#xA;biyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8kL1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJj&#xA;Mpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5&#xA;BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76DwnPGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/i&#xA;QCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpDfUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVH&#xA;e0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsMS1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9J&#xA;T5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNTX1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX&#xA;4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvlXDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2Cq&#xA;YPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOllPWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFq&#xA;SGqfavdrT2una/9sV2yvbQhtYG25bhJua27Ebx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQU&#xA;dHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+&#xA;wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZ&#xA;if6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6PNo+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSV&#xA;X5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrVm0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFH&#xA;obaiJqKWowajdqPmpFakx6U4pammGqaLpv2nbqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1Erbiu&#xA;La6hrxavi7AAsHWw6rFgsdayS7LCszizrrQltJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsu&#xA;u6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJ&#xA;Osm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+40DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc&#xA;1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hzeot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3m&#xA;lucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe&#xA;9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQA&#xA;BgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoKDBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8f&#xA;Hx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f&#xA;Hx8fHx8fHx8fHx8fHx8f/8AAEQgAwAEAAwERAAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQF&#xA;AwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAAAQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMB&#xA;AgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPBUtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdU&#xA;ZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eX&#xA;p7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZqbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUE&#xA;BQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEyobHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PS&#xA;NeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG&#xA;1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/a&#xA;AAwDAQACEQMRAD8A9Q4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXEgCp2A6nFWP+WPNcWtXmp2w4crKcrEUJo8PRX391OKsgxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxVxIAqTQDqTirgQQCDUHcEYq7FXYq7FXnfnvz00N42kaZdm1kj/&#xA;AN6LtRUB9vg2DN07jvt8lWF3XmbzTFH8OszTwPsJElNakbgivNfpAriqFn81+ZJ7U2suozvAVCMh&#xA;c7qOxPU4qreTdd/Qmv2925ItmrFcgb/u36n6DQ4q97R0kRXQhkcBlYbgg7gjFW8VdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiq2WJJY2jdQyOCrKwqCD4jFXRpwjVOvEAVAp0&#xA;FOgxVcTQVxVwNRXFWI615p1DTrme0v7Stm8O95FVApeX0qmpbYK4br/Yq8d+qXL+pIwrxLcnJqGK&#xA;gs1G35bCuKqljzMV3xqwWHkYuoPxBeRH+Ry5DFUHirsVeofld5uaRV0C8NWQE2UpP7I3MZr4fs4q&#xA;9IxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVp3VFLN0FOgJ6&#xA;mnbFUm1+xjuI5UkubiITxGJOAJiQn9ugG7fPFXjWp3c9nfhCIpJIRWCZXkYqDuKEFF79OPt02xVK&#xA;oFkaZBG3F+Q4tWlDXrXtTFVadbi7uGliieRWbghCkk8QAAaVq1OuKoeSOSNykilHXqrChH0HFVWx&#xA;vbixvIbu2bhPAweNvcYq+gtC1eDV9Jt9Qh2WZasv8rA0YfQwxVH4q7FVK3to4DKULH1pDK3Ji3xN&#xA;QbV6DbpiqrirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirTuqIzsaKoqT8sV&#xA;YXr35h2li1F4uCARbkVZgeQIevT7NcVef+YpdMvlt79ZfRmuYw627c34jm4YFqU4q4ooHb6AVUqk&#xA;pYUEUnK5da+slQqo4BHGoDVI6n3piqj699cNwDSSuwoVFSSNutOv2R92Kopm4Qlr+IO28MaAcHBj&#xA;UCpYU+yGFKg1xVbDcWU9zxltYkjblxIZkI2PBeVeA7DkV9z3xV6d+Ukkw0e8tZiwe3uNo2/ZV0B2&#xA;HuanFWdYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVssUcsbRyD&#xA;kjCjDxGKvL/zC0K2s7GVraBYkSdKkKEXhxZl40AqeUrKflXFXn0ERnkWMyKgANGdqAAb0FcVReqW&#xA;rCQzxH1LcqpFAP3YavBGClqbDY98VU5pfRt444KKlxFWViByY8zUV3oOSbUxVCs7tTkxbiOK1NaA&#xA;dhiq3FXrX5SPHNY6hP6XCVpY1dxUhuKdq1p1xVn2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2Kse8+afPf+W7m3hZVbZwGYKWKbhRUHrirxRtP9Jgk8yRylSfTryK&#xA;kVNHI2WtOnX2xVErDcTWTwKfXiABgkjAC81JqjkqG6OePL6OuKqFykkdlGl1D6c60WCoZX4VLEsp&#xA;NONW2+Hfx2OKoSKGaZuMUbSMBXigLGn0YqtZSpKsCGBoQeoOKvW/yq1O0XQ0sGYC5eeUxxggsVCh&#xA;ixA3UD3xVnmKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpD5u&#xA;1W1tdGfnZNqLT8kht1jaRSw2POnRffFXht9crc3TzLGsKtTjEoUBQBSg4qg/DFVKGP1ZUjrxDEAt&#xA;1oO5+jFUULm0k427xenbhjwdT+8UtQFmr8LdASNvYjFV0MEsUE3qW7SwMVPrIwAorUoGAYFSTuB3&#xA;p4Yqpm2ubgvdSj0opCXM7hghLHotAa79hir0D8otMeO91G7dkYIiwqUdX3ZixPwk/wAuKvTcVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiriQBU7DFXmH5p6wp1S306Q&#xA;zRQxRepziIoWcmh4/DWnEftYqwkx25gWSSFUtnHpxTCoYNQ/EwH2iWWp60H0YqpWaW63AdZmZlqy&#xA;oEI5BVJKMa7ch8O1cVQOKqtutwZC1vyEiKzVQ0IUD4jt7Yqi7GO6umk5fvlkZQ6PUvIwDFQjUYhq&#xA;A0/zGKvbPJ/l9dE0WG2J5zsOUsnHiTViwUip+zyxVPMVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdiqB1SeBYxFKvNdmkAbiUWtA3v8XbFXm35haXcTToQ0cUNujuys8a&#xA;rzJUcQSR8TUJ/txV59iqe6Z5Yvpbc6hcs1jYxyCM3JBLK5JC/APi+0KVxVkg8m6Ne3Nxp9nK0V7P&#xA;xktpp0opj9NJW4ovSvLqNx0pTFUfZ6JP5Xsrwx2gv7glBaTFFXi0gIUuGIY/F8NAenbrirN9P0TS&#xA;7dYpo7OOOcCteCgqWIZqUG24xVMcVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirXpp6nqU+MjjX2G+KoTUQkUL3fpmSSFDVEXkzoNygB8aYq858z22q3OjLcvaPazanc&#xA;FRZvwaimsnqNyX4ep8CPHtiqJ8ueRorSe6vpEjuGVETTYmo1ZeALOQ5Rdz9muKsk0Ly9d28k76kT&#xA;M08pmVQ1Y04NWOqkn4gu222Kp5ZWSW8EasoaVOR9TqasSTQkVxVXEShAh+MD+b4j+OKrsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirTFgPhFT4E0xVvFWmVWpyANDU&#xA;V3ofHFVG7t3nVAknplG5VpyrsR4jxxVfFCI2bifgNOMdAFWgptQYqqAkjcU3O304q7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUJfatplgvK9uorc&#xA;f8WOFP3HfFW9N1XTtTgM9hcJcRA8SyGtD4EdRiqKxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVbKJDE4jYLIVIRiKgNTY0xV5lL+U+tXt0bm/1RHll&#xA;ctO/Fmbr2qadPuxVm/ljyzZeX7E2tszSM7c5ZnoGY/IdhiqcYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FVlwkr28qQyejMyMscvENwYigbidjQ70xVhv+HvzOLmL/ABVbC2MCIH+oqZBK&#xA;oAZjR1qGpv8AEDvtxxVdpflz8yESzbUvNcUjxyCS7jhsowrgrJyjDMa05OtDQfZ6Yqr2/l3z2kRg&#xA;m81CSIRLGkosYhPzDoTIzlipJjVl+z1Ne1MVbj0Lz+YeEvmeL1DBKhljsYh++ZCIpQpY0CPRitd+&#xA;nuFVNND/ADJWaavma1a3MRWEfUFDiUxMvKvqEUWQh6GtRt7sqm+h6f5ltbieTVtXTUYZKehClssH&#xA;p0A/aVmLV3rX28N1X//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:DocumentID>xmp.did:0df557eb-1ace-49cb-ad17-63bc7d811110</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:0df557eb-1ace-49cb-ad17-63bc7d811110</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:294fa64a-cf90-4567-b42b-de07e72cd990</stRef:instanceID>
            <stRef:documentID>xmp.did:294fa64a-cf90-4567-b42b-de07e72cd990</stRef:documentID>
            <stRef:originalDocumentID>uuid:A68C51ECB708E211A448E36E157BCECF</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:OriginalDocumentID>uuid:A68C51ECB708E211A448E36E157BCECF</xmpMM:OriginalDocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:294fa64a-cf90-4567-b42b-de07e72cd990</stEvt:instanceID>
                  <stEvt:when>2016-11-23T22:53:04-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0df557eb-1ace-49cb-ad17-63bc7d811110</stEvt:instanceID>
                  <stEvt:when>2016-11-23T22:53:06-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>720.000000</stDim:w>
            <stDim:h>540.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Roboto-Light</stFnt:fontName>
                  <stFnt:fontFamily>Roboto</stFnt:fontFamily>
                  <stFnt:fontFace>Light</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>Version 1.100140; 2013</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Roboto-Light.ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Maps</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Sea</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>204</xmpG:red>
                           <xmpG:green>219</xmpG:green>
                           <xmpG:blue>229</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>River</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>147</xmpG:red>
                           <xmpG:green>182</xmpG:green>
                           <xmpG:blue>198</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Land</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>244</xmpG:red>
                           <xmpG:green>244</xmpG:green>
                           <xmpG:blue>244</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Country</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>249</xmpG:red>
                           <xmpG:green>241</xmpG:green>
                           <xmpG:blue>228</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Border</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>163</xmpG:red>
                           <xmpG:green>163</xmpG:green>
                           <xmpG:blue>163</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Marker</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>188</xmpG:red>
                           <xmpG:green>81</xmpG:green>
                           <xmpG:blue>81</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Text</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>51</xmpG:red>
                           <xmpG:green>51</xmpG:green>
                           <xmpG:blue>51</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 8.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -540 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 540 li
720 540 li
720 0 li
cp
clp
720 540 mo
0 540 li
0 0 li
720 0 li
720 540 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.0152285 .0084535 .0084535 0 cmyk
f
430.392 289.112 mo
434.544 288.361 li
438.079 289.228 li
438.118 289.217 li
438.187 289.299 li
438.485 289.827 li
438.316 291.023 li
438.221 292.44 li
437.919 294.569 li
437.465 295.471 li
436.731 296.462 li
436.056 296.827 li
435.761 295.861 li
435.499 294.603 li
434.922 293.659 li
434.301 293.498 li
433.93 294.569 li
434.54 294.71 li
434.903 295.172 li
435.078 295.848 li
435.118 296.627 li
434.922 297.363 li
434.464 297.534 li
433.952 297.581 li
433.596 297.938 li
433.661 298.331 li
433.719 299.35 li
433.9 300.4 li
433.484 301.074 li
433.106 301.748 li
433.479 302.273 li
433.776 302.574 li
433.716 303.318 li
432.797 303.62 li
431.933 304.142 li
430.692 305.372 li
429.643 305.333 li
429.626 305.391 li
429.445 305.234 li
428.177 304.785 li
427.203 303.82 li
426.903 302.302 li
425.879 301.502 li
423.581 300.235 li
421.652 298.027 li
420.494 297.146 li
417.744 296.724 li
417.075 295.37 li
418.191 293.116 li
418.002 290.934 li
419.077 290.063 li
420.227 289.392 li
420.914 289.375 li
421.195 288.836 li
420.767 288.126 li
420.521 287.356 li
422.026 286.188 li
423.913 285.528 li
425.459 285.294 li
426.973 285.612 li
428.546 286.291 li
428.956 286.967 li
428.979 287.787 li
429.091 288.52 li
429.645 288.918 li
430.392 289.112 li
cp
.49427 .41117 .412055 .0505074 cmyk
ef
.25 lw
1 lc
1 lj
4 ml
[] 0 dsh
true sadj
430.392 289.112 mo
434.544 288.361 li
438.079 289.228 li
438.118 289.217 li
438.187 289.299 li
438.485 289.827 li
438.316 291.023 li
438.221 292.44 li
437.919 294.569 li
437.465 295.471 li
436.731 296.462 li
436.056 296.827 li
435.761 295.861 li
435.499 294.603 li
434.922 293.659 li
434.301 293.498 li
433.93 294.569 li
434.54 294.71 li
434.903 295.172 li
435.078 295.848 li
435.118 296.627 li
434.922 297.363 li
434.464 297.534 li
433.952 297.581 li
433.596 297.938 li
433.661 298.331 li
433.719 299.35 li
433.9 300.4 li
433.484 301.074 li
433.106 301.748 li
433.479 302.273 li
433.776 302.574 li
433.716 303.318 li
432.797 303.62 li
431.933 304.142 li
430.692 305.372 li
429.643 305.333 li
429.626 305.391 li
429.445 305.234 li
428.177 304.785 li
427.203 303.82 li
426.903 302.302 li
425.879 301.502 li
423.581 300.235 li
421.652 298.027 li
420.494 297.146 li
417.744 296.724 li
417.075 295.37 li
418.191 293.116 li
418.002 290.934 li
419.077 290.063 li
420.227 289.392 li
420.914 289.375 li
421.195 288.836 li
420.767 288.126 li
420.521 287.356 li
422.026 286.188 li
423.913 285.528 li
425.459 285.294 li
426.973 285.612 li
428.546 286.291 li
428.956 286.967 li
428.979 287.787 li
429.091 288.52 li
429.645 288.918 li
430.392 289.112 li
cp
.0152285 .0084535 .0084535 0 cmyk
@
406.074 276.125 mo
405.737 276.025 li
405.317 276.063 li
405.341 276.424 li
405.281 276.89 li
404.861 277.991 li
404.856 278.347 li
404.723 278.862 li
403.726 279.467 li
401.146 278.795 li
399.702 278.649 li
399.065 279.153 li
398.429 280.268 li
398.087 280.56 li
397.677 280.22 li
397.127 279.864 li
396.339 279.224 li
395.808 278.197 li
395.157 277.557 li
394.465 277.286 li
394.197 276.27 li
394.815 275.405 li
395.484 275.401 li
396.205 275.283 li
396.394 274.762 li
396.477 274.212 li
396.085 274.067 li
395.66 273.997 li
396.14 272.914 li
396.906 272.07 li
396.624 269.557 li
398.724 267.812 li
401.566 267.43 li
403.924 267.276 li
405.715 268.59 li
406.282 269.58 li
406.259 270.016 li
406.042 270.383 li
406.056 271.777 li
406.416 272.318 li
406.896 272.727 li
406.988 273.602 li
407.011 274.534 li
406.771 275.405 li
406.074 276.125 li
cp
.49427 .41117 .412055 .0505074 cmyk
ef
406.074 276.125 mo
405.737 276.025 li
405.317 276.063 li
405.341 276.424 li
405.281 276.89 li
404.861 277.991 li
404.856 278.347 li
404.723 278.862 li
403.726 279.467 li
401.146 278.795 li
399.702 278.649 li
399.065 279.153 li
398.429 280.268 li
398.087 280.56 li
397.677 280.22 li
397.127 279.864 li
396.339 279.224 li
395.808 278.197 li
395.157 277.557 li
394.465 277.286 li
394.197 276.27 li
394.815 275.405 li
395.484 275.401 li
396.205 275.283 li
396.394 274.762 li
396.477 274.212 li
396.085 274.067 li
395.66 273.997 li
396.14 272.914 li
396.906 272.07 li
396.624 269.557 li
398.724 267.812 li
401.566 267.43 li
403.924 267.276 li
405.715 268.59 li
406.282 269.58 li
406.259 270.016 li
406.042 270.383 li
406.056 271.777 li
406.416 272.318 li
406.896 272.727 li
406.988 273.602 li
407.011 274.534 li
406.771 275.405 li
406.074 276.125 li
cp
.0152285 .0084535 .0084535 0 cmyk
@
333.506 181.359 mo
334.729 181.344 li
335.776 180.966 li
336.685 180.953 li
337.027 181.772 li
336.907 182.611 li
336.284 182.927 li
335.605 183.378 li
335.62 184.396 li
335.979 184.8 li
335.213 185.847 li
334.789 186.582 li
333.631 187.271 li
332.357 187.567 li
331.047 188.227 li
330.535 187.05 li
329.418 187.309 li
328.311 187.654 li
327.526 188.104 li
326.709 188.238 li
324.794 188.173 li
323.484 186.448 li
322.192 186.059 li
321.301 185.472 li
321.066 183.856 li
320.18 182.592 li
319.124 181.298 li
319.792 179.858 li
321.043 179.938 li
322.474 180.812 li
323.535 180.451 li
324.48 179.875 li
324.554 178.905 li
324.813 178.011 li
326.815 177.819 li
327.844 176.508 li
328.472 175.176 li
329.362 174.222 li
330.756 173.888 li
332.362 174.019 li
333.128 175.339 li
333.423 177.134 li
333.889 178.388 li
333.917 179.764 li
333.506 181.359 li
cp
.49427 .41117 .412055 .0505074 cmyk
ef
333.506 181.359 mo
334.729 181.344 li
335.776 180.966 li
336.685 180.953 li
337.027 181.772 li
336.907 182.611 li
336.284 182.927 li
335.605 183.378 li
335.62 184.396 li
335.979 184.8 li
335.213 185.847 li
334.789 186.582 li
333.631 187.271 li
332.357 187.567 li
331.047 188.227 li
330.535 187.05 li
329.418 187.309 li
328.311 187.654 li
327.526 188.104 li
326.709 188.238 li
324.794 188.173 li
323.484 186.448 li
322.192 186.059 li
321.301 185.472 li
321.066 183.856 li
320.18 182.592 li
319.124 181.298 li
319.792 179.858 li
321.043 179.938 li
322.474 180.812 li
323.535 180.451 li
324.48 179.875 li
324.554 178.905 li
324.813 178.011 li
326.815 177.819 li
327.844 176.508 li
328.472 175.176 li
329.362 174.222 li
330.756 173.888 li
332.362 174.019 li
333.128 175.339 li
333.423 177.134 li
333.889 178.388 li
333.917 179.764 li
333.506 181.359 li
cp
.0152285 .0084535 .0084535 0 cmyk
@
363.248 339.791 mo
363.714 339.91 li
364.12 340.555 li
364.44 341.351 li
364.818 342.71 li
364.857 343.503 li
364.724 344.273 li
364.4 345.02 li
363.953 345.479 li
363.452 345.518 li
362.95 345.249 li
361.37 343.638 li
361.185 343.011 li
361.453 342.013 li
361.649 341.752 li
362.485 341.118 li
362.635 340.794 li
362.973 339.415 li
362.297 338.695 li
362.376 338.255 li
362.863 338.029 li
363.419 337.966 li
363.898 338.183 li
364.019 338.69 li
363.79 339.289 li
363.248 339.791 li
cp
.49427 .41117 .412055 .0505074 cmyk
ef
363.248 339.791 mo
363.714 339.91 li
364.12 340.555 li
364.44 341.351 li
364.818 342.71 li
364.857 343.503 li
364.724 344.273 li
364.4 345.02 li
363.953 345.479 li
363.452 345.518 li
362.95 345.249 li
361.37 343.638 li
361.185 343.011 li
361.453 342.013 li
361.649 341.752 li
362.485 341.118 li
362.635 340.794 li
362.973 339.415 li
362.297 338.695 li
362.376 338.255 li
362.863 338.029 li
363.419 337.966 li
363.898 338.183 li
364.019 338.69 li
363.79 339.289 li
363.248 339.791 li
cp
.0152285 .0084535 .0084535 0 cmyk
@
327.688 309.599 mo
328.592 312.098 li
326.834 314.444 li
324.079 314.004 li
321.647 312.544 li
320.425 309.855 li
321.389 308.943 li
322.99 309.368 li
324.162 309.101 li
325.385 308.733 li
327.688 309.599 li
cp
.49427 .41117 .412055 .0505074 cmyk
ef
327.688 309.599 mo
328.592 312.098 li
326.834 314.444 li
324.079 314.004 li
321.647 312.544 li
320.425 309.855 li
321.389 308.943 li
322.99 309.368 li
324.162 309.101 li
325.385 308.733 li
327.688 309.599 li
cp
.0152285 .0084535 .0084535 0 cmyk
@
367.514 267.384 mo
366.941 267.986 li
366.369 268.511 li
365.714 268.155 li
365.063 267.534 li
363.416 268.278 li
361.98 269.158 li
361.266 268.953 li
360.85 268.432 li
358.852 267.775 li
358.183 266.98 li
357.426 266.534 li
357.136 266.923 li
356.776 267.012 li
356.351 266.623 li
355.968 266.162 li
354.912 267.223 li
353.827 268.177 li
352.503 268.545 li
351.188 268.606 li
350.224 268.843 li
347.64 268.503 li
347.455 268.06 li
347.769 267.43 li
347.501 266.879 li
346.929 266.734 li
345.448 265.988 li
343.44 262.367 li
342.015 261.1 li
341.267 261.866 li
340.667 262.801 li
339.73 262.996 li
339.099 263.278 li
338.453 263.503 li
335.993 263.983 li
334.743 264.468 li
333.423 264.715 li
332.473 263.234 li
332.869 260.795 li
331.222 260.465 li
326.599 261.925 li
324.088 262.464 li
321.952 262.699 li
319.942 265.179 li
319.943 265.179 li
322.559 264.37 li
322.479 265.168 li
321.597 265.801 li
319.507 266.635 li
317.861 267.886 li
316.924 268.366 li
316.158 268.142 li
315.438 268.575 li
313.212 268.707 li
311.012 268.98 li
306.965 269.417 li
307.158 271.081 li
309.123 270.772 li
310.455 271.229 li
310.867 271.59 li
311.002 272.896 li
311.022 273.844 li
313.157 274.014 li
315.318 274.155 li
316.419 274.101 li
319.7 272.773 li
319.842 272.661 li
320.369 272.856 li
320.844 273.271 li
321.077 273.675 li
320.881 273.854 li
320.267 273.96 li
320.052 274.24 li
319.951 274.646 li
319.678 275.142 li
319.275 275.352 li
318.73 275.396 li
316.237 275.235 li
315.831 275.329 li
315.46 275.635 li
315.089 276.146 li
314.969 276.62 li
315.384 276.831 li
316.172 277.422 li
317.142 278.084 li
317.995 278.508 li
318.406 278.809 li
319.002 279.284 li
318.937 279.932 li
318.784 280.554 li
318.599 281.002 li
318.123 280.178 li
317.411 279.998 li
316.417 279.231 li
314.85 279.037 li
313.249 279.199 li
312.979 279.434 li
312.472 279.755 li
311.786 280.163 li
311.596 281.806 li
310.347 283.551 li
308.704 284.458 li
307.364 285.24 li
306.519 286.209 li
305.606 287.111 li
304.561 287.632 li
304.524 288.223 li
304.39 289.7 li
306.597 291.077 li
312.931 290.041 li
313.607 290.43 li
314.021 291.361 li
314.603 293.411 li
314.003 293.21 li
313.186 292.198 li
312.389 291.304 li
311.5 291.532 li
310.871 292.44 li
310.216 292.966 li
308.797 293.043 li
307.138 293.384 li
305.682 293.907 li
304.662 295.377 li
303.452 298.206 li
302.686 299.809 li
302.358 301.104 li
302.576 301.688 li
303.192 302.389 li
303.2 302.387 li
304.123 302.089 li
308.46 300.877 li
309.747 301.224 li
309.489 303.227 li
309.203 304.7 li
309.138 306.184 li
310.25 306.558 li
311.579 306.225 li
312.996 305.71 li
314.491 305.486 li
315.091 305.042 li
315.737 304.649 li
316.502 304.426 li
317.231 304.074 li
317.822 303.561 li
318.196 302.785 li
318.108 302.226 li
318.076 301.641 li
318.639 301.227 li
319.05 300.604 li
319.008 299.862 li
319.013 299.121 li
320.134 298.113 li
321.647 298.262 li
322.391 297.379 li
323.203 297.437 li
323.982 297.768 li
325.348 298.888 li
327.443 301.73 li
328.823 301.713 li
328.929 300.932 li
329.215 300.207 li
329.653 299.785 li
329.976 299.222 li
331.291 299.15 li
332.191 300.522 li
331.794 302.103 li
332.066 303.118 li
332.976 304.146 li
332.916 305.956 li
333.991 307.102 li
335.652 307.349 li
336.935 306.58 li
338.282 306.357 li
339.209 306.37 li
339.994 306.169 li
340.672 306.693 li
341.434 307.139 li
343.076 307.168 li
344.696 306.951 li
346.177 306.939 li
347.575 306.744 li
348.876 305.342 li
350.496 304.438 li
353.352 305.473 li
355.899 307.528 li
356.836 306.57 li
356.9 305.221 li
357.196 303.756 li
359.06 301.523 li
359.328 300.021 li
358.686 299.592 li
358.229 298.557 li
358.308 297.154 li
357.814 295.863 li
357.731 295.17 li
357.565 294.564 li
356.42 294.08 li
356.467 292.699 li
357.089 291.426 li
357.473 289.715 li
357.994 288.06 li
358.686 286.764 li
359.249 285.531 li
359.378 283.841 li
359.876 282.4 li
360.896 281.494 li
361.86 280.485 li
362.7 278.666 li
363.139 278.384 li
363.748 278.449 li
364.846 278.111 li
367.065 276.931 li
367.499 275.773 li
369.133 274.019 li
369.341 270.507 li
367.514 267.384 li
cp
297.213 288.747 mo
297.05 288.929 li
296.712 289.203 li
296.207 289.111 li
296.015 289.103 li
296.091 289.404 li
295.931 289.478 li
295.662 289.522 li
295.495 289.76 li
295.248 289.898 li
295.139 290.027 li
295.361 290.171 li
295.426 290.26 li
294.958 290.506 li
294.87 290.854 li
295.012 291.216 li
295.208 291.422 li
295.466 291.363 li
295.611 291.229 li
295.96 290.959 li
296.512 290.343 li
297.333 289.632 li
297.5 289.224 li
297.406 288.895 li
297.213 288.747 li
cp
.49427 .41117 .412055 .0505074 cmyk
f
367.514 267.384 mo
366.941 267.986 li
366.369 268.511 li
365.714 268.155 li
365.063 267.534 li
363.416 268.278 li
361.98 269.158 li
361.266 268.953 li
360.85 268.432 li
358.852 267.775 li
358.183 266.98 li
357.426 266.534 li
357.136 266.923 li
356.776 267.012 li
356.351 266.623 li
355.968 266.162 li
354.912 267.223 li
353.827 268.177 li
352.503 268.545 li
351.188 268.606 li
350.224 268.843 li
347.64 268.503 li
347.455 268.06 li
347.769 267.43 li
347.501 266.879 li
346.929 266.734 li
345.448 265.988 li
343.44 262.367 li
342.015 261.1 li
341.267 261.866 li
340.667 262.801 li
339.73 262.996 li
339.099 263.278 li
338.453 263.503 li
335.993 263.983 li
334.743 264.468 li
333.423 264.715 li
332.473 263.234 li
332.869 260.795 li
331.222 260.465 li
326.599 261.925 li
324.088 262.464 li
321.952 262.699 li
319.942 265.179 li
319.943 265.179 li
322.559 264.37 li
322.479 265.168 li
321.597 265.801 li
319.507 266.635 li
317.861 267.886 li
316.924 268.366 li
316.158 268.142 li
315.438 268.575 li
313.212 268.707 li
311.012 268.98 li
306.965 269.417 li
307.158 271.081 li
309.123 270.772 li
310.455 271.229 li
310.867 271.59 li
311.002 272.896 li
311.022 273.844 li
313.157 274.014 li
315.318 274.155 li
316.419 274.101 li
319.7 272.773 li
319.842 272.661 li
320.369 272.856 li
320.844 273.271 li
321.077 273.675 li
320.881 273.854 li
320.267 273.96 li
320.052 274.24 li
319.951 274.646 li
319.678 275.142 li
319.275 275.352 li
318.73 275.396 li
316.237 275.235 li
315.831 275.329 li
315.46 275.635 li
315.089 276.146 li
314.969 276.62 li
315.384 276.831 li
316.172 277.422 li
317.142 278.084 li
317.995 278.508 li
318.406 278.809 li
319.002 279.284 li
318.937 279.932 li
318.784 280.554 li
318.599 281.002 li
318.123 280.178 li
317.411 279.998 li
316.417 279.231 li
314.85 279.037 li
313.249 279.199 li
312.979 279.434 li
312.472 279.755 li
311.786 280.163 li
311.596 281.806 li
310.347 283.551 li
308.704 284.458 li
307.364 285.24 li
306.519 286.209 li
305.606 287.111 li
304.561 287.632 li
304.524 288.223 li
304.39 289.7 li
306.597 291.077 li
312.931 290.041 li
313.607 290.43 li
314.021 291.361 li
314.603 293.411 li
314.003 293.21 li
313.186 292.198 li
312.389 291.304 li
311.5 291.532 li
310.871 292.44 li
310.216 292.966 li
308.797 293.043 li
307.138 293.384 li
305.682 293.907 li
304.662 295.377 li
303.452 298.206 li
302.686 299.809 li
302.358 301.104 li
302.576 301.688 li
303.192 302.389 li
303.2 302.387 li
304.123 302.089 li
308.46 300.877 li
309.747 301.224 li
309.489 303.227 li
309.203 304.7 li
309.138 306.184 li
310.25 306.558 li
311.579 306.225 li
312.996 305.71 li
314.491 305.486 li
315.091 305.042 li
315.737 304.649 li
316.502 304.426 li
317.231 304.074 li
317.822 303.561 li
318.196 302.785 li
318.108 302.226 li
318.076 301.641 li
318.639 301.227 li
319.05 300.604 li
319.008 299.862 li
319.013 299.121 li
320.134 298.113 li
321.647 298.262 li
322.391 297.379 li
323.203 297.437 li
323.982 297.768 li
325.348 298.888 li
327.443 301.73 li
328.823 301.713 li
328.929 300.932 li
329.215 300.207 li
329.653 299.785 li
329.976 299.222 li
331.291 299.15 li
332.191 300.522 li
331.794 302.103 li
332.066 303.118 li
332.976 304.146 li
332.916 305.956 li
333.991 307.102 li
335.652 307.349 li
336.935 306.58 li
338.282 306.357 li
339.209 306.37 li
339.994 306.169 li
340.672 306.693 li
341.434 307.139 li
343.076 307.168 li
344.696 306.951 li
346.177 306.939 li
347.575 306.744 li
348.876 305.342 li
350.496 304.438 li
353.352 305.473 li
355.899 307.528 li
356.836 306.57 li
356.9 305.221 li
357.196 303.756 li
359.06 301.523 li
359.328 300.021 li
358.686 299.592 li
358.229 298.557 li
358.308 297.154 li
357.814 295.863 li
357.731 295.17 li
357.565 294.564 li
356.42 294.08 li
356.467 292.699 li
357.089 291.426 li
357.473 289.715 li
357.994 288.06 li
358.686 286.764 li
359.249 285.531 li
359.378 283.841 li
359.876 282.4 li
360.896 281.494 li
361.86 280.485 li
362.7 278.666 li
363.139 278.384 li
363.748 278.449 li
364.846 278.111 li
367.065 276.931 li
367.499 275.773 li
369.133 274.019 li
369.341 270.507 li
367.514 267.384 li
cp
297.213 288.747 mo
297.05 288.929 li
296.712 289.203 li
296.207 289.111 li
296.015 289.103 li
296.091 289.404 li
295.931 289.478 li
295.662 289.522 li
295.495 289.76 li
295.248 289.898 li
295.139 290.027 li
295.361 290.171 li
295.426 290.26 li
294.958 290.506 li
294.87 290.854 li
295.012 291.216 li
295.208 291.422 li
295.466 291.363 li
295.611 291.229 li
295.96 290.959 li
296.512 290.343 li
297.333 289.632 li
297.5 289.224 li
297.406 288.895 li
297.213 288.747 li
cp
.0152285 .0084535 .0084535 0 cmyk
@
325.924 404.83 mo
326.262 405.525 li
326.055 405.763 li
325.622 405.889 li
325.313 406.259 li
325.335 406.57 li
325.619 407.064 li
325.619 407.354 li
325.466 407.642 li
325.084 408.145 li
325.008 408.301 li
324.203 409.233 li
322.686 410.445 li
322.215 411.456 li
321.544 412.636 li
321.512 413.108 li
321.215 413.804 li
320.114 413.932 li
319.689 414.156 li
318.517 414.053 li
316.804 415.406 li
312.292 416.236 li
310.783 417.521 li
308.935 417.932 li
306.956 417.733 li
304.695 418.155 li
302.815 417.59 li
298.573 417.65 li
297.25 418.271 li
296.461 419.667 li
295.742 419.817 li
295.023 419.472 li
294.006 417.824 li
292.652 417.363 li
291.338 415.985 li
290.881 414.308 li
291.676 412.134 li
292.429 410.786 li
292.894 410.312 li
294.445 409.391 li
295.771 407.086 li
296.989 406.773 li
297.552 405.555 li
299.641 404.833 li
304.196 403.526 li
305.337 402.542 li
309.689 402.086 li
312.652 400.792 li
313.362 400.993 li
316.97 400.41 li
319.062 400.236 li
320.446 400.47 li
320.975 401.266 li
321.633 401.78 li
323.787 402.637 li
324.441 403.302 li
324.881 404.904 li
325.313 405.532 li
325.521 405.288 li
325.804 405.055 li
325.924 404.83 li
cp
.49427 .41117 .412055 .0505074 cmyk
ef
325.924 404.83 mo
326.262 405.525 li
326.055 405.763 li
325.622 405.889 li
325.313 406.259 li
325.335 406.57 li
325.619 407.064 li
325.619 407.354 li
325.466 407.642 li
325.084 408.145 li
325.008 408.301 li
324.203 409.233 li
322.686 410.445 li
322.215 411.456 li
321.544 412.636 li
321.512 413.108 li
321.215 413.804 li
320.114 413.932 li
319.689 414.156 li
318.517 414.053 li
316.804 415.406 li
312.292 416.236 li
310.783 417.521 li
308.935 417.932 li
306.956 417.733 li
304.695 418.155 li
302.815 417.59 li
298.573 417.65 li
297.25 418.271 li
296.461 419.667 li
295.742 419.817 li
295.023 419.472 li
294.006 417.824 li
292.652 417.363 li
291.338 415.985 li
290.881 414.308 li
291.676 412.134 li
292.429 410.786 li
292.894 410.312 li
294.445 409.391 li
295.771 407.086 li
296.989 406.773 li
297.552 405.555 li
299.641 404.833 li
304.196 403.526 li
305.337 402.542 li
309.689 402.086 li
312.652 400.792 li
313.362 400.993 li
316.97 400.41 li
319.062 400.236 li
320.446 400.47 li
320.975 401.266 li
321.633 401.78 li
323.787 402.637 li
324.441 403.302 li
324.881 404.904 li
325.313 405.532 li
325.521 405.288 li
325.804 405.055 li
325.924 404.83 li
cp
.0152285 .0084535 .0084535 0 cmyk
@
318.792 186.713 mo
318.071 186.24 li
317.591 185.137 li
317.596 183.808 li
314.966 181.277 li
312.676 181.358 li
310.643 181.431 li
310.425 182.793 li
310.523 183.823 li
310.762 184.385 li
311.681 184.285 li
311.843 183.795 li
312.445 183.959 li
312.35 184.427 li
311.967 184.624 li
310.687 185.011 li
310.251 185.766 li
310.397 186.573 li
310.294 187.6 li
311.028 187.989 li
311.827 188.424 li
312.199 189.055 li
311.607 189.947 li
311.147 190.968 li
312.275 191.831 li
313.365 190.438 li
315.705 190.738 li
315.833 191.119 li
317.241 190.707 li
317.573 190.461 li
318.159 190.027 li
318.796 188.796 li
319.216 187.41 li
318.792 186.713 li
cp
309.422 184.072 mo
309.186 183.849 li
309.011 183.574 li
308.835 183.393 li
308.47 183.21 li
308.201 183.158 li
307.95 183.144 li
307.696 183.039 li
307.438 182.892 li
307.187 182.793 li
306.671 182.272 li
306.039 182.507 li
305.729 183.768 li
304.821 184.248 li
303.836 184.224 li
302.388 184.382 li
300.365 185.801 li
299.995 185.609 li
299.729 185.689 li
299.559 186.106 li
299.678 186.399 li
300.166 186.865 li
300.265 187.17 li
299.981 187.452 li
300.461 187.573 li
300.795 187.724 li
301.071 187.507 li
301.25 187.269 li
301.522 187.304 li
301.634 187.578 li
301.558 187.776 li
301.608 187.892 li
301.756 187.841 li
301.918 187.663 li
302.271 187.887 li
302.458 188.573 li
302.636 188.617 li
303.044 188.57 li
303.483 188.67 li
305.43 187.199 li
305.741 186.648 li
306.303 186.143 li
307.346 185.687 li
307.82 185.463 li
308.166 185.521 li
308.945 185.333 li
309.098 185.129 li
309.475 184.848 li
309.718 184.747 li
309.607 184.452 li
309.422 184.072 li
cp
.49427 .41117 .412055 .0505074 cmyk
f
318.792 186.713 mo
318.071 186.24 li
317.591 185.137 li
317.596 183.808 li
314.966 181.277 li
312.676 181.358 li
310.643 181.431 li
310.425 182.793 li
310.523 183.823 li
310.762 184.385 li
311.681 184.285 li
311.843 183.795 li
312.445 183.959 li
312.35 184.427 li
311.967 184.624 li
310.687 185.011 li
310.251 185.766 li
310.397 186.573 li
310.294 187.6 li
311.028 187.989 li
311.827 188.424 li
312.199 189.055 li
311.607 189.947 li
311.147 190.968 li
312.275 191.831 li
313.365 190.438 li
315.705 190.738 li
315.833 191.119 li
317.241 190.707 li
317.573 190.461 li
318.159 190.027 li
318.796 188.796 li
319.216 187.41 li
318.792 186.713 li
cp
309.422 184.072 mo
309.186 183.849 li
309.011 183.574 li
308.835 183.393 li
308.47 183.21 li
308.201 183.158 li
307.95 183.144 li
307.696 183.039 li
307.438 182.892 li
307.187 182.793 li
306.671 182.272 li
306.039 182.507 li
305.729 183.768 li
304.821 184.248 li
303.836 184.224 li
302.388 184.382 li
300.365 185.801 li
299.995 185.609 li
299.729 185.689 li
299.559 186.106 li
299.678 186.399 li
300.166 186.865 li
300.265 187.17 li
299.981 187.452 li
300.461 187.573 li
300.795 187.724 li
301.071 187.507 li
301.25 187.269 li
301.522 187.304 li
301.634 187.578 li
301.558 187.776 li
301.608 187.892 li
301.756 187.841 li
301.918 187.663 li
302.271 187.887 li
302.458 188.573 li
302.636 188.617 li
303.044 188.57 li
303.483 188.67 li
305.43 187.199 li
305.741 186.648 li
306.303 186.143 li
307.346 185.687 li
307.82 185.463 li
308.166 185.521 li
308.945 185.333 li
309.098 185.129 li
309.475 184.848 li
309.718 184.747 li
309.607 184.452 li
309.422 184.072 li
cp
.0152285 .0084535 .0084535 0 cmyk
@
392.532 332.454 mo
392.096 332.026 li
391.316 332.076 li
390.629 332.249 li
390.203 332.424 li
389.899 332.275 li
389.374 331.872 li
388.686 331.592 li
388.161 331.726 li
387.803 332.121 li
387.898 332.479 li
388.201 332.494 li
388.711 332.333 li
389.516 332.611 li
389.947 332.953 li
389.866 333.367 li
389.438 333.707 li
389.645 333.872 li
390.22 333.958 li
390.343 334.314 li
390.255 334.671 li
390.629 334.686 li
390.804 335.11 li
391.128 335.524 li
391.866 335.516 li
392.322 334.943 li
392.503 334.616 li
392.136 334.313 li
391.769 334.24 li
391.756 334.104 li
391.933 333.996 li
392.382 334.178 li
392.576 333.85 li
392.413 333.589 li
392.65 333.152 li
392.532 332.454 li
cp
406.208 328.744 mo
405.775 329.043 li
404.871 329.362 li
405.576 327.513 li
405.754 326.863 li
405.765 326.148 li
405.568 325.62 li
405.296 325.108 li
405.089 324.468 li
405.067 324.148 li
405.357 322.126 li
405.344 321.599 li
405.147 321.146 li
404.358 320.835 li
403.672 321.386 li
403.422 322.379 li
403.955 323.38 li
400.827 325.162 li
400.238 325.089 li
400.286 325.96 li
400.497 326.888 li
400.969 327.701 li
401.798 328.246 li
401.798 328.585 li
400.969 328.527 li
400.369 328.232 li
399.784 327.85 li
399.051 327.539 li
398.593 327.53 li
396.922 327.876 li
396.34 328.124 li
395.661 328.567 li
395.072 329.143 li
394.785 329.768 li
394.923 330.804 li
395.442 331.587 li
396.078 332.286 li
396.587 333.078 li
397.296 332.497 li
398.898 331.786 li
399.355 331.22 li
399.966 331.592 li
399.727 332.55 li
399.705 333.397 li
399.389 333.997 li
398.276 334.223 li
397.997 334.508 li
397.972 335.136 li
398.171 335.762 li
398.582 336.047 li
399.966 335.337 li
399.741 336.133 li
399.705 336.781 li
399.944 337.263 li
400.576 337.563 li
399.051 338.673 li
400.024 338.606 li
403.258 337.604 li
403.955 336.988 li
403.585 336.57 li
402.851 336.264 li
402.32 335.856 li
402.571 335.151 li
403.345 334.249 li
403.483 333.837 li
403.621 333.078 li
404.13 333.446 li
404.969 333.889 li
405.75 334.158 li
406.092 334.023 li
405.972 333.181 li
405.395 331.95 li
405.147 331.22 li
405.754 331.477 li
406.146 331.096 li
406.346 330.412 li
406.397 329.768 li
406.354 328.851 li
406.208 328.744 li
cp
409.874 319.237 mo
409.361 319.291 li
408.89 319.56 li
408.766 319.952 li
409.002 320.383 li
409.154 320.835 li
409.101 321.222 li
409.22 321.501 li
409.558 321.855 li
409.776 322.81 li
409.885 323.047 li
410.114 322.969 li
410.408 322.565 li
410.604 321.438 li
410.626 320.059 li
410.321 319.371 li
409.874 319.237 li
cp
429.445 305.234 mo
428.177 304.785 li
427.203 303.82 li
426.903 302.302 li
425.879 301.502 li
423.581 300.235 li
421.652 298.027 li
420.494 297.146 li
417.744 296.724 li
417.075 295.37 li
418.191 293.116 li
418.002 290.934 li
416.752 291.353 li
415.437 290.732 li
413.721 290.306 li
412.105 290.97 li
411.593 291.632 li
410.979 292.163 li
410.333 292.248 li
409.692 292.486 li
408.238 293.641 li
406.573 293.593 li
405.18 292.858 li
403.721 292.411 li
402.051 292.711 li
400.432 292.894 li
399.033 292.008 li
397.907 290.632 li
397.538 287.595 li
396.509 288.393 li
395.406 289.967 li
394.184 289.718 li
391.793 290.946 li
390.524 290.691 li
389.38 289.832 li
388.171 289.25 li
386.884 289.034 li
385.536 289.225 li
382.782 289.108 li
382.08 286.57 li
382.615 285.331 li
382.644 284.034 li
382.048 283.333 li
381.36 282.907 li
381.208 282.434 li
380.959 281.92 li
379.972 281.22 li
379.377 280.089 li
378.527 279.164 li
377.374 278.774 li
376.109 278.786 li
374.827 278.687 li
374.103 278.197 li
373.517 277.705 li
372.164 277.6 li
371.8 277.478 li
371.439 277.313 li
371.26 276.868 li
371.223 276.433 li
370.813 276.083 li
370.397 275.77 li
369.492 275.243 li
369.133 274.019 li
367.499 275.773 li
367.065 276.931 li
364.846 278.111 li
363.748 278.449 li
363.139 278.384 li
362.7 278.666 li
361.86 280.485 li
360.896 281.494 li
359.876 282.4 li
359.378 283.841 li
359.249 285.531 li
358.686 286.764 li
357.994 288.06 li
357.473 289.715 li
357.089 291.426 li
356.467 292.699 li
356.42 294.08 li
357.565 294.564 li
357.731 295.17 li
357.814 295.863 li
358.308 297.154 li
358.229 298.557 li
358.686 299.592 li
359.328 300.021 li
359.06 301.523 li
357.196 303.756 li
356.9 305.221 li
356.836 306.57 li
355.899 307.528 li
355.659 308.721 li
356.577 309.805 li
357.025 311.204 li
357.214 314.107 li
357.818 315.193 li
358.917 315.994 li
359.914 317.041 li
360.301 318.194 li
360.781 319.2 li
363.563 322.233 li
364.163 323.712 li
364.158 324.725 li
364.271 324.966 li
364.273 324.967 li
364.738 325.093 li
365.402 325.643 li
365.675 325.386 li
366.027 325.346 li
366.453 325.454 li
366.929 325.643 li
368.12 325.536 li
369.055 324.698 li
369.534 323.311 li
369.665 321.554 li
370.166 321.942 li
370.449 322.477 li
370.918 323.785 li
372.073 323.054 li
373.283 323.08 li
373.839 322.703 li
373.021 320.773 li
374.094 320.68 li
374.802 319.948 li
375.376 318.972 li
376.073 318.135 li
376.02 318.803 li
375.823 319.326 li
375.594 319.726 li
375.464 320.027 li
375.391 320.678 li
375.464 324.716 li
375.391 325.082 li
375.278 325.492 li
375.256 325.92 li
375.464 326.356 li
375.834 326.558 li
376.884 326.648 li
377.527 326.797 li
378.024 326.706 li
378.231 326.76 li
378.279 326.97 li
378.29 327.768 li
378.385 328.063 li
379.202 328.519 li
381.276 328.426 li
382.222 328.585 li
382.199 327.778 li
382.29 326.943 li
382.537 326.285 li
382.984 326.015 li
383.998 326.119 li
384.492 326.437 li
385.437 327.708 li
386.473 327.642 li
387.206 326.224 li
387.937 325.501 li
388.95 327.539 li
387.922 327.938 li
387.464 328.226 li
387.555 328.674 li
388.194 329.563 li
388.772 329.794 li
391.544 330.106 li
391.322 330.472 li
390.956 330.538 li
390.095 330.55 li
390.072 331.382 li
391.413 331.472 li
392.412 331.171 li
393.539 329.701 li
394.16 328.585 li
393.557 327.876 li
393.419 328.412 li
393.11 328.846 li
392.718 328.977 li
392.308 328.585 li
392.642 326.356 li
392.699 325.222 li
392.686 324.813 li
392.642 324.53 li
392.34 324.064 li
391.937 323.829 li
391.729 323.572 li
392.031 323.04 li
392.608 323.279 li
393.48 323.319 li
394.353 323.173 li
394.923 322.854 li
395.283 322.129 li
395.192 321.503 li
394.923 320.8 li
394.771 319.841 li
394.015 319.893 li
389.561 322.262 li
389.561 321.892 li
390.036 321.398 li
390.124 320.649 li
390.353 319.959 li
392.107 319.479 li
393.637 318.707 li
394.466 318.541 li
393.949 317.813 li
393.92 317.429 li
394.323 317.229 li
395.803 316.946 li
396.479 316.989 li
398.887 317.839 li
399.192 318.088 li
399.621 318.541 li
399.77 318.892 li
399.792 319.256 li
399.926 319.544 li
400.402 319.655 li
401.307 319.652 li
401.699 319.549 li
402.092 319.286 li
401.775 319.202 li
401.224 318.963 li
400.871 318.914 li
401.082 318.188 li
400.973 317.682 li
400.228 316.676 li
399.847 316.019 li
399.661 315.512 li
399.345 314.068 li
398.778 312.884 li
398.789 312.299 li
399.345 311.423 li
399.857 310.956 li
400.119 311.107 li
400.565 312.543 li
400.392 312.95 li
400.762 314.046 li
400.565 314.816 li
401.463 314.457 li
402.073 314.952 li
402.626 315.752 li
403.334 316.307 li
403.359 315.463 li
403.683 314.961 li
404.064 314.804 li
404.25 315.001 li
404.25 317.389 li
404.937 316.857 li
405.471 316.92 li
405.957 317.833 li
406.996 318.302 li
407.443 318.088 li
407.85 316.574 li
408.148 317.105 li
408.317 318.107 li
411.257 318.061 li
412.363 318.188 li
412.679 316.88 li
413.066 316.015 li
413.363 316.059 li
413.321 317.102 li
413.364 318.209 li
413.981 318.166 li
415.344 315.76 li
415.749 315.164 li
415.962 315.355 li
416.332 314.677 li
417.011 313.833 li
417.647 312.862 li
418.113 309.635 li
418.75 308.844 li
419.599 308.228 li
420.651 307.806 li
421.781 307.85 li
422.658 308.41 li
422.907 309.609 li
423.706 310.72 li
424.726 311.545 li
425.533 312.589 li
426.433 313.507 li
426.521 313.704 li
426.601 313.54 li
427.03 312.646 li
427.824 311.688 li
428.534 310.176 li
429.04 309.15 li
429.025 308.844 li
428.773 308.098 li
429.074 307.649 li
429.339 307.126 li
429.415 306.118 li
429.626 305.391 li
429.445 305.234 li
cp
376.227 331.064 mo
375.965 330.704 li
375.711 329.801 li
375.608 329.147 li
375.387 329.023 li
375.158 328.807 li
375.027 328.426 li
374.599 328.498 li
374.075 329.329 li
373.813 329.92 li
373.578 329.759 li
373.534 329.258 li
373.69 328.658 li
374.003 327.778 li
373.773 327.176 li
373.065 327.369 li
372.658 327.894 li
372.27 328.638 li
371.659 329.429 li
371.354 330.268 li
371.746 331.043 li
372.411 331.447 li
373.059 331.525 li
374.163 331.169 li
376.183 331.702 li
376.655 331.583 li
376.408 331.209 li
376.227 331.064 li
cp
385.291 342.648 mo
385.088 342.627 li
385.084 342.291 li
383.671 341.536 li
383.369 341.61 li
383.191 341.783 li
383.173 342.079 li
383.054 342.326 li
383.035 342.598 li
383.231 342.748 li
383.398 342.785 li
383.595 342.981 li
383.639 343.263 li
383.482 343.609 li
383.525 343.812 li
383.791 343.755 li
384.023 343.536 li
384.499 343.3 li
384.848 343.249 li
385.27 343.344 li
385.557 343.302 li
385.749 343.174 li
386.178 342.645 li
386.243 342.354 li
386.131 342.233 li
385.291 342.648 li
cp
375.779 332.587 mo
374.275 332.335 li
373.24 332.557 li
372.143 332.988 li
371.278 333.141 li
370.74 332.178 li
369.784 331.857 li
369.403 331.592 li
369.152 331.096 li
368.945 330.144 li
368.764 329.768 li
369.767 328.718 li
370.159 328.033 li
370.221 327.318 li
369.875 326.638 li
369.283 326.108 li
368.607 325.899 li
368.019 326.186 li
367.303 326.746 li
367.041 327.09 li
366.831 328.293 li
366.562 328.474 li
366.213 328.538 li
365.872 328.789 li
365.359 329.768 li
365.239 330.724 li
365.402 331.693 li
366.635 335.708 li
366.732 336.398 li
366.743 336.874 li
366.809 337.276 li
367.085 337.765 li
367.492 338.032 li
368.16 338.262 li
368.793 338.242 li
369.065 337.765 li
369.214 336.631 li
369.61 335.715 li
370.195 335.311 li
370.929 335.708 li
371.431 337.903 li
371.874 338.955 li
372.601 338.858 li
373.429 338.474 li
374.134 338.783 li
374.787 339.177 li
375.475 339.049 li
375.659 338.496 li
375.281 337.394 li
375.638 337.192 li
375.893 336.913 li
375.929 336.272 li
375.805 335.151 li
375.936 334.441 li
376.183 333.864 li
376.313 333.319 li
376.085 332.702 li
375.779 332.587 li
cp
383.624 333.685 mo
383.758 333.519 li
383.726 333.134 li
383.951 333.015 li
384.431 333.015 li
384.608 332.723 li
384.357 332.3 li
383.689 331.552 li
383.126 331.421 li
382.526 331.875 li
382.222 332.375 li
382.167 332.669 li
382.45 333.094 li
382.94 333.437 li
383.202 333.565 li
383.624 333.685 li
cp
.49427 .41117 .412055 .0505074 cmyk
f
392.532 332.454 mo
392.096 332.026 li
391.316 332.076 li
390.629 332.249 li
390.203 332.424 li
389.899 332.275 li
389.374 331.872 li
388.686 331.592 li
388.161 331.726 li
387.803 332.121 li
387.898 332.479 li
388.201 332.494 li
388.711 332.333 li
389.516 332.611 li
389.947 332.953 li
389.866 333.367 li
389.438 333.707 li
389.645 333.872 li
390.22 333.958 li
390.343 334.314 li
390.255 334.671 li
390.629 334.686 li
390.804 335.11 li
391.128 335.524 li
391.866 335.516 li
392.322 334.943 li
392.503 334.616 li
392.136 334.313 li
391.769 334.24 li
391.756 334.104 li
391.933 333.996 li
392.382 334.178 li
392.576 333.85 li
392.413 333.589 li
392.65 333.152 li
392.532 332.454 li
cp
406.208 328.744 mo
405.775 329.043 li
404.871 329.362 li
405.576 327.513 li
405.754 326.863 li
405.765 326.148 li
405.568 325.62 li
405.296 325.108 li
405.089 324.468 li
405.067 324.148 li
405.357 322.126 li
405.344 321.599 li
405.147 321.146 li
404.358 320.835 li
403.672 321.386 li
403.422 322.379 li
403.955 323.38 li
400.827 325.162 li
400.238 325.089 li
400.286 325.96 li
400.497 326.888 li
400.969 327.701 li
401.798 328.246 li
401.798 328.585 li
400.969 328.527 li
400.369 328.232 li
399.784 327.85 li
399.051 327.539 li
398.593 327.53 li
396.922 327.876 li
396.34 328.124 li
395.661 328.567 li
395.072 329.143 li
394.785 329.768 li
394.923 330.804 li
395.442 331.587 li
396.078 332.286 li
396.587 333.078 li
397.296 332.497 li
398.898 331.786 li
399.355 331.22 li
399.966 331.592 li
399.727 332.55 li
399.705 333.397 li
399.389 333.997 li
398.276 334.223 li
397.997 334.508 li
397.972 335.136 li
398.171 335.762 li
398.582 336.047 li
399.966 335.337 li
399.741 336.133 li
399.705 336.781 li
399.944 337.263 li
400.576 337.563 li
399.051 338.673 li
400.024 338.606 li
403.258 337.604 li
403.955 336.988 li
403.585 336.57 li
402.851 336.264 li
402.32 335.856 li
402.571 335.151 li
403.345 334.249 li
403.483 333.837 li
403.621 333.078 li
404.13 333.446 li
404.969 333.889 li
405.75 334.158 li
406.092 334.023 li
405.972 333.181 li
405.395 331.95 li
405.147 331.22 li
405.754 331.477 li
406.146 331.096 li
406.346 330.412 li
406.397 329.768 li
406.354 328.851 li
406.208 328.744 li
cp
409.874 319.237 mo
409.361 319.291 li
408.89 319.56 li
408.766 319.952 li
409.002 320.383 li
409.154 320.835 li
409.101 321.222 li
409.22 321.501 li
409.558 321.855 li
409.776 322.81 li
409.885 323.047 li
410.114 322.969 li
410.408 322.565 li
410.604 321.438 li
410.626 320.059 li
410.321 319.371 li
409.874 319.237 li
cp
429.445 305.234 mo
428.177 304.785 li
427.203 303.82 li
426.903 302.302 li
425.879 301.502 li
423.581 300.235 li
421.652 298.027 li
420.494 297.146 li
417.744 296.724 li
417.075 295.37 li
418.191 293.116 li
418.002 290.934 li
416.752 291.353 li
415.437 290.732 li
413.721 290.306 li
412.105 290.97 li
411.593 291.632 li
410.979 292.163 li
410.333 292.248 li
409.692 292.486 li
408.238 293.641 li
406.573 293.593 li
405.18 292.858 li
403.721 292.411 li
402.051 292.711 li
400.432 292.894 li
399.033 292.008 li
397.907 290.632 li
397.538 287.595 li
396.509 288.393 li
395.406 289.967 li
394.184 289.718 li
391.793 290.946 li
390.524 290.691 li
389.38 289.832 li
388.171 289.25 li
386.884 289.034 li
385.536 289.225 li
382.782 289.108 li
382.08 286.57 li
382.615 285.331 li
382.644 284.034 li
382.048 283.333 li
381.36 282.907 li
381.208 282.434 li
380.959 281.92 li
379.972 281.22 li
379.377 280.089 li
378.527 279.164 li
377.374 278.774 li
376.109 278.786 li
374.827 278.687 li
374.103 278.197 li
373.517 277.705 li
372.164 277.6 li
371.8 277.478 li
371.439 277.313 li
371.26 276.868 li
371.223 276.433 li
370.813 276.083 li
370.397 275.77 li
369.492 275.243 li
369.133 274.019 li
367.499 275.773 li
367.065 276.931 li
364.846 278.111 li
363.748 278.449 li
363.139 278.384 li
362.7 278.666 li
361.86 280.485 li
360.896 281.494 li
359.876 282.4 li
359.378 283.841 li
359.249 285.531 li
358.686 286.764 li
357.994 288.06 li
357.473 289.715 li
357.089 291.426 li
356.467 292.699 li
356.42 294.08 li
357.565 294.564 li
357.731 295.17 li
357.814 295.863 li
358.308 297.154 li
358.229 298.557 li
358.686 299.592 li
359.328 300.021 li
359.06 301.523 li
357.196 303.756 li
356.9 305.221 li
356.836 306.57 li
355.899 307.528 li
355.659 308.721 li
356.577 309.805 li
357.025 311.204 li
357.214 314.107 li
357.818 315.193 li
358.917 315.994 li
359.914 317.041 li
360.301 318.194 li
360.781 319.2 li
363.563 322.233 li
364.163 323.712 li
364.158 324.725 li
364.271 324.966 li
364.273 324.967 li
364.738 325.093 li
365.402 325.643 li
365.675 325.386 li
366.027 325.346 li
366.453 325.454 li
366.929 325.643 li
368.12 325.536 li
369.055 324.698 li
369.534 323.311 li
369.665 321.554 li
370.166 321.942 li
370.449 322.477 li
370.918 323.785 li
372.073 323.054 li
373.283 323.08 li
373.839 322.703 li
373.021 320.773 li
374.094 320.68 li
374.802 319.948 li
375.376 318.972 li
376.073 318.135 li
376.02 318.803 li
375.823 319.326 li
375.594 319.726 li
375.464 320.027 li
375.391 320.678 li
375.464 324.716 li
375.391 325.082 li
375.278 325.492 li
375.256 325.92 li
375.464 326.356 li
375.834 326.558 li
376.884 326.648 li
377.527 326.797 li
378.024 326.706 li
378.231 326.76 li
378.279 326.97 li
378.29 327.768 li
378.385 328.063 li
379.202 328.519 li
381.276 328.426 li
382.222 328.585 li
382.199 327.778 li
382.29 326.943 li
382.537 326.285 li
382.984 326.015 li
383.998 326.119 li
384.492 326.437 li
385.437 327.708 li
386.473 327.642 li
387.206 326.224 li
387.937 325.501 li
388.95 327.539 li
387.922 327.938 li
387.464 328.226 li
387.555 328.674 li
388.194 329.563 li
388.772 329.794 li
391.544 330.106 li
391.322 330.472 li
390.956 330.538 li
390.095 330.55 li
390.072 331.382 li
391.413 331.472 li
392.412 331.171 li
393.539 329.701 li
394.16 328.585 li
393.557 327.876 li
393.419 328.412 li
393.11 328.846 li
392.718 328.977 li
392.308 328.585 li
392.642 326.356 li
392.699 325.222 li
392.686 324.813 li
392.642 324.53 li
392.34 324.064 li
391.937 323.829 li
391.729 323.572 li
392.031 323.04 li
392.608 323.279 li
393.48 323.319 li
394.353 323.173 li
394.923 322.854 li
395.283 322.129 li
395.192 321.503 li
394.923 320.8 li
394.771 319.841 li
394.015 319.893 li
389.561 322.262 li
389.561 321.892 li
390.036 321.398 li
390.124 320.649 li
390.353 319.959 li
392.107 319.479 li
393.637 318.707 li
394.466 318.541 li
393.949 317.813 li
393.92 317.429 li
394.323 317.229 li
395.803 316.946 li
396.479 316.989 li
398.887 317.839 li
399.192 318.088 li
399.621 318.541 li
399.77 318.892 li
399.792 319.256 li
399.926 319.544 li
400.402 319.655 li
401.307 319.652 li
401.699 319.549 li
402.092 319.286 li
401.775 319.202 li
401.224 318.963 li
400.871 318.914 li
401.082 318.188 li
400.973 317.682 li
400.228 316.676 li
399.847 316.019 li
399.661 315.512 li
399.345 314.068 li
398.778 312.884 li
398.789 312.299 li
399.345 311.423 li
399.857 310.956 li
400.119 311.107 li
400.565 312.543 li
400.392 312.95 li
400.762 314.046 li
400.565 314.816 li
401.463 314.457 li
402.073 314.952 li
402.626 315.752 li
403.334 316.307 li
403.359 315.463 li
403.683 314.961 li
404.064 314.804 li
404.25 315.001 li
404.25 317.389 li
404.937 316.857 li
405.471 316.92 li
405.957 317.833 li
406.996 318.302 li
407.443 318.088 li
407.85 316.574 li
408.148 317.105 li
408.317 318.107 li
411.257 318.061 li
412.363 318.188 li
412.679 316.88 li
413.066 316.015 li
413.363 316.059 li
413.321 317.102 li
413.364 318.209 li
413.981 318.166 li
415.344 315.76 li
415.749 315.164 li
415.962 315.355 li
416.332 314.677 li
417.011 313.833 li
417.647 312.862 li
418.113 309.635 li
418.75 308.844 li
419.599 308.228 li
420.651 307.806 li
421.781 307.85 li
422.658 308.41 li
422.907 309.609 li
423.706 310.72 li
424.726 311.545 li
425.533 312.589 li
426.433 313.507 li
426.521 313.704 li
426.601 313.54 li
427.03 312.646 li
427.824 311.688 li
428.534 310.176 li
429.04 309.15 li
429.025 308.844 li
428.773 308.098 li
429.074 307.649 li
429.339 307.126 li
429.415 306.118 li
429.626 305.391 li
429.445 305.234 li
cp
376.227 331.064 mo
375.965 330.704 li
375.711 329.801 li
375.608 329.147 li
375.387 329.023 li
375.158 328.807 li
375.027 328.426 li
374.599 328.498 li
374.075 329.329 li
373.813 329.92 li
373.578 329.759 li
373.534 329.258 li
373.69 328.658 li
374.003 327.778 li
373.773 327.176 li
373.065 327.369 li
372.658 327.894 li
372.27 328.638 li
371.659 329.429 li
371.354 330.268 li
371.746 331.043 li
372.411 331.447 li
373.059 331.525 li
374.163 331.169 li
376.183 331.702 li
376.655 331.583 li
376.408 331.209 li
376.227 331.064 li
cp
385.291 342.648 mo
385.088 342.627 li
385.084 342.291 li
383.671 341.536 li
383.369 341.61 li
383.191 341.783 li
383.173 342.079 li
383.054 342.326 li
383.035 342.598 li
383.231 342.748 li
383.398 342.785 li
383.595 342.981 li
383.639 343.263 li
383.482 343.609 li
383.525 343.812 li
383.791 343.755 li
384.023 343.536 li
384.499 343.3 li
384.848 343.249 li
385.27 343.344 li
385.557 343.302 li
385.749 343.174 li
386.178 342.645 li
386.243 342.354 li
386.131 342.233 li
385.291 342.648 li
cp
375.779 332.587 mo
374.275 332.335 li
373.24 332.557 li
372.143 332.988 li
371.278 333.141 li
370.74 332.178 li
369.784 331.857 li
369.403 331.592 li
369.152 331.096 li
368.945 330.144 li
368.764 329.768 li
369.767 328.718 li
370.159 328.033 li
370.221 327.318 li
369.875 326.638 li
369.283 326.108 li
368.607 325.899 li
368.019 326.186 li
367.303 326.746 li
367.041 327.09 li
366.831 328.293 li
366.562 328.474 li
366.213 328.538 li
365.872 328.789 li
365.359 329.768 li
365.239 330.724 li
365.402 331.693 li
366.635 335.708 li
366.732 336.398 li
366.743 336.874 li
366.809 337.276 li
367.085 337.765 li
367.492 338.032 li
368.16 338.262 li
368.793 338.242 li
369.065 337.765 li
369.214 336.631 li
369.61 335.715 li
370.195 335.311 li
370.929 335.708 li
371.431 337.903 li
371.874 338.955 li
372.601 338.858 li
373.429 338.474 li
374.134 338.783 li
374.787 339.177 li
375.475 339.049 li
375.659 338.496 li
375.281 337.394 li
375.638 337.192 li
375.893 336.913 li
375.929 336.272 li
375.805 335.151 li
375.936 334.441 li
376.183 333.864 li
376.313 333.319 li
376.085 332.702 li
375.779 332.587 li
cp
383.624 333.685 mo
383.758 333.519 li
383.726 333.134 li
383.951 333.015 li
384.431 333.015 li
384.608 332.723 li
384.357 332.3 li
383.689 331.552 li
383.126 331.421 li
382.526 331.875 li
382.222 332.375 li
382.167 332.669 li
382.45 333.094 li
382.94 333.437 li
383.202 333.565 li
383.624 333.685 li
cp
.0152285 .0084535 .0084535 0 cmyk
@
300.684 174.675 mo
300.596 174.138 li
300.167 173.651 li
299.611 173.21 li
299.001 172.694 li
298.718 172.377 li
298.503 172.005 li
298.453 171.81 li
298.314 170.776 li
298.249 170.537 li
298.14 170.365 li
297.973 170.271 li
297.715 170.335 li
297.464 170.546 li
297.247 170.836 li
297.108 171.109 li
296.854 172.17 li
296.669 172.618 li
296.276 172.976 li
299.307 175.34 li
300.211 175.285 li
300.684 174.675 li
cp
305.298 196.625 mo
304.277 196.535 li
303.488 196.956 li
303.121 197.467 li
303.038 198.192 li
303.14 198.9 li
303.43 199.083 li
303.797 199.046 li
304.142 199.302 li
304.647 199.178 li
305.036 198.722 li
305.072 198.377 li
305.258 198.008 li
305.737 197.843 li
305.934 197.61 li
305.759 196.933 li
305.298 196.625 li
cp
307.743 176.577 mo
307.492 175.974 li
307.245 175.671 li
307.391 175.198 li
307.245 173.169 li
307.15 172.751 li
306.736 171.989 li
306.635 171.607 li
306.686 171.268 li
306.918 170.502 li
306.969 170.048 li
306.74 169.14 li
306.169 168.565 li
304.734 167.841 li
304.059 167.221 li
303.387 166.423 li
302.674 165.908 li
301.86 166.119 li
300.807 167.345 li
300.375 167.508 li
300.189 168.117 li
300.233 170.792 li
300.069 171.398 li
300.167 171.86 li
301.759 174.9 li
301.988 175.207 li
302.238 175.379 li
302.289 175.652 li
301.911 176.247 li
301.584 176.464 li
300.211 176.825 li
301.127 178.052 li
301.999 178.46 li
304.346 178.332 li
304.517 178.226 li
304.702 178.036 li
304.941 177.951 li
305.279 178.157 li
305.748 178.666 li
306.017 178.79 li
306.358 178.751 li
306.806 178.359 li
307.307 177.171 li
307.885 176.825 li
307.743 176.577 li
cp
336.907 182.611 mo
336.284 182.927 li
335.605 183.378 li
335.62 184.396 li
335.979 184.8 li
335.213 185.847 li
334.789 186.582 li
333.631 187.271 li
332.357 187.567 li
331.047 188.227 li
330.535 187.05 li
329.418 187.309 li
328.311 187.654 li
327.526 188.104 li
326.709 188.238 li
324.794 188.173 li
323.484 186.448 li
322.192 186.059 li
321.301 185.472 li
321.066 183.856 li
320.18 182.592 li
319.124 181.298 li
319.792 179.858 li
321.043 179.938 li
322.474 180.812 li
323.535 180.451 li
324.48 179.875 li
324.555 178.905 li
324.813 178.011 li
326.815 177.819 li
327.844 176.508 li
328.472 175.176 li
329.363 174.222 li
330.756 173.888 li
332.362 174.019 li
333.128 175.339 li
333.423 177.134 li
333.889 178.388 li
333.917 179.764 li
333.506 181.359 li
334.729 181.344 li
335.776 180.966 li
336.686 180.953 li
337.027 181.772 li
336.907 182.611 li
cp
364.93 182.863 mo
364.265 182.294 li
363.203 182.176 li
362.114 181.762 li
360.61 181.56 li
358.1 180.168 li
356.97 179.706 li
355.848 178.967 li
354.616 178.777 li
353.421 179.155 li
352.429 178.316 li
352.508 177.404 li
352.978 176.445 li
353.163 175.335 li
353.177 174.191 li
351.995 174.573 li
351.465 173.885 li
352.766 172.354 li
352.549 171.333 li
352.189 170.319 li
352.448 169.551 li
352.434 168.631 li
352.346 167.761 li
354.612 166.087 li
355.53 165.787 li
356.042 164.999 li
356.273 162.705 li
355.216 161.082 li
354.349 160.905 li
353.523 160.523 li
352.9 158.85 li
351.913 158.801 li
350.855 158.871 li
349.702 158.026 li
349.153 156.528 li
348.927 153.862 li
348.498 152.519 li
348.198 152.259 li
347.847 152.318 li
347.612 152.546 li
347.316 152.589 li
346.555 152.05 li
344.691 152.71 li
342.979 152.294 li
342.287 151.872 li
341.581 151.233 li
341.558 150.163 li
341.904 149.155 li
342.158 148.771 li
342.338 148.402 li
342.042 148.154 li
341.664 148.063 li
341.304 148.14 li
340.99 148.383 li
340.4 149.152 li
339.74 149.822 li
338.725 149.996 li
337.83 149.386 li
337.664 148.832 li
337.594 148.271 li
337.271 148.072 li
336.93 148.433 li
336.814 149.011 li
336.805 150.879 li
336.224 151.79 li
334.586 151.014 li
333.086 149.656 li
332.56 149.102 li
332.006 149.172 li
331.513 148.454 li
331.204 147.518 li
330.798 147.026 li
330.313 146.638 li
329.939 145.746 li
329.274 145.322 li
327.701 144.32 li
326.817 143.886 li
326.266 144.589 li
325.659 146.094 li
324.753 148.341 li
324.017 149.193 li
322.296 150.53 li
321.516 151.324 li
317.702 157.163 li
315.926 158.583 li
314.774 159.021 li
313.949 159.112 li
313.411 159.505 li
313.176 160.854 li
313.485 165.718 li
313.487 165.717 li
314.163 165.254 li
314.603 165.192 li
314.937 165.613 li
314.468 166.517 li
314.265 167.651 li
314.315 168.296 li
314.315 168.296 li
314.352 168.779 li
314.773 169.664 li
314.962 170.51 li
314.74 171.708 li
313.992 173.711 li
316.564 175.57 li
317.404 176.439 li
316.325 176.373 li
314.588 175.641 li
313.218 174.491 li
313.236 173.169 li
313.48 172.439 li
313.545 171.371 li
313.458 170.33 li
313.236 169.664 li
312.641 169.264 li
312.059 169.379 li
311.405 169.687 li
310.621 169.857 li
308.161 168.975 li
307.568 169.085 li
307.394 169.848 li
308.037 174.487 li
308.517 176.263 li
308.701 177.4 li
308.711 178.16 li
309.221 178.66 li
309.682 179.449 li
310.077 180.103 li
310.425 180.936 li
310.643 181.431 li
312.676 181.358 li
314.966 181.277 li
317.596 183.808 li
317.591 185.137 li
318.071 186.24 li
318.792 186.713 li
319.216 187.41 li
318.796 188.796 li
318.159 190.027 li
317.573 190.461 li
317.241 190.707 li
315.833 191.119 li
315.245 191.714 li
314.38 192.974 li
314.482 193.622 li
316.425 195.1 li
317.824 195.543 li
318.669 195.711 li
319.205 195.742 li
319.742 195.571 li
320.41 195.692 li
320.693 196.12 li
321.313 196.097 li
321.731 196.22 li
322.076 196.449 li
322.349 196.789 li
322.559 197.248 li
321.575 197.392 li
320.877 196.969 li
320.26 196.882 li
319.507 198.01 li
319.286 199.212 li
319.068 199.74 li
318.599 199.924 li
318.174 199.712 li
317.956 199.242 li
317.901 198.635 li
317.956 198.01 li
317.27 198.348 li
316.685 198.158 li
316.092 197.791 li
315.384 197.595 li
314.515 197.818 li
314.021 197.846 li
313.694 197.595 li
313.411 197.864 li
313.284 197.953 li
313.083 198.01 li
313.443 198.708 li
313.741 199.461 li
314.054 200.063 li
314.45 200.308 li
315.645 200.141 li
315.787 200.333 li
315.246 201.074 li
314.795 201.327 li
314.174 201.539 li
313.629 201.861 li
313.389 202.429 li
313.531 203.194 li
313.945 203.324 li
315.246 203.023 li
314.588 203.954 li
314.315 204.455 li
314.297 204.97 li
314.588 205.257 li
315.067 205.273 li
315.583 205.088 li
315.994 204.76 li
317.585 203.033 li
318.446 202.417 li
319.507 201.875 li
319.504 202.559 li
319.732 203.001 li
320.158 203.251 li
320.735 203.37 li
321.662 202.565 li
322.283 202.226 li
322.559 202.429 li
322.49 203.466 li
322.24 203.84 li
321.033 204.168 li
319.903 204.186 li
319.143 204.477 li
318.433 204.819 li
317.816 205.667 li
317.298 206.617 li
317.386 207.576 li
317.224 208.33 li
317.417 208.886 li
317.404 209.52 li
319.46 210.139 li
320.321 209.918 li
321.175 209.741 li
321.597 210.164 li
322.021 209.939 li
322.229 208.962 li
322.309 208.063 li
322.548 207.173 li
322.937 206.656 li
323.442 206.883 li
323.115 208.359 li
323.559 209.447 li
324.169 210.396 li
324.358 211.461 li
323.973 211.161 li
323.537 211.011 li
323.061 210.983 li
322.559 211.049 li
322.981 211.373 li
323.166 211.461 li
323.166 211.809 li
320.493 212.104 li
321.095 213.597 li
322.679 215.156 li
324.434 216.182 li
325.913 216.389 li
326.952 216.047 li
327.275 215.657 li
327.134 213.929 li
327.537 213.358 li
330.208 212.607 li
330.091 213.256 li
329.797 213.451 li
329.401 213.511 li
328.779 213.856 li
328.551 213.847 li
328.311 213.876 li
328.071 214.102 li
328.151 214.218 li
328.565 214.656 li
328.652 214.897 li
328.347 216.252 li
327.864 216.797 li
327.192 217.115 li
326.622 217.551 li
326.636 217.554 li
328.716 217.982 li
330.465 217.983 li
334.175 216.395 li
336.104 217.275 li
337.83 218.727 li
339.938 219.012 li
341.941 218.424 li
343.837 217.509 li
345.323 217.01 li
345.725 215.366 li
346.454 214.575 li
347.598 214.08 li
348.138 213.38 li
348.507 212.451 li
349.199 211.714 li
350.071 211.898 li
350.325 212.234 li
351.446 211.451 li
353.578 207.481 li
353.795 207.005 li
354.053 206.568 li
354.399 206.289 li
354.759 206.038 li
355.119 205.497 li
355.433 204.9 li
357.855 200.411 li
359.84 195.53 li
362.59 189.654 li
362.932 188.393 li
362.673 187.128 li
363.259 186.105 li
364.085 185.098 li
364.971 184.73 li
365.437 183.728 li
364.93 182.863 li
cp
311.096 197.96 mo
310.86 197.723 li
310.01 197.366 li
309.487 197.065 li
309.302 196.625 li
309.432 196.138 li
309.291 196.092 li
308.662 196.645 li
307.928 196.289 li
307.83 196.403 li
308.153 196.775 li
308.484 197.35 li
308.724 198.179 li
308.706 198.85 li
308.124 199.514 li
308.328 199.84 li
308.262 200.219 li
307.775 200.88 li
307.765 201.163 li
308.8 201.033 li
311.078 199.215 li
311.314 198.699 li
311.205 198.22 li
311.096 197.96 li
cp
289.355 198.311 mo
289.035 198.049 li
288.723 197.517 li
288.363 197.268 li
288.036 197.723 li
287.785 198.48 li
287.647 199.397 li
287.644 199.598 li
287.829 199.662 li
288.145 199.484 li
288.265 199.447 li
288.381 199.733 li
288.672 200.239 li
289.115 200.442 li
289.638 200.362 li
290.042 200.191 li
290.608 199.612 li
290.793 199.265 li
290.456 198.891 li
289.355 198.311 li
cp
226.383 164.638 mo
226.056 164.601 li
225.831 164.781 li
225.351 165.282 li
224.599 165.882 li
224.465 166.326 li
224.821 166.791 li
224.966 167.067 li
224.959 167.14 li
224.959 167.29 li
225.079 167.246 li
225.308 167.007 li
225.602 166.901 li
225.951 166.931 li
226.281 166.75 li
226.463 166.262 li
226.601 165.683 li
226.801 165.176 li
226.739 164.822 li
226.383 164.638 li
cp
225.867 156.615 mo
223.389 157.486 li
222.256 157.081 li
221.791 159.085 li
223.149 160.249 li
224.973 160.504 li
225.885 159.786 li
225.642 159.569 li
225.119 159.475 li
224.683 159.256 li
224.665 158.662 li
224.901 158.549 li
226.038 158.45 li
226.906 158.975 li
227.524 158.521 li
227.597 157.691 li
227.106 157.081 li
225.867 156.615 li
cp
297.893 169.42 mo
298.685 168.735 li
298.979 167.733 li
298.565 167.265 li
297.748 167.136 li
296.868 167.149 li
296.033 166.639 li
295.317 166.455 li
294.688 166.625 li
294.14 167.159 li
293.627 168.717 li
293.529 168.91 li
293.708 169.524 li
294.14 169.512 li
294.641 169.246 li
295.052 169.085 li
296.912 169.485 li
297.893 169.42 li
cp
269.768 174.105 mo
269.419 174.161 li
269.365 174.647 li
269.604 175.345 li
269.75 175.657 li
270.008 175.533 li
270.433 175.111 li
270.571 174.498 li
270.258 174.17 li
269.768 174.105 li
cp
.49427 .41117 .412055 .0505074 cmyk
f
300.684 174.675 mo
300.596 174.138 li
300.167 173.651 li
299.611 173.21 li
299.001 172.694 li
298.718 172.377 li
298.503 172.005 li
298.453 171.81 li
298.314 170.776 li
298.249 170.537 li
298.14 170.365 li
297.973 170.271 li
297.715 170.335 li
297.464 170.546 li
297.247 170.836 li
297.108 171.109 li
296.854 172.17 li
296.669 172.618 li
296.276 172.976 li
299.307 175.34 li
300.211 175.285 li
300.684 174.675 li
cp
305.298 196.625 mo
304.277 196.535 li
303.488 196.956 li
303.121 197.467 li
303.038 198.192 li
303.14 198.9 li
303.43 199.083 li
303.797 199.046 li
304.142 199.302 li
304.647 199.178 li
305.036 198.722 li
305.072 198.377 li
305.258 198.008 li
305.737 197.843 li
305.934 197.61 li
305.759 196.933 li
305.298 196.625 li
cp
307.743 176.577 mo
307.492 175.974 li
307.245 175.671 li
307.391 175.198 li
307.245 173.169 li
307.15 172.751 li
306.736 171.989 li
306.635 171.607 li
306.686 171.268 li
306.918 170.502 li
306.969 170.048 li
306.74 169.14 li
306.169 168.565 li
304.734 167.841 li
304.059 167.221 li
303.387 166.423 li
302.674 165.908 li
301.86 166.119 li
300.807 167.345 li
300.375 167.508 li
300.189 168.117 li
300.233 170.792 li
300.069 171.398 li
300.167 171.86 li
301.759 174.9 li
301.988 175.207 li
302.238 175.379 li
302.289 175.652 li
301.911 176.247 li
301.584 176.464 li
300.211 176.825 li
301.127 178.052 li
301.999 178.46 li
304.346 178.332 li
304.517 178.226 li
304.702 178.036 li
304.941 177.951 li
305.279 178.157 li
305.748 178.666 li
306.017 178.79 li
306.358 178.751 li
306.806 178.359 li
307.307 177.171 li
307.885 176.825 li
307.743 176.577 li
cp
336.907 182.611 mo
336.284 182.927 li
335.605 183.378 li
335.62 184.396 li
335.979 184.8 li
335.213 185.847 li
334.789 186.582 li
333.631 187.271 li
332.357 187.567 li
331.047 188.227 li
330.535 187.05 li
329.418 187.309 li
328.311 187.654 li
327.526 188.104 li
326.709 188.238 li
324.794 188.173 li
323.484 186.448 li
322.192 186.059 li
321.301 185.472 li
321.066 183.856 li
320.18 182.592 li
319.124 181.298 li
319.792 179.858 li
321.043 179.938 li
322.474 180.812 li
323.535 180.451 li
324.48 179.875 li
324.555 178.905 li
324.813 178.011 li
326.815 177.819 li
327.844 176.508 li
328.472 175.176 li
329.363 174.222 li
330.756 173.888 li
332.362 174.019 li
333.128 175.339 li
333.423 177.134 li
333.889 178.388 li
333.917 179.764 li
333.506 181.359 li
334.729 181.344 li
335.776 180.966 li
336.686 180.953 li
337.027 181.772 li
336.907 182.611 li
cp
364.93 182.863 mo
364.265 182.294 li
363.203 182.176 li
362.114 181.762 li
360.61 181.56 li
358.1 180.168 li
356.97 179.706 li
355.848 178.967 li
354.616 178.777 li
353.421 179.155 li
352.429 178.316 li
352.508 177.404 li
352.978 176.445 li
353.163 175.335 li
353.177 174.191 li
351.995 174.573 li
351.465 173.885 li
352.766 172.354 li
352.549 171.333 li
352.189 170.319 li
352.448 169.551 li
352.434 168.631 li
352.346 167.761 li
354.612 166.087 li
355.53 165.787 li
356.042 164.999 li
356.273 162.705 li
355.216 161.082 li
354.349 160.905 li
353.523 160.523 li
352.9 158.85 li
351.913 158.801 li
350.855 158.871 li
349.702 158.026 li
349.153 156.528 li
348.927 153.862 li
348.498 152.519 li
348.198 152.259 li
347.847 152.318 li
347.612 152.546 li
347.316 152.589 li
346.555 152.05 li
344.691 152.71 li
342.979 152.294 li
342.287 151.872 li
341.581 151.233 li
341.558 150.163 li
341.904 149.155 li
342.158 148.771 li
342.338 148.402 li
342.042 148.154 li
341.664 148.063 li
341.304 148.14 li
340.99 148.383 li
340.4 149.152 li
339.74 149.822 li
338.725 149.996 li
337.83 149.386 li
337.664 148.832 li
337.594 148.271 li
337.271 148.072 li
336.93 148.433 li
336.814 149.011 li
336.805 150.879 li
336.224 151.79 li
334.586 151.014 li
333.086 149.656 li
332.56 149.102 li
332.006 149.172 li
331.513 148.454 li
331.204 147.518 li
330.798 147.026 li
330.313 146.638 li
329.939 145.746 li
329.274 145.322 li
327.701 144.32 li
326.817 143.886 li
326.266 144.589 li
325.659 146.094 li
324.753 148.341 li
324.017 149.193 li
322.296 150.53 li
321.516 151.324 li
317.702 157.163 li
315.926 158.583 li
314.774 159.021 li
313.949 159.112 li
313.411 159.505 li
313.176 160.854 li
313.485 165.718 li
313.487 165.717 li
314.163 165.254 li
314.603 165.192 li
314.937 165.613 li
314.468 166.517 li
314.265 167.651 li
314.315 168.296 li
314.315 168.296 li
314.352 168.779 li
314.773 169.664 li
314.962 170.51 li
314.74 171.708 li
313.992 173.711 li
316.564 175.57 li
317.404 176.439 li
316.325 176.373 li
314.588 175.641 li
313.218 174.491 li
313.236 173.169 li
313.48 172.439 li
313.545 171.371 li
313.458 170.33 li
313.236 169.664 li
312.641 169.264 li
312.059 169.379 li
311.405 169.687 li
310.621 169.857 li
308.161 168.975 li
307.568 169.085 li
307.394 169.848 li
308.037 174.487 li
308.517 176.263 li
308.701 177.4 li
308.711 178.16 li
309.221 178.66 li
309.682 179.449 li
310.077 180.103 li
310.425 180.936 li
310.643 181.431 li
312.676 181.358 li
314.966 181.277 li
317.596 183.808 li
317.591 185.137 li
318.071 186.24 li
318.792 186.713 li
319.216 187.41 li
318.796 188.796 li
318.159 190.027 li
317.573 190.461 li
317.241 190.707 li
315.833 191.119 li
315.245 191.714 li
314.38 192.974 li
314.482 193.622 li
316.425 195.1 li
317.824 195.543 li
318.669 195.711 li
319.205 195.742 li
319.742 195.571 li
320.41 195.692 li
320.693 196.12 li
321.313 196.097 li
321.731 196.22 li
322.076 196.449 li
322.349 196.789 li
322.559 197.248 li
321.575 197.392 li
320.877 196.969 li
320.26 196.882 li
319.507 198.01 li
319.286 199.212 li
319.068 199.74 li
318.599 199.924 li
318.174 199.712 li
317.956 199.242 li
317.901 198.635 li
317.956 198.01 li
317.27 198.348 li
316.685 198.158 li
316.092 197.791 li
315.384 197.595 li
314.515 197.818 li
314.021 197.846 li
313.694 197.595 li
313.411 197.864 li
313.284 197.953 li
313.083 198.01 li
313.443 198.708 li
313.741 199.461 li
314.054 200.063 li
314.45 200.308 li
315.645 200.141 li
315.787 200.333 li
315.246 201.074 li
314.795 201.327 li
314.174 201.539 li
313.629 201.861 li
313.389 202.429 li
313.531 203.194 li
313.945 203.324 li
315.246 203.023 li
314.588 203.954 li
314.315 204.455 li
314.297 204.97 li
314.588 205.257 li
315.067 205.273 li
315.583 205.088 li
315.994 204.76 li
317.585 203.033 li
318.446 202.417 li
319.507 201.875 li
319.504 202.559 li
319.732 203.001 li
320.158 203.251 li
320.735 203.37 li
321.662 202.565 li
322.283 202.226 li
322.559 202.429 li
322.49 203.466 li
322.24 203.84 li
321.033 204.168 li
319.903 204.186 li
319.143 204.477 li
318.433 204.819 li
317.816 205.667 li
317.298 206.617 li
317.386 207.576 li
317.224 208.33 li
317.417 208.886 li
317.404 209.52 li
319.46 210.139 li
320.321 209.918 li
321.175 209.741 li
321.597 210.164 li
322.021 209.939 li
322.229 208.962 li
322.309 208.063 li
322.548 207.173 li
322.937 206.656 li
323.442 206.883 li
323.115 208.359 li
323.559 209.447 li
324.169 210.396 li
324.358 211.461 li
323.973 211.161 li
323.537 211.011 li
323.061 210.983 li
322.559 211.049 li
322.981 211.373 li
323.166 211.461 li
323.166 211.809 li
320.493 212.104 li
321.095 213.597 li
322.679 215.156 li
324.434 216.182 li
325.913 216.389 li
326.952 216.047 li
327.275 215.657 li
327.134 213.929 li
327.537 213.358 li
330.208 212.607 li
330.091 213.256 li
329.797 213.451 li
329.401 213.511 li
328.779 213.856 li
328.551 213.847 li
328.311 213.876 li
328.071 214.102 li
328.151 214.218 li
328.565 214.656 li
328.652 214.897 li
328.347 216.252 li
327.864 216.797 li
327.192 217.115 li
326.622 217.551 li
326.636 217.554 li
328.716 217.982 li
330.465 217.983 li
334.175 216.395 li
336.104 217.275 li
337.83 218.727 li
339.938 219.012 li
341.941 218.424 li
343.837 217.509 li
345.323 217.01 li
345.725 215.366 li
346.454 214.575 li
347.598 214.08 li
348.138 213.38 li
348.507 212.451 li
349.199 211.714 li
350.071 211.898 li
350.325 212.234 li
351.446 211.451 li
353.578 207.481 li
353.795 207.005 li
354.053 206.568 li
354.399 206.289 li
354.759 206.038 li
355.119 205.497 li
355.433 204.9 li
357.855 200.411 li
359.84 195.53 li
362.59 189.654 li
362.932 188.393 li
362.673 187.128 li
363.259 186.105 li
364.085 185.098 li
364.971 184.73 li
365.437 183.728 li
364.93 182.863 li
cp
311.096 197.96 mo
310.86 197.723 li
310.01 197.366 li
309.487 197.065 li
309.302 196.625 li
309.432 196.138 li
309.291 196.092 li
308.662 196.645 li
307.928 196.289 li
307.83 196.403 li
308.153 196.775 li
308.484 197.35 li
308.724 198.179 li
308.706 198.85 li
308.124 199.514 li
308.328 199.84 li
308.262 200.219 li
307.775 200.88 li
307.765 201.163 li
308.8 201.033 li
311.078 199.215 li
311.314 198.699 li
311.205 198.22 li
311.096 197.96 li
cp
289.355 198.311 mo
289.035 198.049 li
288.723 197.517 li
288.363 197.268 li
288.036 197.723 li
287.785 198.48 li
287.647 199.397 li
287.644 199.598 li
287.829 199.662 li
288.145 199.484 li
288.265 199.447 li
288.381 199.733 li
288.672 200.239 li
289.115 200.442 li
289.638 200.362 li
290.042 200.191 li
290.608 199.612 li
290.793 199.265 li
290.456 198.891 li
289.355 198.311 li
cp
226.383 164.638 mo
226.056 164.601 li
225.831 164.781 li
225.351 165.282 li
224.599 165.882 li
224.465 166.326 li
224.821 166.791 li
224.966 167.067 li
224.959 167.14 li
224.959 167.29 li
225.079 167.246 li
225.308 167.007 li
225.602 166.901 li
225.951 166.931 li
226.281 166.75 li
226.463 166.262 li
226.601 165.683 li
226.801 165.176 li
226.739 164.822 li
226.383 164.638 li
cp
225.867 156.615 mo
223.389 157.486 li
222.256 157.081 li
221.791 159.085 li
223.149 160.249 li
224.973 160.504 li
225.885 159.786 li
225.642 159.569 li
225.119 159.475 li
224.683 159.256 li
224.665 158.662 li
224.901 158.549 li
226.038 158.45 li
226.906 158.975 li
227.524 158.521 li
227.597 157.691 li
227.106 157.081 li
225.867 156.615 li
cp
297.893 169.42 mo
298.685 168.735 li
298.979 167.733 li
298.565 167.265 li
297.748 167.136 li
296.868 167.149 li
296.033 166.639 li
295.317 166.455 li
294.688 166.625 li
294.14 167.159 li
293.627 168.717 li
293.529 168.91 li
293.708 169.524 li
294.14 169.512 li
294.641 169.246 li
295.052 169.085 li
296.912 169.485 li
297.893 169.42 li
cp
269.768 174.105 mo
269.419 174.161 li
269.365 174.647 li
269.604 175.345 li
269.75 175.657 li
270.008 175.533 li
270.433 175.111 li
270.571 174.498 li
270.258 174.17 li
269.768 174.105 li
cp
.0152285 .0084535 .0084535 0 cmyk
@
317.792 360.123 mo
316.975 359.313 li
316.837 358.852 li
316.593 358.521 li
316.452 358.125 li
316.328 357.27 li
315.914 356.226 li
315.384 355.599 li
314.904 355.272 li
314.392 355.104 li
313.607 355.183 li
313.349 355.242 li
312.87 355.474 li
312.517 355.995 li
312.339 356.677 li
312.303 357.359 li
312.346 358.028 li
312.477 358.616 li
312.79 359.012 li
313.313 359.355 li
313.894 359.516 li
314.359 359.395 li
314.744 359.498 li
314.853 359.896 li
314.439 360.213 li
314.446 360.563 li
315.286 360.857 li
315.961 361.016 li
316.354 361.196 li
316.568 361.07 li
316.612 360.754 li
316.801 360.717 li
317.142 360.938 li
317.542 361.112 li
317.76 361.174 li
317.978 361.205 li
318.13 361.06 li
317.88 360.457 li
317.792 360.123 li
cp
321.197 353.479 mo
320.986 353.154 li
320.43 353.058 li
319.504 353.277 li
318.621 353.767 li
317.992 354.599 li
317.684 355.281 li
317.477 355.599 li
317.313 355.92 li
317.509 356.12 li
317.727 356.136 li
317.941 356.294 li
318.036 356.766 li
318.029 357.324 li
318.319 357.663 li
318.559 357.494 li
318.69 356.913 li
319.104 356.355 li
320.281 355.806 li
320.506 355.474 li
320.888 355.379 li
321.804 355.66 li
322.13 355.605 li
322.091 355.275 li
321.793 354.841 li
321.451 354.458 li
321.037 354.205 li
321 354.075 li
321.233 353.835 li
321.197 353.479 li
cp
313.69 368.545 mo
313.236 367.873 li
313.313 367.463 li
313.738 367.096 li
313.632 366.568 li
312.876 366.18 li
312.495 366.176 li
312.474 366.36 li
312.103 366.716 li
312.19 366.964 li
312.484 367.238 li
312.386 367.933 li
312.103 369.177 li
312.201 369.901 li
312.43 369.952 li
312.644 370.123 li
312.724 370.373 li
312.953 370.509 li
313.393 370.389 li
313.618 369.965 li
313.618 369.421 li
313.683 369.101 li
313.879 369.069 li
314.021 368.907 li
313.869 368.644 li
313.69 368.545 li
cp
311.017 365.042 mo
310.784 364.868 li
310.304 364.618 li
309.374 364.46 li
309.029 364.273 li
308.677 364.159 li
308.528 364.288 li
308.756 364.664 li
308.786 364.818 li
308.68 364.935 li
308.517 365.016 li
308.48 365.135 li
308.567 365.264 li
308.549 365.429 li
308.418 365.67 li
308.19 366.316 li
308.233 366.496 li
308.444 366.54 li
308.633 366.608 li
308.72 366.825 li
309.073 367.155 li
309.752 367.34 li
309.977 367.15 li
309.759 366.764 li
310.119 366.689 li
310.77 366.654 li
310.926 366.039 li
311.234 365.778 li
311.198 365.306 li
311.017 365.042 li
cp
321.807 360.16 mo
322.033 359.962 li
322.447 359.885 li
322.832 359.96 li
323.112 359.652 li
323.155 359.275 li
323.224 359.091 li
323.482 358.787 li
323.569 358.392 li
323.177 358.16 li
322.545 358.007 li
322.047 357.954 li
321.858 357.989 li
321.669 358.002 li
321.346 357.916 li
321.084 357.716 li
320.63 357.83 li
320.027 358.323 li
319.533 358.53 li
319.126 358.339 li
318.773 358.284 li
318.61 358.363 li
318.414 358.478 li
317.967 358.609 li
317.509 358.669 li
317.571 358.852 li
318.559 359.289 li
318.73 359.401 li
318.9 359.489 li
319.33 359.493 li
319.863 359.305 li
320.321 359.236 li
320.667 359.384 li
320.906 359.711 li
320.997 360.127 li
321.215 360.439 li
321.618 360.355 li
321.807 360.16 li
cp
299.328 347.732 mo
299.288 347.263 li
298.278 347.9 li
298.075 347.966 li
297.777 347.726 li
297.563 347.354 li
297.432 347.012 li
297.323 346.859 li
296.847 346.607 li
296.207 346.098 li
295.47 345.694 li
294.747 345.747 li
294.449 346.197 li
295.597 347.104 li
295.938 347.781 li
295.666 348.605 li
295.034 349.022 li
294.325 348.949 li
293.802 348.306 li
293.679 349.073 li
293.355 349.313 li
292.93 349.386 li
292.45 349.65 li
292.036 350.113 li
291.774 350.53 li
291.371 351.7 li
290.125 351.793 li
288.854 353.256 li
288.297 355.063 li
289.235 356.171 li
289.235 355.026 li
290.521 355.836 li
290.761 356.171 li
290.634 356.448 li
290.303 356.778 li
290.053 357.175 li
290.15 357.646 li
290.67 357.777 li
292.548 357.619 li
293.061 357.443 li
297.312 355.123 li
297.493 354.256 li
297.493 353.916 li
297.846 354.137 li
298.609 354.859 li
298.685 355.026 li
299.128 354.727 li
299.484 354.154 li
300.364 352.269 li
300.604 351.463 li
300.724 350.63 li
300.654 349.885 li
299.328 347.732 li
cp
310.428 367.715 mo
310.173 367.643 li
309.672 367.634 li
309.301 367.748 li
309.04 367.715 li
308.157 367.15 li
307.478 367.15 li
306.686 367.704 li
306.293 368.505 li
306.326 369.322 li
306.802 369.954 li
307.656 369.991 li
308.328 369.585 li
308.771 369.184 li
309.269 368.846 li
309.421 368.556 li
309.661 368.321 li
310.079 368.31 li
310.486 368.534 li
310.653 368.6 li
310.733 368.389 li
310.893 368.415 li
311.078 368.584 li
311.187 368.345 li
310.816 367.88 li
310.428 367.715 li
cp
324.285 366.146 mo
323.834 365.501 li
323.072 365.306 li
322.436 365.62 li
322.12 365.923 li
321.945 366.331 li
321.873 366.846 li
321.597 367.405 li
321.778 368.235 li
321.945 368.334 li
322.098 368.064 li
322.392 368.029 li
322.795 368.394 li
323.286 368.647 li
323.951 368.591 li
324.474 368.308 li
324.757 367.805 li
324.867 367.515 li
324.983 366.839 li
324.714 366.536 li
324.285 366.146 li
cp
288.341 344.933 mo
288.258 344.657 li
288.156 344.556 li
288.123 344.083 li
287.575 343.774 li
287.251 343.437 li
286.706 342.997 li
286.368 343.251 li
286.652 344.163 li
287.099 344.88 li
287.316 345.423 li
287.095 345.952 li
286.586 346.343 li
285.939 346.363 li
285.322 346.458 li
285.082 346.744 li
286.074 346.965 li
286.118 347.15 li
285.853 347.354 li
285.627 347.58 li
285.354 347.594 li
285.097 347.684 li
285.256 347.962 li
285.772 348.111 li
286.259 348.037 li
287.139 347.514 li
287.513 347.159 li
287.873 346.893 li
288.123 346.621 li
288.163 346.098 li
288.301 345.496 li
288.341 344.933 li
cp
326.834 314.444 mo
324.079 314.004 li
321.647 312.544 li
320.425 309.855 li
321.389 308.942 li
322.99 309.368 li
324.162 309.101 li
325.385 308.733 li
327.688 309.599 li
328.592 312.098 li
326.834 314.444 li
cp
364.158 324.725 mo
364.163 323.712 li
363.563 322.233 li
360.781 319.2 li
360.301 318.194 li
359.914 317.041 li
358.917 315.994 li
357.818 315.193 li
357.214 314.107 li
357.025 311.204 li
356.577 309.805 li
355.659 308.721 li
355.899 307.528 li
353.352 305.473 li
350.496 304.438 li
348.876 305.342 li
347.575 306.744 li
346.177 306.939 li
344.696 306.951 li
343.076 307.168 li
341.434 307.139 li
340.672 306.693 li
339.994 306.169 li
339.209 306.37 li
338.282 306.357 li
336.935 306.58 li
335.652 307.349 li
333.991 307.102 li
332.916 305.956 li
332.976 304.146 li
332.066 303.118 li
331.794 302.103 li
332.191 300.522 li
331.291 299.15 li
329.976 299.222 li
329.653 299.785 li
329.215 300.207 li
328.929 300.932 li
328.823 301.713 li
327.443 301.73 li
325.348 298.888 li
323.982 297.768 li
323.203 297.437 li
322.391 297.379 li
321.647 298.262 li
320.134 298.113 li
319.013 299.121 li
319.008 299.862 li
319.05 300.604 li
318.639 301.227 li
318.076 301.641 li
318.108 302.226 li
318.196 302.785 li
317.822 303.561 li
317.231 304.074 li
316.502 304.426 li
315.737 304.649 li
315.091 305.042 li
314.491 305.486 li
312.996 305.71 li
311.579 306.225 li
310.25 306.558 li
309.138 306.184 li
309.203 304.7 li
309.489 303.227 li
309.747 301.224 li
308.46 300.877 li
304.123 302.089 li
303.2 302.387 li
303.192 302.389 li
304.048 303.363 li
304.157 303.764 li
303.757 303.79 li
302.969 303.55 li
302.314 302.699 li
302.053 302.428 li
301.072 303.927 li
300.684 304.769 li
300.531 305.621 li
300.607 305.999 li
300.749 306.345 li
300.821 306.703 li
300.669 307.117 li
300.378 307.433 li
300.091 307.655 li
299.83 307.944 li
299.612 308.438 li
299.96 308.507 li
300.124 308.616 li
300.266 308.741 li
300.531 308.844 li
299.721 309.041 li
298.794 309.093 li
297.977 309.281 li
297.479 309.897 li
298.75 309.882 li
299.343 309.786 li
299.917 309.56 li
299.83 310.315 li
300.059 310.749 li
300.531 311.083 li
300.433 311.588 li
300.222 311.883 li
300.015 312.107 li
299.917 312.374 li
300.254 313.163 li
301.719 314.877 li
302.177 316.103 li
302.471 316.402 li
302.827 316.603 li
303.667 316.813 li
303.884 317.162 li
303.906 318.135 li
303.79 319 li
302.664 321.554 li
302.188 321.063 li
301.868 320.507 li
301.795 319.908 li
302.053 319.286 li
301.715 319.094 li
300.963 319.066 li
300.531 318.914 li
299.997 318.594 li
299.833 318.417 li
299.79 318.107 li
299.612 317.389 li
299.474 317.295 li
299.267 317.373 li
299.088 317.373 li
299.001 317.049 li
299.056 316.733 li
299.255 316.223 li
299.375 315.214 li
299.317 314.69 li
299.001 314.068 li
298.642 315.316 li
298.325 315.943 li
297.759 316.307 li
297.402 315.443 li
296.592 315.027 li
295.68 315.15 li
295.037 315.898 li
295.197 316.805 li
296.345 318.332 li
295.927 318.914 li
296.56 319.744 li
297.192 319.722 li
297.5 319.021 li
297.148 317.795 li
298.002 318.088 li
298.787 318.808 li
300.059 320.571 li
300.389 321.714 li
299.143 322.953 li
299.277 324.124 li
298.162 323.887 li
297.661 323.86 li
297.148 324.124 li
297.366 324.616 li
297.643 325.022 li
297.977 325.361 li
298.369 325.643 li
298.184 325.723 li
297.759 326.015 li
298.318 326.385 li
299.099 326.64 li
299.906 326.585 li
300.531 326.015 li
300.516 325.505 li
300.298 324.88 li
300.233 324.349 li
300.669 324.124 li
301.007 324.002 li
301.247 323.731 li
301.544 323.473 li
302.053 323.38 li
303.168 323.646 li
302.907 324.124 li
302.064 324.703 li
301.443 325.274 li
301.355 326.17 li
301.621 327.236 li
302.108 328.146 li
302.664 328.585 li
302.086 329.094 li
301.933 329.495 li
302.053 330.308 li
302.035 330.73 li
301.958 331.101 li
301.773 331.494 li
301.443 331.994 li
300.531 332.906 li
300.211 333.446 li
300.364 334.023 li
300.833 334.262 li
301.795 333.943 li
302.407 333.954 li
302.482 333.393 li
302.86 333.214 li
304.048 333.479 li
304.637 333.295 li
305.029 332.95 li
305.436 332.769 li
306.042 333.078 li
305.857 333.366 li
305.617 333.933 li
305.436 334.223 li
305.715 334.435 li
305.715 334.561 li
306.602 334.481 li
307.067 333.849 li
307.568 331.994 li
308.103 330.923 li
308.179 330.85 li
308.113 330.358 li
307.819 329.442 li
307.874 328.99 li
308.364 328.313 li
309.029 328 li
309.643 328.187 li
310.003 328.99 li
309.988 329.555 li
309.792 329.887 li
309.556 330.152 li
309.393 330.512 li
309.393 331.078 li
309.509 331.45 li
309.567 331.809 li
309.393 332.335 li
311.71 332.127 li
312.724 332.313 li
313.389 333.078 li
312.924 333.055 li
312.553 333.132 li
311.863 333.479 li
312.179 334.169 li
311.133 334.092 li
309.087 333.479 li
307.994 333.751 li
307.459 334.45 li
307.372 335.405 li
307.568 336.451 li
307.361 336.372 li
307.242 336.276 li
307.132 336.166 li
306.958 336.047 li
306.271 336.18 li
304.23 334.674 li
302.533 335.433 li
301.202 335.225 li
300.577 335.481 li
299.938 336.282 li
300.074 336.798 li
301.106 337.139 li
302.231 336.834 li
303.142 337.426 li
304.462 337.34 li
305.574 337.563 li
306.384 337.948 li
307.845 339.821 li
308.811 340.528 li
308.484 340.933 li
309.825 342.112 li
310.588 342.596 li
311.529 342.755 li
310.595 342.994 li
309.308 342.583 li
308.243 342.001 li
307.418 341.525 li
306.862 341.646 li
307.797 342.883 li
307.604 343.122 li
307.131 342.812 li
306.509 342.363 li
306.025 341.894 li
305.224 341.576 li
304.642 341.196 li
304.371 340.829 li
303.906 340.528 li
303.801 340.201 li
303.819 339.992 li
303.808 339.773 li
303.926 339.067 li
303.683 338.633 li
301.812 338.224 li
300.59 338.345 li
300.847 339.294 li
300.508 340.066 li
300.646 341.422 li
300.926 342.436 li
301.389 342.394 li
301.674 341.626 li
302.264 341.518 li
302.106 342.765 li
302.674 343.334 li
303.107 344.011 li
304.026 344.211 li
304.291 344.344 li
304.792 344.269 li
304.429 345.211 li
303.917 345.258 li
302.969 344.602 li
300.756 344.231 li
300.2 343.898 li
299.277 341.304 li
299.132 340.707 li
299.056 340.153 li
299.187 339.609 li
299.612 339.049 li
298.249 337.006 li
297.955 336.358 li
297.693 336.18 li
297.345 336.08 li
297.01 336.047 li
296.647 336.224 li
296.582 336.648 li
296.618 337.152 li
296.57 337.563 li
296.102 338.772 li
295.713 340.511 li
295.79 342.074 li
296.716 342.755 li
297.911 343.342 li
298.097 343.898 li
297.773 344.158 li
297.326 344.151 li
297.148 343.898 li
296.974 344.198 li
296.792 344.271 li
296.716 344.428 li
296.868 344.973 li
296.985 345.028 li
297.911 345.915 li
298.195 346.025 li
298.554 345.952 li
298.871 345.77 li
299.001 345.562 li
299.136 345.213 li
299.405 345.476 li
299.626 345.913 li
299.612 346.085 li
300.672 346.607 li
301.054 347.106 li
301.138 347.966 li
301.795 347.706 li
302.318 347.613 li
303.274 347.596 li
303.71 347.671 li
304.091 347.684 li
304.487 347.596 li
304.64 347.106 li
304.825 346.735 li
305.098 346.488 li
305.399 346.497 li
305.977 346.854 li
306.348 346.859 li
306.631 346.667 li
307.034 346.164 li
307.234 346.085 li
307.779 346.387 li
307.765 346.895 li
307.329 347.473 li
306.624 347.966 li
307.045 348.111 li
307.394 348.337 li
307.67 348.659 li
307.874 349.077 li
306.762 349.104 li
305.574 349.333 li
304.684 349.99 li
304.487 351.297 li
305.203 351.06 li
305.283 351.416 li
305.116 352.084 li
305.098 352.777 li
304.996 352.854 li
304.865 353.121 li
304.931 353.414 li
305.41 353.547 li
306.075 353.626 li
306.402 353.74 li
306.624 353.916 li
306.794 354.469 li
306.675 355.021 li
306.042 356.171 li
305.85 356.303 li
305.65 356.237 li
305.498 356.266 li
305.41 357.117 li
305.334 357.333 li
305.098 357.646 li
305.098 357.982 li
306.264 357.923 li
306.827 358.035 li
307.234 358.385 li
307.318 358.999 li
306.896 360.299 li
306.958 360.937 li
307.474 361.042 li
309.53 360.364 li
310.621 360.598 li
310.621 359.973 li
310.711 359.449 li
311.797 355.797 li
311.976 355.446 li
312.474 355.026 li
313.796 354.691 li
314.145 354.456 li
314.374 353.921 li
314.381 353.518 li
314.501 353.269 li
315.089 353.181 li
315.307 353.24 li
315.722 353.491 li
315.994 353.547 li
316.139 353.428 li
316.19 353.163 li
316.146 352.898 li
315.994 352.777 li
315.329 352.514 li
315.972 351.921 li
317.684 350.927 li
316.685 349.655 li
316.506 348.994 li
317.883 348.533 li
317.869 348.076 li
317.585 347.424 li
317.404 346.674 li
317.553 346.157 li
317.927 345.57 li
318.414 345.111 li
318.897 344.973 li
319.406 345.354 li
319.7 346.085 li
319.754 346.919 li
319.507 347.596 li
319.678 348.659 li
319.493 351.403 li
319.842 352.44 li
320.234 352.679 li
321.949 353.181 li
323.199 354.073 li
323.776 354.256 li
323.526 353.623 li
323.504 353.042 li
323.689 352.511 li
324.082 352.037 li
325.27 352.632 li
325.688 352.26 li
325.607 350.021 li
328.071 347.596 li
327.737 346.89 li
327.944 346.312 li
328.358 345.827 li
328.652 345.381 li
328.736 344.748 li
328.714 344.149 li
328.791 343.701 li
329.128 343.527 li
329.673 343.384 li
330.24 343.053 li
331.123 342.379 li
332.758 341.423 li
333.118 341.118 li
333.924 340.052 li
334.415 339.601 li
334.941 339.415 li
336.061 339.647 li
336.605 339.676 li
337.249 339.415 li
337.874 338.65 li
338.775 336.332 li
339.407 335.337 li
340.508 337.117 li
341.314 337.791 li
342.288 337.378 li
343.135 336.717 li
343.451 337.154 li
343.69 338.122 li
344.312 339.049 li
343.963 339.614 li
343.353 340.926 li
343.062 341.304 li
342.372 341.563 li
341.859 341.395 li
341.478 340.899 li
341.209 340.19 li
341.445 339.674 li
341.369 339.249 li
341.063 338.918 li
340.599 338.673 li
339.313 340.098 li
339.073 340.528 li
339.112 341.351 li
339.378 341.77 li
339.723 342.128 li
339.984 342.755 li
339.999 344.357 li
339.345 345.262 li
338.251 345.661 li
336.943 345.747 li
337.598 344.163 li
337.815 343.284 li
337.859 342.379 li
337.208 342.697 li
336.889 343.099 li
336.333 344.269 li
335.432 345.463 li
335.112 345.747 li
334.121 346.336 li
333.837 346.8 li
333.892 347.596 li
334.306 348.374 li
334.905 348.689 li
335.606 348.826 li
336.333 349.077 li
336.206 348.861 li
336.028 348.306 li
337.797 347.38 li
338.31 347.263 li
339.984 349.077 li
340.613 350.371 li
342.437 352.784 li
343.672 352.777 li
343.102 352.156 li
342.967 351.212 li
344.253 350.235 li
345.072 350.61 li
345.824 349.541 li
347.941 347.596 li
347.013 346.804 li
345.316 347.247 li
344.938 346.996 li
344.312 346.859 li
343.778 345.734 li
343.672 345.562 li
343.93 345.147 li
344.541 344.71 li
345.26 344.379 li
345.838 344.269 li
346.492 344.48 li
348.522 345.747 li
349.075 345.608 li
349.947 345.65 li
350.407 345.259 li
350.815 344.85 li
350.689 343.72 li
350.441 343.119 li
348.522 342.379 li
348.857 342.304 li
349.642 342.309 li
350.1 342.379 li
349.144 341.006 li
347.749 340.109 li
346.459 338.951 li
345.838 336.79 li
345.961 336.644 li
346.201 336.582 li
346.295 336.392 li
345.979 335.874 li
345.533 335.682 li
344.693 336.021 li
344.312 335.708 li
344.475 334.968 li
345.435 334.428 li
347.331 333.822 li
347.331 333.479 li
346.383 333.2 li
345.231 332.696 li
344.642 332.211 li
345.369 331.994 li
347.298 332.043 li
348.185 331.933 li
349.707 331.395 li
349.936 331.368 li
350.088 331.262 li
350.383 330.85 li
351.146 328.91 li
351.298 328.789 li
351.396 328.563 li
351.604 328.632 li
351.811 328.87 li
351.909 329.176 li
351.865 329.455 li
351.669 329.986 li
351.629 330.308 li
351.746 330.839 li
352.421 332.265 li
352.291 332.473 li
352.214 332.8 li
352.236 333.078 li
352.454 333.313 li
352.715 333.353 li
352.966 333.359 li
353.151 333.479 li
353.86 335.012 li
354.22 335.522 li
354.427 336.44 li
354.005 337.51 li
353.424 338.642 li
353.151 339.791 li
353.37 341.006 li
353.882 341.808 li
354.678 342.247 li
355.746 342.379 li
356.476 343.147 li
356.938 343.403 li
357.141 342.953 li
356.814 340.528 li
356.552 339.765 li
356.204 339.049 li
356.425 338.991 li
356.487 338.892 li
356.552 338.876 li
356.814 339.049 li
357.631 337.254 li
358.627 337.466 li
359.87 338.089 li
361.439 337.563 li
361.81 336.936 li
362.322 334.223 li
362.765 332.685 li
362.91 331.924 li
362.961 330.85 li
362.122 331.299 li
361.359 331.251 li
360.542 331.091 li
359.583 331.22 li
358.198 332.521 li
357.642 332.87 li
357.173 332.645 li
356.672 331.994 li
355.964 331.538 li
355.171 330.454 li
354.481 329.209 li
354.067 328.246 li
354.016 327.336 li
354.256 326.245 li
354.743 325.55 li
355.44 325.829 li
356.283 327.548 li
356.956 328.126 li
357.893 327.708 li
359.583 326.356 li
359.997 325.878 li
360.175 325.534 li
360.498 324.53 li
360.4 324.244 li
360.324 323.593 li
360.443 323.173 li
360.956 323.581 li
361.218 324.108 li
361.326 324.523 li
361.566 324.801 li
362.169 324.902 li
363.979 324.885 li
364.271 324.966 li
364.158 324.725 li
cp
351.099 351.423 mo
350.688 351.444 li
350.285 351.846 li
350.078 351.898 li
350.067 351.758 li
349.442 351.599 li
349.107 351.405 li
348.792 351.269 li
348.574 351.392 li
348.65 351.634 li
348.679 351.938 li
348.519 352.344 li
348.817 352.566 li
349.304 352.877 li
349.184 353.093 li
349.391 353.372 li
349.842 353.518 li
350.143 353.835 li
350.161 354.298 li
350.416 354.442 li
351.128 354.225 li
351.941 353.696 li
352.279 353.333 li
352.279 353.014 li
352.08 352.476 li
351.099 351.423 li
cp
363.288 349.422 mo
362.929 349.355 li
362.907 349.161 li
362.986 348.782 li
362.311 347.464 li
361.729 347.031 li
360.912 347.142 li
360.16 347.501 li
359.92 347.964 li
360.236 348.346 li
360.604 348.544 li
360.821 348.879 li
361.021 349.34 li
361.457 349.677 li
362.107 349.896 li
362.521 350.127 li
362.667 350.345 li
362.762 350.439 li
363.125 350.425 li
363.681 350.232 li
363.778 349.896 li
363.583 349.585 li
363.288 349.422 li
cp
332.42 358.193 mo
332.147 357.844 li
331.995 357.598 li
331.788 357.415 li
331.341 357.465 li
330.73 357.659 li
330.382 357.505 li
330.214 357.017 li
329.924 356.58 li
329.608 356.272 li
329.466 356.224 li
329.502 356.364 li
329.059 356.734 li
328.645 357.236 li
328.387 357.412 li
328.057 357.479 li
327.951 357.58 li
328.078 357.665 li
328.369 357.765 li
329.117 357.835 li
329.416 358.016 li
329.521 358.288 li
329.39 358.504 li
330.367 358.706 li
330.527 358.922 li
330.244 359.111 li
330.022 359.447 li
330.065 359.925 li
330.523 359.718 li
331.312 359.098 li
331.635 358.774 li
331.363 358.618 li
331.247 358.471 li
331.566 358.346 li
332.009 358.444 li
332.387 358.636 li
332.66 358.578 li
332.573 358.325 li
332.42 358.193 li
cp
338.179 350.572 mo
337.452 350.517 li
336.057 350.683 li
334.596 350.953 li
333.884 351.244 li
333.267 351.7 li
333.685 351.982 li
333.859 352.225 li
333.815 352.476 li
333.572 352.777 li
333.572 353.181 li
334.64 353.898 li
335.163 354.154 li
335.875 354.256 li
337.717 353.916 li
338.542 353.577 li
339.131 352.753 li
339.276 351.747 li
338.789 350.867 li
338.179 350.572 li
cp
342.394 375.956 mo
342.132 375.724 li
341.565 374.781 li
341.489 374.225 li
341.641 373.725 li
341.532 373.494 li
341.467 373.515 li
341.347 373.654 li
341.14 373.721 li
340.976 373.666 li
340.834 373.712 li
340.802 373.936 li
340.824 374.186 li
340.758 374.402 li
340.867 374.771 li
341.005 374.941 li
341.172 375.06 li
341.271 375.51 li
341.423 375.878 li
341.532 376.046 li
342.143 376.188 li
342.775 376.495 li
342.83 376.23 li
342.713 376.046 li
342.394 375.956 li
cp
294.688 327.193 mo
294.855 327.052 li
295.001 326.489 li
294.99 326.255 li
294.729 326.148 li
293.965 326.148 li
293.617 326.339 li
293.526 326.857 li
293.748 327.349 li
294.292 327.366 li
294.688 327.193 li
cp
287.858 336.547 mo
288.265 337.294 li
288.341 337.758 li
288.657 337.99 li
288.992 337.961 li
289.148 337.886 li
289.388 337.672 li
289.867 337.678 li
290.281 338.281 li
290.805 338.801 li
291.371 338.746 li
291.629 338.227 li
291.611 337.646 li
291.458 337.17 li
291.415 336.81 li
291.448 336.538 li
291.288 336.239 li
290.99 335.967 li
290.554 335.861 li
290.023 335.826 li
289.631 335.627 li
289.366 335.337 li
288.948 335.151 li
288.385 335.064 li
287.909 335.113 li
287.578 335.284 li
287.226 335.281 li
286.793 335.167 li
286.979 335.618 li
287.858 336.547 li
cp
291.219 333.937 mo
291.11 333.711 li
290.787 333.269 li
290.357 333.078 li
290.02 333.357 li
289.37 333.641 li
288.258 333.824 li
287.818 334.193 li
288.367 334.517 li
289.115 334.795 li
289.696 335.295 li
290.216 335.591 li
290.75 335.45 li
291.019 335.162 li
290.924 334.428 li
291.077 334.078 li
291.219 333.937 li
cp
296.752 329.13 mo
296.193 329.303 li
296.149 329.532 li
296.004 329.684 li
295.844 329.887 li
294.936 330.219 li
294.227 330.266 li
293.987 330.551 li
294.26 330.905 li
294.79 331.087 li
295.452 330.98 li
296.037 330.692 li
297.355 330.479 li
297.541 330.578 li
298.787 331.264 li
298.903 331.48 li
298.761 331.793 li
298.478 332.113 li
298.958 332.295 li
299.833 331.485 li
299.742 330.332 li
298.896 330.033 li
298.264 330.026 li
297.977 329.936 li
297.915 329.681 li
297.889 329.36 li
297.973 329.107 li
298.652 328.655 li
299.041 328.604 li
299.099 328.283 li
298.533 327.712 li
297.737 327.309 li
296.963 327.123 li
296.476 327.375 li
296.625 327.914 li
296.974 328.393 li
296.952 328.791 li
296.752 329.13 li
cp
287.647 360.193 mo
287.349 360.041 li
286.706 360.141 li
285.169 359.817 li
284.835 360.039 li
284.813 360.306 li
284.625 360.563 li
284.653 360.857 li
284.966 361.306 li
285.889 361.69 li
286.172 361.648 li
286.249 361.381 li
286.401 361.374 li
286.586 361.664 li
286.783 361.757 li
287.033 361.548 li
287.466 361.492 li
287.676 361.183 li
287.604 360.793 li
287.647 360.193 li
cp
288.297 330.626 mo
287.873 330.385 li
287.338 330.44 li
286.685 330.771 li
286.55 331.202 li
286.859 331.769 li
287.233 332.286 li
287.901 333.048 li
287.883 333.265 li
287.981 333.585 li
288.385 333.618 li
288.861 333.349 li
289.006 332.831 li
288.995 332.225 li
289.275 331.906 li
289.714 331.926 li
290.031 331.729 li
290.14 331.215 li
289.922 330.369 li
290.521 329.984 li
290.474 329.647 li
290.26 329.338 li
290.038 329.214 li
289.754 329.242 li
289.169 329.231 li
288.745 329.647 li
288.832 330.285 li
288.712 330.613 li
288.297 330.626 li
cp
291.808 320.512 mo
291.764 320.231 li
291.651 319.988 li
291.462 319.732 li
291.066 319.619 li
290.496 319.666 li
290.107 319.486 li
289.82 319.53 li
289.475 319.759 li
289.391 320.006 li
289.584 320.063 li
289.784 320.027 li
289.911 320.099 li
289.587 320.345 li
289.649 320.465 li
289.871 320.458 li
290.042 320.545 li
290.107 320.782 li
290.321 320.805 li
290.561 320.685 li
290.743 320.809 li
291.143 321.252 li
291.382 321.344 li
291.607 321.217 li
291.796 321.044 li
291.808 320.512 li
cp
290.772 317.493 mo
291.251 318.614 li
291.491 318.909 li
291.746 319.038 li
291.938 319.213 li
292.131 319.253 li
292.523 319.291 li
292.777 319.513 li
293.922 319.706 li
294.227 319.799 li
294.144 320.065 li
294.136 320.543 li
294.314 320.864 li
294.532 321.144 li
295.052 321.264 li
295.168 321.435 li
295.342 321.292 li
295.517 320.765 li
295.437 320.348 li
295.212 320.041 li
295.077 319.558 li
294.812 319.18 li
294.347 319.148 li
293.933 318.96 li
293.442 318.454 li
293.442 318.163 li
293.617 317.961 li
294.027 317.935 li
294.336 317.622 li
294.224 317.267 li
293.947 317.347 li
293.729 317.355 li
293.635 317.115 li
293.359 316.978 li
292.93 317.204 li
292.552 317.335 li
292.134 317.056 li
291.611 316.862 li
291.044 317.054 li
290.772 317.493 li
cp
283.883 334.216 mo
283.72 334.057 li
283.505 334.021 li
283.208 334.061 li
281.747 334.62 li
280.947 334.795 li
280.341 334.561 li
279.796 334.773 li
279.305 335.092 li
278.949 335.569 li
278.814 336.246 li
278.891 336.962 li
279.124 337.539 li
279.509 337.903 li
280.032 337.966 li
280.563 337.725 li
280.951 337.245 li
281.191 336.604 li
281.282 335.874 li
281.529 335.732 li
282.088 335.853 li
282.699 335.848 li
283.084 335.337 li
283.309 335.47 li
283.818 335.613 li
284.025 335.708 li
284.007 334.554 li
283.883 334.216 li
cp
283.73 338.713 mo
283.196 338.229 li
282.815 337.528 li
282.648 337.417 li
282.372 337.559 li
281.562 338.673 li
280.243 339.203 li
279.938 339.623 li
280.341 340.528 li
280.537 340.456 li
281.238 340.754 li
281.885 341.134 li
281.889 341.304 li
282.346 341.346 li
282.655 341.319 li
282.967 341.09 li
283.644 340.178 li
283.829 339.779 li
283.927 339.354 li
283.869 338.938 li
283.73 338.713 li
cp
285.387 346.034 mo
285.856 346.003 li
286.259 345.866 li
286.383 345.23 li
286.009 344.47 li
285.533 343.774 li
284.962 342.522 li
284.588 343 li
284.428 344.046 li
284.603 345.928 li
284.962 346.23 li
285.387 346.034 li
cp
244.491 372.29 mo
244.099 371.804 li
243.604 371.637 li
243.263 371.953 li
243.045 372.521 li
243.154 372.939 li
243.652 373.247 li
244.524 374.049 li
244.742 374.189 li
244.84 374.244 li
245.036 374.281 li
245.174 374.04 li
245.131 373.613 li
244.491 372.29 li
cp
258.944 339.579 mo
258.563 339.588 li
258.414 339.194 li
258.214 339.037 li
257.847 339.11 li
257.473 339.389 li
257.149 339.899 li
256.852 340.482 li
256.604 341.143 li
256.557 341.867 li
256.844 342.645 li
257.28 342.827 li
257.462 342.627 li
257.691 342.311 li
257.985 341.818 li
258.123 341.437 li
258.828 340.612 li
258.944 340.304 li
259.151 340.056 li
259.544 339.667 li
259.457 339.446 li
258.944 339.579 li
cp
285.089 329.768 mo
285.467 329.904 li
285.758 330.157 li
286.128 330.299 li
286.771 330.106 li
287.291 329.656 li
287.633 329.006 li
287.771 328.246 li
287.666 327.462 li
287.313 326.849 li
286.815 326.505 li
286.379 326.613 li
286.187 327.336 li
286.02 327.668 li
285.649 327.675 li
285.224 327.557 li
284.937 327.539 li
284.326 328.098 li
283.523 329.382 li
283.084 329.768 li
283.084 330.106 li
283.632 330.095 li
285.089 329.768 li
cp
286.499 319.413 mo
286.608 319.533 li
286.771 319.655 li
287.197 319.586 li
288.385 319.903 li
288.625 319.841 li
288.788 319.397 li
289.169 318.825 li
289.671 318.334 li
290.15 318.135 li
289.551 317.164 li
289.355 316.603 li
289.391 316.057 li
289.704 315.597 li
291.063 314.804 li
290.379 314.619 li
289.464 314.837 li
288.657 315.361 li
288.319 316.103 li
288.102 316.454 li
287.611 316.693 li
287.081 316.871 li
286.771 317.049 li
286.535 317.555 li
286.187 319.286 li
286.383 319.319 li
286.499 319.413 li
cp
.49427 .41117 .412055 .0505074 cmyk
f
317.792 360.123 mo
316.975 359.313 li
316.837 358.852 li
316.593 358.521 li
316.452 358.125 li
316.328 357.27 li
315.914 356.226 li
315.384 355.599 li
314.904 355.272 li
314.392 355.104 li
313.607 355.183 li
313.349 355.242 li
312.87 355.474 li
312.517 355.995 li
312.339 356.677 li
312.303 357.359 li
312.346 358.028 li
312.477 358.616 li
312.79 359.012 li
313.313 359.355 li
313.894 359.516 li
314.359 359.395 li
314.744 359.498 li
314.853 359.896 li
314.439 360.213 li
314.446 360.563 li
315.286 360.857 li
315.961 361.016 li
316.354 361.196 li
316.568 361.07 li
316.612 360.754 li
316.801 360.717 li
317.142 360.938 li
317.542 361.112 li
317.76 361.174 li
317.978 361.205 li
318.13 361.06 li
317.88 360.457 li
317.792 360.123 li
cp
321.197 353.479 mo
320.986 353.154 li
320.43 353.058 li
319.504 353.277 li
318.621 353.767 li
317.992 354.599 li
317.684 355.281 li
317.477 355.599 li
317.313 355.92 li
317.509 356.12 li
317.727 356.136 li
317.941 356.294 li
318.036 356.766 li
318.029 357.324 li
318.319 357.663 li
318.559 357.494 li
318.69 356.913 li
319.104 356.355 li
320.281 355.806 li
320.506 355.474 li
320.888 355.379 li
321.804 355.66 li
322.13 355.605 li
322.091 355.275 li
321.793 354.841 li
321.451 354.458 li
321.037 354.205 li
321 354.075 li
321.233 353.835 li
321.197 353.479 li
cp
313.69 368.545 mo
313.236 367.873 li
313.313 367.463 li
313.738 367.096 li
313.632 366.568 li
312.876 366.18 li
312.495 366.176 li
312.474 366.36 li
312.103 366.716 li
312.19 366.964 li
312.484 367.238 li
312.386 367.933 li
312.103 369.177 li
312.201 369.901 li
312.43 369.952 li
312.644 370.123 li
312.724 370.373 li
312.953 370.509 li
313.393 370.389 li
313.618 369.965 li
313.618 369.421 li
313.683 369.101 li
313.879 369.069 li
314.021 368.907 li
313.869 368.644 li
313.69 368.545 li
cp
311.017 365.042 mo
310.784 364.868 li
310.304 364.618 li
309.374 364.46 li
309.029 364.273 li
308.677 364.159 li
308.528 364.288 li
308.756 364.664 li
308.786 364.818 li
308.68 364.935 li
308.517 365.016 li
308.48 365.135 li
308.567 365.264 li
308.549 365.429 li
308.418 365.67 li
308.19 366.316 li
308.233 366.496 li
308.444 366.54 li
308.633 366.608 li
308.72 366.825 li
309.073 367.155 li
309.752 367.34 li
309.977 367.15 li
309.759 366.764 li
310.119 366.689 li
310.77 366.654 li
310.926 366.039 li
311.234 365.778 li
311.198 365.306 li
311.017 365.042 li
cp
321.807 360.16 mo
322.033 359.962 li
322.447 359.885 li
322.832 359.96 li
323.112 359.652 li
323.155 359.275 li
323.224 359.091 li
323.482 358.787 li
323.569 358.392 li
323.177 358.16 li
322.545 358.007 li
322.047 357.954 li
321.858 357.989 li
321.669 358.002 li
321.346 357.916 li
321.084 357.716 li
320.63 357.83 li
320.027 358.323 li
319.533 358.53 li
319.126 358.339 li
318.773 358.284 li
318.61 358.363 li
318.414 358.478 li
317.967 358.609 li
317.509 358.669 li
317.571 358.852 li
318.559 359.289 li
318.73 359.401 li
318.9 359.489 li
319.33 359.493 li
319.863 359.305 li
320.321 359.236 li
320.667 359.384 li
320.906 359.711 li
320.997 360.127 li
321.215 360.439 li
321.618 360.355 li
321.807 360.16 li
cp
299.328 347.732 mo
299.288 347.263 li
298.278 347.9 li
298.075 347.966 li
297.777 347.726 li
297.563 347.354 li
297.432 347.012 li
297.323 346.859 li
296.847 346.607 li
296.207 346.098 li
295.47 345.694 li
294.747 345.747 li
294.449 346.197 li
295.597 347.104 li
295.938 347.781 li
295.666 348.605 li
295.034 349.022 li
294.325 348.949 li
293.802 348.306 li
293.679 349.073 li
293.355 349.313 li
292.93 349.386 li
292.45 349.65 li
292.036 350.113 li
291.774 350.53 li
291.371 351.7 li
290.125 351.793 li
288.854 353.256 li
288.297 355.063 li
289.235 356.171 li
289.235 355.026 li
290.521 355.836 li
290.761 356.171 li
290.634 356.448 li
290.303 356.778 li
290.053 357.175 li
290.15 357.646 li
290.67 357.777 li
292.548 357.619 li
293.061 357.443 li
297.312 355.123 li
297.493 354.256 li
297.493 353.916 li
297.846 354.137 li
298.609 354.859 li
298.685 355.026 li
299.128 354.727 li
299.484 354.154 li
300.364 352.269 li
300.604 351.463 li
300.724 350.63 li
300.654 349.885 li
299.328 347.732 li
cp
310.428 367.715 mo
310.173 367.643 li
309.672 367.634 li
309.301 367.748 li
309.04 367.715 li
308.157 367.15 li
307.478 367.15 li
306.686 367.704 li
306.293 368.505 li
306.326 369.322 li
306.802 369.954 li
307.656 369.991 li
308.328 369.585 li
308.771 369.184 li
309.269 368.846 li
309.421 368.556 li
309.661 368.321 li
310.079 368.31 li
310.486 368.534 li
310.653 368.6 li
310.733 368.389 li
310.893 368.415 li
311.078 368.584 li
311.187 368.345 li
310.816 367.88 li
310.428 367.715 li
cp
324.285 366.146 mo
323.834 365.501 li
323.072 365.306 li
322.436 365.62 li
322.12 365.923 li
321.945 366.331 li
321.873 366.846 li
321.597 367.405 li
321.778 368.235 li
321.945 368.334 li
322.098 368.064 li
322.392 368.029 li
322.795 368.394 li
323.286 368.647 li
323.951 368.591 li
324.474 368.308 li
324.757 367.805 li
324.867 367.515 li
324.983 366.839 li
324.714 366.536 li
324.285 366.146 li
cp
288.341 344.933 mo
288.258 344.657 li
288.156 344.556 li
288.123 344.083 li
287.575 343.774 li
287.251 343.437 li
286.706 342.997 li
286.368 343.251 li
286.652 344.163 li
287.099 344.88 li
287.316 345.423 li
287.095 345.952 li
286.586 346.343 li
285.939 346.363 li
285.322 346.458 li
285.082 346.744 li
286.074 346.965 li
286.118 347.15 li
285.853 347.354 li
285.627 347.58 li
285.354 347.594 li
285.097 347.684 li
285.256 347.962 li
285.772 348.111 li
286.259 348.037 li
287.139 347.514 li
287.513 347.159 li
287.873 346.893 li
288.123 346.621 li
288.163 346.098 li
288.301 345.496 li
288.341 344.933 li
cp
326.834 314.444 mo
324.079 314.004 li
321.647 312.544 li
320.425 309.855 li
321.389 308.942 li
322.99 309.368 li
324.162 309.101 li
325.385 308.733 li
327.688 309.599 li
328.592 312.098 li
326.834 314.444 li
cp
364.158 324.725 mo
364.163 323.712 li
363.563 322.233 li
360.781 319.2 li
360.301 318.194 li
359.914 317.041 li
358.917 315.994 li
357.818 315.193 li
357.214 314.107 li
357.025 311.204 li
356.577 309.805 li
355.659 308.721 li
355.899 307.528 li
353.352 305.473 li
350.496 304.438 li
348.876 305.342 li
347.575 306.744 li
346.177 306.939 li
344.696 306.951 li
343.076 307.168 li
341.434 307.139 li
340.672 306.693 li
339.994 306.169 li
339.209 306.37 li
338.282 306.357 li
336.935 306.58 li
335.652 307.349 li
333.991 307.102 li
332.916 305.956 li
332.976 304.146 li
332.066 303.118 li
331.794 302.103 li
332.191 300.522 li
331.291 299.15 li
329.976 299.222 li
329.653 299.785 li
329.215 300.207 li
328.929 300.932 li
328.823 301.713 li
327.443 301.73 li
325.348 298.888 li
323.982 297.768 li
323.203 297.437 li
322.391 297.379 li
321.647 298.262 li
320.134 298.113 li
319.013 299.121 li
319.008 299.862 li
319.05 300.604 li
318.639 301.227 li
318.076 301.641 li
318.108 302.226 li
318.196 302.785 li
317.822 303.561 li
317.231 304.074 li
316.502 304.426 li
315.737 304.649 li
315.091 305.042 li
314.491 305.486 li
312.996 305.71 li
311.579 306.225 li
310.25 306.558 li
309.138 306.184 li
309.203 304.7 li
309.489 303.227 li
309.747 301.224 li
308.46 300.877 li
304.123 302.089 li
303.2 302.387 li
303.192 302.389 li
304.048 303.363 li
304.157 303.764 li
303.757 303.79 li
302.969 303.55 li
302.314 302.699 li
302.053 302.428 li
301.072 303.927 li
300.684 304.769 li
300.531 305.621 li
300.607 305.999 li
300.749 306.345 li
300.821 306.703 li
300.669 307.117 li
300.378 307.433 li
300.091 307.655 li
299.83 307.944 li
299.612 308.438 li
299.96 308.507 li
300.124 308.616 li
300.266 308.741 li
300.531 308.844 li
299.721 309.041 li
298.794 309.093 li
297.977 309.281 li
297.479 309.897 li
298.75 309.882 li
299.343 309.786 li
299.917 309.56 li
299.83 310.315 li
300.059 310.749 li
300.531 311.083 li
300.433 311.588 li
300.222 311.883 li
300.015 312.107 li
299.917 312.374 li
300.254 313.163 li
301.719 314.877 li
302.177 316.103 li
302.471 316.402 li
302.827 316.603 li
303.667 316.813 li
303.884 317.162 li
303.906 318.135 li
303.79 319 li
302.664 321.554 li
302.188 321.063 li
301.868 320.507 li
301.795 319.908 li
302.053 319.286 li
301.715 319.094 li
300.963 319.066 li
300.531 318.914 li
299.997 318.594 li
299.833 318.417 li
299.79 318.107 li
299.612 317.389 li
299.474 317.295 li
299.267 317.373 li
299.088 317.373 li
299.001 317.049 li
299.056 316.733 li
299.255 316.223 li
299.375 315.214 li
299.317 314.69 li
299.001 314.068 li
298.642 315.316 li
298.325 315.943 li
297.759 316.307 li
297.402 315.443 li
296.592 315.027 li
295.68 315.15 li
295.037 315.898 li
295.197 316.805 li
296.345 318.332 li
295.927 318.914 li
296.56 319.744 li
297.192 319.722 li
297.5 319.021 li
297.148 317.795 li
298.002 318.088 li
298.787 318.808 li
300.059 320.571 li
300.389 321.714 li
299.143 322.953 li
299.277 324.124 li
298.162 323.887 li
297.661 323.86 li
297.148 324.124 li
297.366 324.616 li
297.643 325.022 li
297.977 325.361 li
298.369 325.643 li
298.184 325.723 li
297.759 326.015 li
298.318 326.385 li
299.099 326.64 li
299.906 326.585 li
300.531 326.015 li
300.516 325.505 li
300.298 324.88 li
300.233 324.349 li
300.669 324.124 li
301.007 324.002 li
301.247 323.731 li
301.544 323.473 li
302.053 323.38 li
303.168 323.646 li
302.907 324.124 li
302.064 324.703 li
301.443 325.274 li
301.355 326.17 li
301.621 327.236 li
302.108 328.146 li
302.664 328.585 li
302.086 329.094 li
301.933 329.495 li
302.053 330.308 li
302.035 330.73 li
301.958 331.101 li
301.773 331.494 li
301.443 331.994 li
300.531 332.906 li
300.211 333.446 li
300.364 334.023 li
300.833 334.262 li
301.795 333.943 li
302.407 333.954 li
302.482 333.393 li
302.86 333.214 li
304.048 333.479 li
304.637 333.295 li
305.029 332.95 li
305.436 332.769 li
306.042 333.078 li
305.857 333.366 li
305.617 333.933 li
305.436 334.223 li
305.715 334.435 li
305.715 334.561 li
306.602 334.481 li
307.067 333.849 li
307.568 331.994 li
308.103 330.923 li
308.179 330.85 li
308.113 330.358 li
307.819 329.442 li
307.874 328.99 li
308.364 328.313 li
309.029 328 li
309.643 328.187 li
310.003 328.99 li
309.988 329.555 li
309.792 329.887 li
309.556 330.152 li
309.393 330.512 li
309.393 331.078 li
309.509 331.45 li
309.567 331.809 li
309.393 332.335 li
311.71 332.127 li
312.724 332.313 li
313.389 333.078 li
312.924 333.055 li
312.553 333.132 li
311.863 333.479 li
312.179 334.169 li
311.133 334.092 li
309.087 333.479 li
307.994 333.751 li
307.459 334.45 li
307.372 335.405 li
307.568 336.451 li
307.361 336.372 li
307.242 336.276 li
307.132 336.166 li
306.958 336.047 li
306.271 336.18 li
304.23 334.674 li
302.533 335.433 li
301.202 335.225 li
300.577 335.481 li
299.938 336.282 li
300.074 336.798 li
301.106 337.139 li
302.231 336.834 li
303.142 337.426 li
304.462 337.34 li
305.574 337.563 li
306.384 337.948 li
307.845 339.821 li
308.811 340.528 li
308.484 340.933 li
309.825 342.112 li
310.588 342.596 li
311.529 342.755 li
310.595 342.994 li
309.308 342.583 li
308.243 342.001 li
307.418 341.525 li
306.862 341.646 li
307.797 342.883 li
307.604 343.122 li
307.131 342.812 li
306.509 342.363 li
306.025 341.894 li
305.224 341.576 li
304.642 341.196 li
304.371 340.829 li
303.906 340.528 li
303.801 340.201 li
303.819 339.992 li
303.808 339.773 li
303.926 339.067 li
303.683 338.633 li
301.812 338.224 li
300.59 338.345 li
300.847 339.294 li
300.508 340.066 li
300.646 341.422 li
300.926 342.436 li
301.389 342.394 li
301.674 341.626 li
302.264 341.518 li
302.106 342.765 li
302.674 343.334 li
303.107 344.011 li
304.026 344.211 li
304.291 344.344 li
304.792 344.269 li
304.429 345.211 li
303.917 345.258 li
302.969 344.602 li
300.756 344.231 li
300.2 343.898 li
299.277 341.304 li
299.132 340.707 li
299.056 340.153 li
299.187 339.609 li
299.612 339.049 li
298.249 337.006 li
297.955 336.358 li
297.693 336.18 li
297.345 336.08 li
297.01 336.047 li
296.647 336.224 li
296.582 336.648 li
296.618 337.152 li
296.57 337.563 li
296.102 338.772 li
295.713 340.511 li
295.79 342.074 li
296.716 342.755 li
297.911 343.342 li
298.097 343.898 li
297.773 344.158 li
297.326 344.151 li
297.148 343.898 li
296.974 344.198 li
296.792 344.271 li
296.716 344.428 li
296.868 344.973 li
296.985 345.028 li
297.911 345.915 li
298.195 346.025 li
298.554 345.952 li
298.871 345.77 li
299.001 345.562 li
299.136 345.213 li
299.405 345.476 li
299.626 345.913 li
299.612 346.085 li
300.672 346.607 li
301.054 347.106 li
301.138 347.966 li
301.795 347.706 li
302.318 347.613 li
303.274 347.596 li
303.71 347.671 li
304.091 347.684 li
304.487 347.596 li
304.64 347.106 li
304.825 346.735 li
305.098 346.488 li
305.399 346.497 li
305.977 346.854 li
306.348 346.859 li
306.631 346.667 li
307.034 346.164 li
307.234 346.085 li
307.779 346.387 li
307.765 346.895 li
307.329 347.473 li
306.624 347.966 li
307.045 348.111 li
307.394 348.337 li
307.67 348.659 li
307.874 349.077 li
306.762 349.104 li
305.574 349.333 li
304.684 349.99 li
304.487 351.297 li
305.203 351.06 li
305.283 351.416 li
305.116 352.084 li
305.098 352.777 li
304.996 352.854 li
304.865 353.121 li
304.931 353.414 li
305.41 353.547 li
306.075 353.626 li
306.402 353.74 li
306.624 353.916 li
306.794 354.469 li
306.675 355.021 li
306.042 356.171 li
305.85 356.303 li
305.65 356.237 li
305.498 356.266 li
305.41 357.117 li
305.334 357.333 li
305.098 357.646 li
305.098 357.982 li
306.264 357.923 li
306.827 358.035 li
307.234 358.385 li
307.318 358.999 li
306.896 360.299 li
306.958 360.937 li
307.474 361.042 li
309.53 360.364 li
310.621 360.598 li
310.621 359.973 li
310.711 359.449 li
311.797 355.797 li
311.976 355.446 li
312.474 355.026 li
313.796 354.691 li
314.145 354.456 li
314.374 353.921 li
314.381 353.518 li
314.501 353.269 li
315.089 353.181 li
315.307 353.24 li
315.722 353.491 li
315.994 353.547 li
316.139 353.428 li
316.19 353.163 li
316.146 352.898 li
315.994 352.777 li
315.329 352.514 li
315.972 351.921 li
317.684 350.927 li
316.685 349.655 li
316.506 348.994 li
317.883 348.533 li
317.869 348.076 li
317.585 347.424 li
317.404 346.674 li
317.553 346.157 li
317.927 345.57 li
318.414 345.111 li
318.897 344.973 li
319.406 345.354 li
319.7 346.085 li
319.754 346.919 li
319.507 347.596 li
319.678 348.659 li
319.493 351.403 li
319.842 352.44 li
320.234 352.679 li
321.949 353.181 li
323.199 354.073 li
323.776 354.256 li
323.526 353.623 li
323.504 353.042 li
323.689 352.511 li
324.082 352.037 li
325.27 352.632 li
325.688 352.26 li
325.607 350.021 li
328.071 347.596 li
327.737 346.89 li
327.944 346.312 li
328.358 345.827 li
328.652 345.381 li
328.736 344.748 li
328.714 344.149 li
328.791 343.701 li
329.128 343.527 li
329.673 343.384 li
330.24 343.053 li
331.123 342.379 li
332.758 341.423 li
333.118 341.118 li
333.924 340.052 li
334.415 339.601 li
334.941 339.415 li
336.061 339.647 li
336.605 339.676 li
337.249 339.415 li
337.874 338.65 li
338.775 336.332 li
339.407 335.337 li
340.508 337.117 li
341.314 337.791 li
342.288 337.378 li
343.135 336.717 li
343.451 337.154 li
343.69 338.122 li
344.312 339.049 li
343.963 339.614 li
343.353 340.926 li
343.062 341.304 li
342.372 341.563 li
341.859 341.395 li
341.478 340.899 li
341.209 340.19 li
341.445 339.674 li
341.369 339.249 li
341.063 338.918 li
340.599 338.673 li
339.313 340.098 li
339.073 340.528 li
339.112 341.351 li
339.378 341.77 li
339.723 342.128 li
339.984 342.755 li
339.999 344.357 li
339.345 345.262 li
338.251 345.661 li
336.943 345.747 li
337.598 344.163 li
337.815 343.284 li
337.859 342.379 li
337.208 342.697 li
336.889 343.099 li
336.333 344.269 li
335.432 345.463 li
335.112 345.747 li
334.121 346.336 li
333.837 346.8 li
333.892 347.596 li
334.306 348.374 li
334.905 348.689 li
335.606 348.826 li
336.333 349.077 li
336.206 348.861 li
336.028 348.306 li
337.797 347.38 li
338.31 347.263 li
339.984 349.077 li
340.613 350.371 li
342.437 352.784 li
343.672 352.777 li
343.102 352.156 li
342.967 351.212 li
344.253 350.235 li
345.072 350.61 li
345.824 349.541 li
347.941 347.596 li
347.013 346.804 li
345.316 347.247 li
344.938 346.996 li
344.312 346.859 li
343.778 345.734 li
343.672 345.562 li
343.93 345.147 li
344.541 344.71 li
345.26 344.379 li
345.838 344.269 li
346.492 344.48 li
348.522 345.747 li
349.075 345.608 li
349.947 345.65 li
350.407 345.259 li
350.815 344.85 li
350.689 343.72 li
350.441 343.119 li
348.522 342.379 li
348.857 342.304 li
349.642 342.309 li
350.1 342.379 li
349.144 341.006 li
347.749 340.109 li
346.459 338.951 li
345.838 336.79 li
345.961 336.644 li
346.201 336.582 li
346.295 336.392 li
345.979 335.874 li
345.533 335.682 li
344.693 336.021 li
344.312 335.708 li
344.475 334.968 li
345.435 334.428 li
347.331 333.822 li
347.331 333.479 li
346.383 333.2 li
345.231 332.696 li
344.642 332.211 li
345.369 331.994 li
347.298 332.043 li
348.185 331.933 li
349.707 331.395 li
349.936 331.368 li
350.088 331.262 li
350.383 330.85 li
351.146 328.91 li
351.298 328.789 li
351.396 328.563 li
351.604 328.632 li
351.811 328.87 li
351.909 329.176 li
351.865 329.455 li
351.669 329.986 li
351.629 330.308 li
351.746 330.839 li
352.421 332.265 li
352.291 332.473 li
352.214 332.8 li
352.236 333.078 li
352.454 333.313 li
352.715 333.353 li
352.966 333.359 li
353.151 333.479 li
353.86 335.012 li
354.22 335.522 li
354.427 336.44 li
354.005 337.51 li
353.424 338.642 li
353.151 339.791 li
353.37 341.006 li
353.882 341.808 li
354.678 342.247 li
355.746 342.379 li
356.476 343.147 li
356.938 343.403 li
357.141 342.953 li
356.814 340.528 li
356.552 339.765 li
356.204 339.049 li
356.425 338.991 li
356.487 338.892 li
356.552 338.876 li
356.814 339.049 li
357.631 337.254 li
358.627 337.466 li
359.87 338.089 li
361.439 337.563 li
361.81 336.936 li
362.322 334.223 li
362.765 332.685 li
362.91 331.924 li
362.961 330.85 li
362.122 331.299 li
361.359 331.251 li
360.542 331.091 li
359.583 331.22 li
358.198 332.521 li
357.642 332.87 li
357.173 332.645 li
356.672 331.994 li
355.964 331.538 li
355.171 330.454 li
354.481 329.209 li
354.067 328.246 li
354.016 327.336 li
354.256 326.245 li
354.743 325.55 li
355.44 325.829 li
356.283 327.548 li
356.956 328.126 li
357.893 327.708 li
359.583 326.356 li
359.997 325.878 li
360.175 325.534 li
360.498 324.53 li
360.4 324.244 li
360.324 323.593 li
360.443 323.173 li
360.956 323.581 li
361.218 324.108 li
361.326 324.523 li
361.566 324.801 li
362.169 324.902 li
363.979 324.885 li
364.271 324.966 li
364.158 324.725 li
cp
351.099 351.423 mo
350.688 351.444 li
350.285 351.846 li
350.078 351.898 li
350.067 351.758 li
349.442 351.599 li
349.107 351.405 li
348.792 351.269 li
348.574 351.392 li
348.65 351.634 li
348.679 351.938 li
348.519 352.344 li
348.817 352.566 li
349.304 352.877 li
349.184 353.093 li
349.391 353.372 li
349.842 353.518 li
350.143 353.835 li
350.161 354.298 li
350.416 354.442 li
351.128 354.225 li
351.941 353.696 li
352.279 353.333 li
352.279 353.014 li
352.08 352.476 li
351.099 351.423 li
cp
363.288 349.422 mo
362.929 349.355 li
362.907 349.161 li
362.986 348.782 li
362.311 347.464 li
361.729 347.031 li
360.912 347.142 li
360.16 347.501 li
359.92 347.964 li
360.236 348.346 li
360.604 348.544 li
360.821 348.879 li
361.021 349.34 li
361.457 349.677 li
362.107 349.896 li
362.521 350.127 li
362.667 350.345 li
362.762 350.439 li
363.125 350.425 li
363.681 350.232 li
363.778 349.896 li
363.583 349.585 li
363.288 349.422 li
cp
332.42 358.193 mo
332.147 357.844 li
331.995 357.598 li
331.788 357.415 li
331.341 357.465 li
330.73 357.659 li
330.382 357.505 li
330.214 357.017 li
329.924 356.58 li
329.608 356.272 li
329.466 356.224 li
329.502 356.364 li
329.059 356.734 li
328.645 357.236 li
328.387 357.412 li
328.057 357.479 li
327.951 357.58 li
328.078 357.665 li
328.369 357.765 li
329.117 357.835 li
329.416 358.016 li
329.521 358.288 li
329.39 358.504 li
330.367 358.706 li
330.527 358.922 li
330.244 359.111 li
330.022 359.447 li
330.065 359.925 li
330.523 359.718 li
331.312 359.098 li
331.635 358.774 li
331.363 358.618 li
331.247 358.471 li
331.566 358.346 li
332.009 358.444 li
332.387 358.636 li
332.66 358.578 li
332.573 358.325 li
332.42 358.193 li
cp
338.179 350.572 mo
337.452 350.517 li
336.057 350.683 li
334.596 350.953 li
333.884 351.244 li
333.267 351.7 li
333.685 351.982 li
333.859 352.225 li
333.815 352.476 li
333.572 352.777 li
333.572 353.181 li
334.64 353.898 li
335.163 354.154 li
335.875 354.256 li
337.717 353.916 li
338.542 353.577 li
339.131 352.753 li
339.276 351.747 li
338.789 350.867 li
338.179 350.572 li
cp
342.394 375.956 mo
342.132 375.724 li
341.565 374.781 li
341.489 374.225 li
341.641 373.725 li
341.532 373.494 li
341.467 373.515 li
341.347 373.654 li
341.14 373.721 li
340.976 373.666 li
340.834 373.712 li
340.802 373.936 li
340.824 374.186 li
340.758 374.402 li
340.867 374.771 li
341.005 374.941 li
341.172 375.06 li
341.271 375.51 li
341.423 375.878 li
341.532 376.046 li
342.143 376.188 li
342.775 376.495 li
342.83 376.23 li
342.713 376.046 li
342.394 375.956 li
cp
294.688 327.193 mo
294.855 327.052 li
295.001 326.489 li
294.99 326.255 li
294.729 326.148 li
293.965 326.148 li
293.617 326.339 li
293.526 326.857 li
293.748 327.349 li
294.292 327.366 li
294.688 327.193 li
cp
287.858 336.547 mo
288.265 337.294 li
288.341 337.758 li
288.657 337.99 li
288.992 337.961 li
289.148 337.886 li
289.388 337.672 li
289.867 337.678 li
290.281 338.281 li
290.805 338.801 li
291.371 338.746 li
291.629 338.227 li
291.611 337.646 li
291.458 337.17 li
291.415 336.81 li
291.448 336.538 li
291.288 336.239 li
290.99 335.967 li
290.554 335.861 li
290.023 335.826 li
289.631 335.627 li
289.366 335.337 li
288.948 335.151 li
288.385 335.064 li
287.909 335.113 li
287.578 335.284 li
287.226 335.281 li
286.793 335.167 li
286.979 335.618 li
287.858 336.547 li
cp
291.219 333.937 mo
291.11 333.711 li
290.787 333.269 li
290.357 333.078 li
290.02 333.357 li
289.37 333.641 li
288.258 333.824 li
287.818 334.193 li
288.367 334.517 li
289.115 334.795 li
289.696 335.295 li
290.216 335.591 li
290.75 335.45 li
291.019 335.162 li
290.924 334.428 li
291.077 334.078 li
291.219 333.937 li
cp
296.752 329.13 mo
296.193 329.303 li
296.149 329.532 li
296.004 329.684 li
295.844 329.887 li
294.936 330.219 li
294.227 330.266 li
293.987 330.551 li
294.26 330.905 li
294.79 331.087 li
295.452 330.98 li
296.037 330.692 li
297.355 330.479 li
297.541 330.578 li
298.787 331.264 li
298.903 331.48 li
298.761 331.793 li
298.478 332.113 li
298.958 332.295 li
299.833 331.485 li
299.742 330.332 li
298.896 330.033 li
298.264 330.026 li
297.977 329.936 li
297.915 329.681 li
297.889 329.36 li
297.973 329.107 li
298.652 328.655 li
299.041 328.604 li
299.099 328.283 li
298.533 327.712 li
297.737 327.309 li
296.963 327.123 li
296.476 327.375 li
296.625 327.914 li
296.974 328.393 li
296.952 328.791 li
296.752 329.13 li
cp
287.647 360.193 mo
287.349 360.041 li
286.706 360.141 li
285.169 359.817 li
284.835 360.039 li
284.813 360.306 li
284.625 360.563 li
284.653 360.857 li
284.966 361.306 li
285.889 361.69 li
286.172 361.648 li
286.249 361.381 li
286.401 361.374 li
286.586 361.664 li
286.783 361.757 li
287.033 361.548 li
287.466 361.492 li
287.676 361.183 li
287.604 360.793 li
287.647 360.193 li
cp
288.297 330.626 mo
287.873 330.385 li
287.338 330.44 li
286.685 330.771 li
286.55 331.202 li
286.859 331.769 li
287.233 332.286 li
287.901 333.048 li
287.883 333.265 li
287.981 333.585 li
288.385 333.618 li
288.861 333.349 li
289.006 332.831 li
288.995 332.225 li
289.275 331.906 li
289.714 331.926 li
290.031 331.729 li
290.14 331.215 li
289.922 330.369 li
290.521 329.984 li
290.474 329.647 li
290.26 329.338 li
290.038 329.214 li
289.754 329.242 li
289.169 329.231 li
288.745 329.647 li
288.832 330.285 li
288.712 330.613 li
288.297 330.626 li
cp
291.808 320.512 mo
291.764 320.231 li
291.651 319.988 li
291.462 319.732 li
291.066 319.619 li
290.496 319.666 li
290.107 319.486 li
289.82 319.53 li
289.475 319.759 li
289.391 320.006 li
289.584 320.063 li
289.784 320.027 li
289.911 320.099 li
289.587 320.345 li
289.649 320.465 li
289.871 320.458 li
290.042 320.545 li
290.107 320.782 li
290.321 320.805 li
290.561 320.685 li
290.743 320.809 li
291.143 321.252 li
291.382 321.344 li
291.607 321.217 li
291.796 321.044 li
291.808 320.512 li
cp
290.772 317.493 mo
291.251 318.614 li
291.491 318.909 li
291.746 319.038 li
291.938 319.213 li
292.131 319.253 li
292.523 319.291 li
292.777 319.513 li
293.922 319.706 li
294.227 319.799 li
294.144 320.065 li
294.136 320.543 li
294.314 320.864 li
294.532 321.144 li
295.052 321.264 li
295.168 321.435 li
295.342 321.292 li
295.517 320.765 li
295.437 320.348 li
295.212 320.041 li
295.077 319.558 li
294.812 319.18 li
294.347 319.148 li
293.933 318.96 li
293.442 318.454 li
293.442 318.163 li
293.617 317.961 li
294.027 317.935 li
294.336 317.622 li
294.224 317.267 li
293.947 317.347 li
293.729 317.355 li
293.635 317.115 li
293.359 316.978 li
292.93 317.204 li
292.552 317.335 li
292.134 317.056 li
291.611 316.862 li
291.044 317.054 li
290.772 317.493 li
cp
283.883 334.216 mo
283.72 334.057 li
283.505 334.021 li
283.208 334.061 li
281.747 334.62 li
280.947 334.795 li
280.341 334.561 li
279.796 334.773 li
279.305 335.092 li
278.949 335.569 li
278.814 336.246 li
278.891 336.962 li
279.124 337.539 li
279.509 337.903 li
280.032 337.966 li
280.563 337.725 li
280.951 337.245 li
281.191 336.604 li
281.282 335.874 li
281.529 335.732 li
282.088 335.853 li
282.699 335.848 li
283.084 335.337 li
283.309 335.47 li
283.818 335.613 li
284.025 335.708 li
284.007 334.554 li
283.883 334.216 li
cp
283.73 338.713 mo
283.196 338.229 li
282.815 337.528 li
282.648 337.417 li
282.372 337.559 li
281.562 338.673 li
280.243 339.203 li
279.938 339.623 li
280.341 340.528 li
280.537 340.456 li
281.238 340.754 li
281.885 341.134 li
281.889 341.304 li
282.346 341.346 li
282.655 341.319 li
282.967 341.09 li
283.644 340.178 li
283.829 339.779 li
283.927 339.354 li
283.869 338.938 li
283.73 338.713 li
cp
285.387 346.034 mo
285.856 346.003 li
286.259 345.866 li
286.383 345.23 li
286.009 344.47 li
285.533 343.774 li
284.962 342.522 li
284.588 343 li
284.428 344.046 li
284.603 345.928 li
284.962 346.23 li
285.387 346.034 li
cp
244.491 372.29 mo
244.099 371.804 li
243.604 371.637 li
243.263 371.953 li
243.045 372.521 li
243.154 372.939 li
243.652 373.247 li
244.524 374.049 li
244.742 374.189 li
244.84 374.244 li
245.036 374.281 li
245.174 374.04 li
245.131 373.613 li
244.491 372.29 li
cp
258.944 339.579 mo
258.563 339.588 li
258.414 339.194 li
258.214 339.037 li
257.847 339.11 li
257.473 339.389 li
257.149 339.899 li
256.852 340.482 li
256.604 341.143 li
256.557 341.867 li
256.844 342.645 li
257.28 342.827 li
257.462 342.627 li
257.691 342.311 li
257.985 341.818 li
258.123 341.437 li
258.828 340.612 li
258.944 340.304 li
259.151 340.056 li
259.544 339.667 li
259.457 339.446 li
258.944 339.579 li
cp
285.089 329.768 mo
285.467 329.904 li
285.758 330.157 li
286.128 330.299 li
286.771 330.106 li
287.291 329.656 li
287.633 329.006 li
287.771 328.246 li
287.666 327.462 li
287.313 326.849 li
286.815 326.505 li
286.379 326.613 li
286.187 327.336 li
286.02 327.668 li
285.649 327.675 li
285.224 327.557 li
284.937 327.539 li
284.326 328.098 li
283.523 329.382 li
283.084 329.768 li
283.084 330.106 li
283.632 330.095 li
285.089 329.768 li
cp
286.499 319.413 mo
286.608 319.533 li
286.771 319.655 li
287.197 319.586 li
288.385 319.903 li
288.625 319.841 li
288.788 319.397 li
289.169 318.825 li
289.671 318.334 li
290.15 318.135 li
289.551 317.164 li
289.355 316.603 li
289.391 316.057 li
289.704 315.597 li
291.063 314.804 li
290.379 314.619 li
289.464 314.837 li
288.657 315.361 li
288.319 316.103 li
288.102 316.454 li
287.611 316.693 li
287.081 316.871 li
286.771 317.049 li
286.535 317.555 li
286.187 319.286 li
286.383 319.319 li
286.499 319.413 li
cp
.0152285 .0084535 .0084535 0 cmyk
@
394.16 131.762 mo
398.103 139.569 li
401.176 147.752 li
401.678 148.642 li
403.279 150.627 li
403.894 152.293 li
411.335 162.949 li
414.223 167.159 li
417.682 170.997 li
418.173 171.398 li
420.49 174.128 li
420.61 175.281 li
420.621 176.667 li
420.897 177.841 li
422.478 178.721 li
422.936 179.666 li
424.24 183.918 li
424.821 184.903 li
425.519 185.322 li
426.104 185.928 li
428.135 189.927 li
429.355 191.464 li
429.777 192.31 li
429.94 193.205 li
430.249 194.073 li
432.404 196.446 li
433.091 198.391 li
433.701 202.636 li
434.54 204.97 li
436.829 208.163 li
437.004 208.833 li
436.742 209.479 li
436.328 210.096 li
436.066 210.699 li
436.048 211.24 li
436.371 212.99 li
436.764 217.981 li
437.178 220.284 li
438.66 224.983 li
438.78 227.282 li
438.315 229.408 li
437.309 231.338 li
436.491 233.626 li
436.044 233.607 li
434.554 233.265 li
433.123 233.899 li
430.031 232.756 li
430.525 231.432 li
430.387 230.19 li
429.995 228.813 li
429.875 227.253 li
430.47 225.773 li
430.95 224.371 li
430.6 223.956 li
430.216 223.591 li
430.396 222.325 li
427.125 222.08 li
426.165 221.534 li
425.141 221.094 li
424.721 220.067 li
424.393 218.879 li
422.921 218.181 li
422.003 216.791 li
421.805 214.981 li
422.127 213.595 li
422.889 213.017 li
423.724 212.704 li
425.025 213.219 li
426.082 212.428 li
425.648 211.14 li
424.255 210.298 li
422.728 209.941 li
421.514 210.583 li
420.347 210.879 li
418.699 210.122 li
416.95 209.827 li
416.359 210.069 li
415.87 210.008 li
415.492 209.5 li
414.947 209.274 li
413.679 210.264 li
412.341 210.79 li
412.239 209.81 li
412.35 208.837 li
411.574 208.451 li
410.712 208.253 li
410.084 207.15 li
408.866 207.054 li
407.652 207.624 li
406.841 208.616 li
407.136 209.992 li
406.993 211.277 li
406.729 212.471 li
405.59 212.364 li
404.257 212.077 li
403.153 211.613 li
402.01 211.005 li
401.114 210.426 li
400.21 210.033 li
399.074 209.901 li
397.912 209.671 li
396.735 208.908 li
395.674 208.103 li
394.608 208.11 li
393.533 208.454 li
392.573 208.625 li
391.761 208.686 li
391.438 207.95 li
390.552 207.028 li
390.631 206.23 li
390.188 205.741 li
388.061 205.984 li
386.704 206.438 li
386.298 206.629 li
385.901 206.621 li
385.269 206.271 li
384.779 205.718 li
385.546 204.529 li
386.833 203.611 li
387.35 202.432 li
386.547 202.189 li
384 201.787 li
381.508 200.898 li
380.475 201.697 li
379.594 202.161 li
378.527 201.936 li
377.632 202.628 li
376.155 203.452 li
374.675 203.811 li
374.121 203.034 li
374.121 201.831 li
372.423 200.03 li
370.147 200.801 li
369.304 201.838 li
369.548 204.561 li
368.644 205.181 li
368.344 205.547 li
367.998 205.85 li
367.614 205.67 li
367.236 205.435 li
365.87 205.339 li
364.514 205.66 li
364.896 202.957 li
360.149 203.607 li
355.433 204.9 li
357.855 200.411 li
359.839 195.53 li
362.59 189.654 li
362.932 188.392 li
362.673 187.128 li
363.259 186.105 li
364.085 185.098 li
364.971 184.73 li
365.437 183.729 li
364.929 182.863 li
364.265 182.294 li
363.203 182.176 li
362.114 181.762 li
360.61 181.56 li
358.1 180.168 li
356.97 179.706 li
355.848 178.967 li
354.616 178.777 li
353.421 179.155 li
352.429 178.316 li
352.508 177.404 li
352.978 176.445 li
353.163 175.335 li
353.177 174.191 li
351.996 174.573 li
351.465 173.885 li
352.766 172.354 li
352.549 171.333 li
352.189 170.319 li
352.448 169.551 li
352.434 168.631 li
352.346 167.761 li
354.612 166.087 li
355.53 165.787 li
356.042 164.999 li
356.273 162.705 li
355.216 161.082 li
354.349 160.905 li
353.522 160.523 li
352.9 158.85 li
351.912 158.8 li
350.855 158.871 li
349.702 158.026 li
349.153 156.528 li
348.927 153.862 li
348.498 152.519 li
348.198 152.259 li
347.847 152.318 li
347.612 152.546 li
347.316 152.589 li
346.555 152.05 li
344.691 152.71 li
342.979 152.294 li
342.287 151.872 li
341.581 151.233 li
341.558 150.164 li
341.904 149.155 li
342.158 148.771 li
342.338 148.402 li
342.042 148.154 li
341.664 148.063 li
341.304 148.14 li
340.99 148.383 li
340.4 149.152 li
339.74 149.822 li
338.725 149.996 li
337.83 149.386 li
337.664 148.832 li
337.594 148.271 li
337.271 148.072 li
336.93 148.433 li
336.814 149.011 li
336.805 150.879 li
336.224 151.791 li
334.586 151.014 li
333.086 149.656 li
332.56 149.102 li
332.006 149.172 li
331.513 148.454 li
331.204 147.518 li
330.797 147.026 li
330.313 146.638 li
329.939 145.746 li
329.274 145.322 li
327.701 144.32 li
326.817 143.886 li
327.079 143.553 li
329.526 141.532 li
332.371 139.747 li
335.363 138.531 li
338.243 138.219 li
339.664 138.371 li
345.168 137.888 li
349.402 139.175 li
350.747 139.051 li
353.371 138.254 li
361.982 137.499 li
362.35 137.749 li
362.92 138.575 li
363.469 139.13 li
364.082 139.288 li
367.033 138.666 li
371.717 138.939 li
374.758 138.698 li
377.821 137.604 li
380.673 135.757 li
383.049 133.262 li
384.083 131.781 li
384.945 130.199 li
385.527 128.44 li
385.721 126.416 li
385.343 124.463 li
385.246 123.467 li
385.527 122.729 li
386.745 121.763 li
389.27 120.449 li
390.604 123.092 li
390.604 123.092 li
392.686 127.217 li
393.1 129.025 li
394.16 131.762 li
cp
.49427 .41117 .412055 .0505074 cmyk
ef
394.16 131.762 mo
398.103 139.569 li
401.176 147.752 li
401.678 148.642 li
403.279 150.627 li
403.894 152.293 li
411.335 162.949 li
414.223 167.159 li
417.682 170.997 li
418.173 171.398 li
420.49 174.128 li
420.61 175.281 li
420.621 176.667 li
420.897 177.841 li
422.478 178.721 li
422.936 179.666 li
424.24 183.918 li
424.821 184.903 li
425.519 185.322 li
426.104 185.928 li
428.135 189.927 li
429.355 191.464 li
429.777 192.31 li
429.94 193.205 li
430.249 194.073 li
432.404 196.446 li
433.091 198.391 li
433.701 202.636 li
434.54 204.97 li
436.829 208.163 li
437.004 208.833 li
436.742 209.479 li
436.328 210.096 li
436.066 210.699 li
436.048 211.24 li
436.371 212.99 li
436.764 217.981 li
437.178 220.284 li
438.66 224.983 li
438.78 227.282 li
438.315 229.408 li
437.309 231.338 li
436.491 233.626 li
436.044 233.607 li
434.554 233.265 li
433.123 233.899 li
430.031 232.756 li
430.525 231.432 li
430.387 230.19 li
429.995 228.813 li
429.875 227.253 li
430.47 225.773 li
430.95 224.371 li
430.6 223.956 li
430.216 223.591 li
430.396 222.325 li
427.125 222.08 li
426.165 221.534 li
425.141 221.094 li
424.721 220.067 li
424.393 218.879 li
422.921 218.181 li
422.003 216.791 li
421.805 214.981 li
422.127 213.595 li
422.889 213.017 li
423.724 212.704 li
425.025 213.219 li
426.082 212.428 li
425.648 211.14 li
424.255 210.298 li
422.728 209.941 li
421.514 210.583 li
420.347 210.879 li
418.699 210.122 li
416.95 209.827 li
416.359 210.069 li
415.87 210.008 li
415.492 209.5 li
414.947 209.274 li
413.679 210.264 li
412.341 210.79 li
412.239 209.81 li
412.35 208.837 li
411.574 208.451 li
410.712 208.253 li
410.084 207.15 li
408.866 207.054 li
407.652 207.624 li
406.841 208.616 li
407.136 209.992 li
406.993 211.277 li
406.729 212.471 li
405.59 212.364 li
404.257 212.077 li
403.153 211.613 li
402.01 211.005 li
401.114 210.426 li
400.21 210.033 li
399.074 209.901 li
397.912 209.671 li
396.735 208.908 li
395.674 208.103 li
394.608 208.11 li
393.533 208.454 li
392.573 208.625 li
391.761 208.686 li
391.438 207.95 li
390.552 207.028 li
390.631 206.23 li
390.188 205.741 li
388.061 205.984 li
386.704 206.438 li
386.298 206.629 li
385.901 206.621 li
385.269 206.271 li
384.779 205.718 li
385.546 204.529 li
386.833 203.611 li
387.35 202.432 li
386.547 202.189 li
384 201.787 li
381.508 200.898 li
380.475 201.697 li
379.594 202.161 li
378.527 201.936 li
377.632 202.628 li
376.155 203.452 li
374.675 203.811 li
374.121 203.034 li
374.121 201.831 li
372.423 200.03 li
370.147 200.801 li
369.304 201.838 li
369.548 204.561 li
368.644 205.181 li
368.344 205.547 li
367.998 205.85 li
367.614 205.67 li
367.236 205.435 li
365.87 205.339 li
364.514 205.66 li
364.896 202.957 li
360.149 203.607 li
355.433 204.9 li
357.855 200.411 li
359.839 195.53 li
362.59 189.654 li
362.932 188.392 li
362.673 187.128 li
363.259 186.105 li
364.085 185.098 li
364.971 184.73 li
365.437 183.729 li
364.929 182.863 li
364.265 182.294 li
363.203 182.176 li
362.114 181.762 li
360.61 181.56 li
358.1 180.168 li
356.97 179.706 li
355.848 178.967 li
354.616 178.777 li
353.421 179.155 li
352.429 178.316 li
352.508 177.404 li
352.978 176.445 li
353.163 175.335 li
353.177 174.191 li
351.996 174.573 li
351.465 173.885 li
352.766 172.354 li
352.549 171.333 li
352.189 170.319 li
352.448 169.551 li
352.434 168.631 li
352.346 167.761 li
354.612 166.087 li
355.53 165.787 li
356.042 164.999 li
356.273 162.705 li
355.216 161.082 li
354.349 160.905 li
353.522 160.523 li
352.9 158.85 li
351.912 158.8 li
350.855 158.871 li
349.702 158.026 li
349.153 156.528 li
348.927 153.862 li
348.498 152.519 li
348.198 152.259 li
347.847 152.318 li
347.612 152.546 li
347.316 152.589 li
346.555 152.05 li
344.691 152.71 li
342.979 152.294 li
342.287 151.872 li
341.581 151.233 li
341.558 150.164 li
341.904 149.155 li
342.158 148.771 li
342.338 148.402 li
342.042 148.154 li
341.664 148.063 li
341.304 148.14 li
340.99 148.383 li
340.4 149.152 li
339.74 149.822 li
338.725 149.996 li
337.83 149.386 li
337.664 148.832 li
337.594 148.271 li
337.271 148.072 li
336.93 148.433 li
336.814 149.011 li
336.805 150.879 li
336.224 151.791 li
334.586 151.014 li
333.086 149.656 li
332.56 149.102 li
332.006 149.172 li
331.513 148.454 li
331.204 147.518 li
330.797 147.026 li
330.313 146.638 li
329.939 145.746 li
329.274 145.322 li
327.701 144.32 li
326.817 143.886 li
327.079 143.553 li
329.526 141.532 li
332.371 139.747 li
335.363 138.531 li
338.243 138.219 li
339.664 138.371 li
345.168 137.888 li
349.402 139.175 li
350.747 139.051 li
353.371 138.254 li
361.982 137.499 li
362.35 137.749 li
362.92 138.575 li
363.469 139.13 li
364.082 139.288 li
367.033 138.666 li
371.717 138.939 li
374.758 138.698 li
377.821 137.604 li
380.673 135.757 li
383.049 133.262 li
384.083 131.781 li
384.945 130.199 li
385.527 128.44 li
385.721 126.416 li
385.343 124.463 li
385.246 123.467 li
385.527 122.729 li
386.745 121.763 li
389.27 120.449 li
390.604 123.092 li
390.604 123.092 li
392.686 127.217 li
393.1 129.025 li
394.16 131.762 li
cp
.0152285 .0084535 .0084535 0 cmyk
@
406.771 275.405 mo
406.074 276.125 li
405.737 276.025 li
405.317 276.063 li
405.341 276.424 li
405.281 276.89 li
404.861 277.991 li
404.856 278.347 li
404.723 278.862 li
403.726 279.467 li
401.146 278.795 li
399.702 278.649 li
399.065 279.152 li
398.429 280.268 li
398.087 280.559 li
397.677 280.22 li
397.127 279.864 li
396.338 279.224 li
395.808 278.197 li
395.157 277.557 li
394.465 277.287 li
394.197 276.27 li
394.815 275.405 li
395.484 275.4 li
396.205 275.283 li
396.394 274.762 li
396.477 274.212 li
396.085 274.067 li
395.66 273.997 li
396.14 272.914 li
396.906 272.07 li
396.625 269.557 li
398.724 267.812 li
401.566 267.43 li
403.924 267.276 li
405.715 268.59 li
406.282 269.58 li
406.259 270.016 li
406.042 270.383 li
406.056 271.777 li
406.416 272.318 li
406.896 272.727 li
406.988 273.602 li
407.011 274.534 li
406.771 275.405 li
cp
443.293 264.772 mo
443.129 263.824 li
442.393 263.237 li
441.847 264.152 li
439.01 267.261 li
437.862 268.161 li
436.957 268.005 li
436.244 267.133 li
435.568 266.374 li
434.627 265.5 li
434.668 264.745 li
435.412 264.129 li
435.852 263.986 li
436.317 263.761 li
436.677 263.275 li
436.844 262.412 li
436.604 262.102 li
436.244 261.85 li
435.914 260.411 li
435.656 258.53 li
435.416 258.251 li
435.118 258.048 li
434.846 257.544 li
434.693 256.637 li
434.882 249.946 li
435.118 248.85 li
435.656 247.909 li
437.036 246.237 li
437.309 245.219 li
437.585 240.481 li
437.342 238.185 li
436.731 235.905 li
436.502 233.719 li
436.491 233.626 li
436.044 233.607 li
434.554 233.265 li
433.123 233.899 li
430.031 232.756 li
430.525 231.432 li
430.387 230.189 li
429.995 228.813 li
429.875 227.253 li
430.47 225.773 li
430.95 224.371 li
430.6 223.956 li
430.216 223.591 li
430.396 222.325 li
427.125 222.08 li
426.165 221.534 li
425.141 221.094 li
424.721 220.067 li
424.393 218.879 li
422.921 218.181 li
422.003 216.791 li
421.805 214.981 li
422.127 213.595 li
422.889 213.018 li
423.724 212.704 li
425.025 213.219 li
426.082 212.428 li
425.648 211.14 li
424.255 210.298 li
422.728 209.941 li
421.514 210.583 li
420.347 210.879 li
418.699 210.122 li
416.95 209.827 li
416.359 210.069 li
415.87 210.008 li
415.492 209.501 li
414.947 209.273 li
413.679 210.264 li
412.341 210.79 li
412.239 209.81 li
412.35 208.837 li
411.574 208.451 li
410.712 208.253 li
410.084 207.15 li
408.866 207.054 li
407.652 207.624 li
406.841 208.616 li
407.136 209.992 li
406.992 211.277 li
406.729 212.471 li
405.59 212.364 li
404.257 212.077 li
403.153 211.613 li
402.01 211.005 li
401.465 211.625 li
400.86 211.975 li
400.33 211.77 li
399.896 212.047 li
398.867 213.139 li
397.731 214.089 li
396.989 214.811 li
396.066 215.101 li
395.513 215.563 li
395.12 216.274 li
393.74 217.254 li
392.758 218.66 li
392.292 219.71 li
391.724 220.751 li
392.038 221.297 li
392.629 221.842 li
391.969 224.031 li
388.231 225.603 li
386.639 225.079 li
385.975 223.732 li
384.923 222.82 li
384.18 222.29 li
383.599 221.637 li
383.017 222.212 li
382.551 222.949 li
382.329 223.817 li
382.016 224.736 li
380.729 224.636 li
379.349 224.15 li
378.629 223.685 li
377.867 224.176 li
377.134 225.166 li
376.243 225.242 li
375.528 224.768 li
374.988 225.684 li
374.43 226.902 li
374.13 228.044 li
374.983 229.147 li
375.634 230.398 li
372.469 229.895 li
370.767 229.155 li
369.797 230.603 li
368.237 231.343 li
366.849 232.288 li
366.733 232.949 li
366.761 233.468 li
366.512 234.036 li
365.506 235.388 li
364.86 236.08 li
364.205 236.199 li
363.545 236.507 li
364.048 237.777 li
365.797 238.075 li
367.983 241.254 li
367.172 242.047 li
366.729 243.316 li
366.549 246.339 li
366.281 247.672 li
366.563 248.627 li
367.057 249.502 li
366.415 250.779 li
365.428 251.634 li
365.695 254.265 li
367.49 253.842 li
368.569 254.195 li
369.834 255.252 li
370.701 255.664 li
372.981 255.116 li
373.991 255.862 li
374.499 258.747 li
373.549 258.689 li
372.479 258.491 li
371.398 259.417 li
371.647 260.902 li
371.656 261.659 li
371.56 262.569 li
371.131 263.09 li
370.784 263.707 li
370.411 265.123 li
369.719 266.476 li
368.598 266.852 li
367.514 267.384 li
369.341 270.507 li
369.133 274.019 li
369.492 275.243 li
370.397 275.77 li
370.813 276.083 li
371.223 276.433 li
371.26 276.868 li
371.439 277.313 li
371.8 277.478 li
372.164 277.6 li
373.517 277.705 li
374.103 278.197 li
374.826 278.687 li
376.109 278.786 li
377.374 278.774 li
378.527 279.164 li
379.376 280.089 li
379.972 281.221 li
380.959 281.92 li
381.208 282.434 li
381.36 282.907 li
382.048 283.333 li
382.644 284.034 li
382.615 285.331 li
382.08 286.57 li
382.781 289.108 li
385.536 289.225 li
386.884 289.034 li
388.171 289.25 li
389.38 289.832 li
390.524 290.691 li
391.793 290.946 li
394.184 289.718 li
395.406 289.967 li
396.509 288.393 li
397.538 287.596 li
397.907 290.632 li
399.033 292.008 li
400.432 292.894 li
402.051 292.711 li
403.722 292.412 li
405.18 292.858 li
406.573 293.593 li
408.238 293.641 li
409.692 292.486 li
410.333 292.248 li
410.979 292.163 li
411.593 291.632 li
412.105 290.97 li
413.721 290.306 li
415.437 290.732 li
416.752 291.353 li
418.002 290.934 li
419.077 290.063 li
420.227 289.392 li
420.914 289.375 li
421.195 288.836 li
420.767 288.126 li
420.521 287.356 li
422.025 286.188 li
423.913 285.528 li
425.459 285.294 li
426.973 285.612 li
428.546 286.291 li
428.956 286.967 li
428.979 287.787 li
429.09 288.52 li
429.644 288.918 li
430.392 289.112 li
434.544 288.361 li
438.079 289.228 li
438.118 289.217 li
437.775 288.807 li
437.403 287.827 li
437.784 286.964 li
438.657 285.237 li
439.842 281.683 li
439.777 279.635 li
440.935 276.36 li
441.412 272.588 li
441.535 271.153 li
443.145 267.949 li
443.842 266.857 li
443.609 265.759 li
443.293 264.772 li
cp
502.609 181.625 mo
502.075 181.735 li
501.015 182.127 li
499.427 182.397 li
498.624 182.933 li
498.246 183.79 li
498.479 184.937 li
499.213 185.823 li
500.317 186.487 li
501.454 186.708 li
502.305 186.281 li
502.824 185.223 li
503.318 183.632 li
503.373 182.203 li
502.609 181.625 li
cp
.49427 .41117 .412055 .0505074 cmyk
f
406.771 275.405 mo
406.074 276.125 li
405.737 276.025 li
405.317 276.063 li
405.341 276.424 li
405.281 276.89 li
404.861 277.991 li
404.856 278.347 li
404.723 278.862 li
403.726 279.467 li
401.146 278.795 li
399.702 278.649 li
399.065 279.152 li
398.429 280.268 li
398.087 280.559 li
397.677 280.22 li
397.127 279.864 li
396.338 279.224 li
395.808 278.197 li
395.157 277.557 li
394.465 277.287 li
394.197 276.27 li
394.815 275.405 li
395.484 275.4 li
396.205 275.283 li
396.394 274.762 li
396.477 274.212 li
396.085 274.067 li
395.66 273.997 li
396.14 272.914 li
396.906 272.07 li
396.625 269.557 li
398.724 267.812 li
401.566 267.43 li
403.924 267.276 li
405.715 268.59 li
406.282 269.58 li
406.259 270.016 li
406.042 270.383 li
406.056 271.777 li
406.416 272.318 li
406.896 272.727 li
406.988 273.602 li
407.011 274.534 li
406.771 275.405 li
cp
443.293 264.772 mo
443.129 263.824 li
442.393 263.237 li
441.847 264.152 li
439.01 267.261 li
437.862 268.161 li
436.957 268.005 li
436.244 267.133 li
435.568 266.374 li
434.627 265.5 li
434.668 264.745 li
435.412 264.129 li
435.852 263.986 li
436.317 263.761 li
436.677 263.275 li
436.844 262.412 li
436.604 262.102 li
436.244 261.85 li
435.914 260.411 li
435.656 258.53 li
435.416 258.251 li
435.118 258.048 li
434.846 257.544 li
434.693 256.637 li
434.882 249.946 li
435.118 248.85 li
435.656 247.909 li
437.036 246.237 li
437.309 245.219 li
437.585 240.481 li
437.342 238.185 li
436.731 235.905 li
436.502 233.719 li
436.491 233.626 li
436.044 233.607 li
434.554 233.265 li
433.123 233.899 li
430.031 232.756 li
430.525 231.432 li
430.387 230.189 li
429.995 228.813 li
429.875 227.253 li
430.47 225.773 li
430.95 224.371 li
430.6 223.956 li
430.216 223.591 li
430.396 222.325 li
427.125 222.08 li
426.165 221.534 li
425.141 221.094 li
424.721 220.067 li
424.393 218.879 li
422.921 218.181 li
422.003 216.791 li
421.805 214.981 li
422.127 213.595 li
422.889 213.018 li
423.724 212.704 li
425.025 213.219 li
426.082 212.428 li
425.648 211.14 li
424.255 210.298 li
422.728 209.941 li
421.514 210.583 li
420.347 210.879 li
418.699 210.122 li
416.95 209.827 li
416.359 210.069 li
415.87 210.008 li
415.492 209.501 li
414.947 209.273 li
413.679 210.264 li
412.341 210.79 li
412.239 209.81 li
412.35 208.837 li
411.574 208.451 li
410.712 208.253 li
410.084 207.15 li
408.866 207.054 li
407.652 207.624 li
406.841 208.616 li
407.136 209.992 li
406.992 211.277 li
406.729 212.471 li
405.59 212.364 li
404.257 212.077 li
403.153 211.613 li
402.01 211.005 li
401.465 211.625 li
400.86 211.975 li
400.33 211.77 li
399.896 212.047 li
398.867 213.139 li
397.731 214.089 li
396.989 214.811 li
396.066 215.101 li
395.513 215.563 li
395.12 216.274 li
393.74 217.254 li
392.758 218.66 li
392.292 219.71 li
391.724 220.751 li
392.038 221.297 li
392.629 221.842 li
391.969 224.031 li
388.231 225.603 li
386.639 225.079 li
385.975 223.732 li
384.923 222.82 li
384.18 222.29 li
383.599 221.637 li
383.017 222.212 li
382.551 222.949 li
382.329 223.817 li
382.016 224.736 li
380.729 224.636 li
379.349 224.15 li
378.629 223.685 li
377.867 224.176 li
377.134 225.166 li
376.243 225.242 li
375.528 224.768 li
374.988 225.684 li
374.43 226.902 li
374.13 228.044 li
374.983 229.147 li
375.634 230.398 li
372.469 229.895 li
370.767 229.155 li
369.797 230.603 li
368.237 231.343 li
366.849 232.288 li
366.733 232.949 li
366.761 233.468 li
366.512 234.036 li
365.506 235.388 li
364.86 236.08 li
364.205 236.199 li
363.545 236.507 li
364.048 237.777 li
365.797 238.075 li
367.983 241.254 li
367.172 242.047 li
366.729 243.316 li
366.549 246.339 li
366.281 247.672 li
366.563 248.627 li
367.057 249.502 li
366.415 250.779 li
365.428 251.634 li
365.695 254.265 li
367.49 253.842 li
368.569 254.195 li
369.834 255.252 li
370.701 255.664 li
372.981 255.116 li
373.991 255.862 li
374.499 258.747 li
373.549 258.689 li
372.479 258.491 li
371.398 259.417 li
371.647 260.902 li
371.656 261.659 li
371.56 262.569 li
371.131 263.09 li
370.784 263.707 li
370.411 265.123 li
369.719 266.476 li
368.598 266.852 li
367.514 267.384 li
369.341 270.507 li
369.133 274.019 li
369.492 275.243 li
370.397 275.77 li
370.813 276.083 li
371.223 276.433 li
371.26 276.868 li
371.439 277.313 li
371.8 277.478 li
372.164 277.6 li
373.517 277.705 li
374.103 278.197 li
374.826 278.687 li
376.109 278.786 li
377.374 278.774 li
378.527 279.164 li
379.376 280.089 li
379.972 281.221 li
380.959 281.92 li
381.208 282.434 li
381.36 282.907 li
382.048 283.333 li
382.644 284.034 li
382.615 285.331 li
382.08 286.57 li
382.781 289.108 li
385.536 289.225 li
386.884 289.034 li
388.171 289.25 li
389.38 289.832 li
390.524 290.691 li
391.793 290.946 li
394.184 289.718 li
395.406 289.967 li
396.509 288.393 li
397.538 287.596 li
397.907 290.632 li
399.033 292.008 li
400.432 292.894 li
402.051 292.711 li
403.722 292.412 li
405.18 292.858 li
406.573 293.593 li
408.238 293.641 li
409.692 292.486 li
410.333 292.248 li
410.979 292.163 li
411.593 291.632 li
412.105 290.97 li
413.721 290.306 li
415.437 290.732 li
416.752 291.353 li
418.002 290.934 li
419.077 290.063 li
420.227 289.392 li
420.914 289.375 li
421.195 288.836 li
420.767 288.126 li
420.521 287.356 li
422.025 286.188 li
423.913 285.528 li
425.459 285.294 li
426.973 285.612 li
428.546 286.291 li
428.956 286.967 li
428.979 287.787 li
429.09 288.52 li
429.644 288.918 li
430.392 289.112 li
434.544 288.361 li
438.079 289.228 li
438.118 289.217 li
437.775 288.807 li
437.403 287.827 li
437.784 286.964 li
438.657 285.237 li
439.842 281.683 li
439.777 279.635 li
440.935 276.36 li
441.412 272.588 li
441.535 271.153 li
443.145 267.949 li
443.842 266.857 li
443.609 265.759 li
443.293 264.772 li
cp
502.609 181.625 mo
502.075 181.735 li
501.015 182.127 li
499.427 182.397 li
498.624 182.933 li
498.246 183.79 li
498.479 184.937 li
499.213 185.823 li
500.317 186.487 li
501.454 186.708 li
502.305 186.281 li
502.824 185.223 li
503.318 183.632 li
503.373 182.203 li
502.609 181.625 li
cp
.0152285 .0084535 .0084535 0 cmyk
@
346.269 244.617 mo
347.709 244.297 li
348.23 243.539 li
348.853 243.693 li
348.774 244.326 li
349.324 244.608 li
349.402 245.599 li
349.864 247.074 li
349.646 248.376 li
349.061 249.319 li
348.415 251.714 li
347.248 252.657 li
346.606 252.875 li
345.609 252.293 li
344.151 251.568 li
343.565 250.48 li
343.154 248.521 li
342.453 247.215 li
342.103 245.69 li
342.998 241.985 li
343.173 241.551 li
343.053 241.186 li
335.066 243.372 li
331 242.573 li
331.407 241.41 li
332.085 240.76 li
337.784 238.129 li
341.069 237.469 li
344.465 237.684 li
344.433 238.289 li
344.207 238.808 li
344.119 239.232 li
344.267 239.588 li
344.299 239.869 li
344.35 240.15 li
344.262 240.727 li
344.073 241.272 li
343.971 241.697 li
344.128 242.1 li
344.446 242.45 li
344.834 242.638 li
345.092 243.26 li
344.922 244.232 li
346.269 244.617 li
cp
.49427 .41117 .412055 .0505074 cmyk
ef
346.269 244.617 mo
347.709 244.297 li
348.23 243.539 li
348.853 243.693 li
348.774 244.326 li
349.324 244.608 li
349.402 245.599 li
349.864 247.074 li
349.646 248.376 li
349.061 249.319 li
348.415 251.714 li
347.248 252.657 li
346.606 252.875 li
345.609 252.293 li
344.151 251.568 li
343.565 250.48 li
343.154 248.521 li
342.453 247.215 li
342.103 245.69 li
342.998 241.985 li
343.173 241.551 li
343.053 241.186 li
335.066 243.372 li
331 242.573 li
331.407 241.41 li
332.085 240.76 li
337.784 238.129 li
341.069 237.469 li
344.465 237.684 li
344.433 238.289 li
344.207 238.808 li
344.119 239.232 li
344.267 239.588 li
344.299 239.869 li
344.35 240.15 li
344.262 240.727 li
344.073 241.272 li
343.971 241.697 li
344.128 242.1 li
344.446 242.45 li
344.834 242.638 li
345.092 243.26 li
344.922 244.232 li
346.269 244.617 li
cp
.0152285 .0084535 .0084535 0 cmyk
@
354.953 264.583 mo
354.044 262.962 li
353.661 261.068 li
353.721 259.157 li
353.26 257.512 li
351.889 256.671 li
350.565 256.241 li
349.125 256.54 li
349.005 254.966 li
349.084 253.436 li
349.619 251.294 li
350.629 249.474 li
351.036 248.545 li
351.488 247.721 li
352.222 247.166 li
352.392 246.205 li
351.82 246.014 li
351.202 245.734 li
350.45 246.284 li
349.864 247.074 li
349.647 248.376 li
349.061 249.319 li
348.415 251.714 li
347.248 252.657 li
346.606 252.875 li
345.609 252.293 li
344.151 251.568 li
343.565 250.48 li
343.154 248.521 li
342.453 247.215 li
342.103 245.69 li
342.998 241.985 li
343.173 241.551 li
343.053 241.186 li
335.066 243.372 li
331 242.573 li
331.407 241.41 li
332.085 240.76 li
337.784 238.129 li
337.991 236.422 li
338.549 234.826 li
338.466 233.891 li
339.338 231.992 li
340.575 230.197 li
341.517 228.56 li
341.89 228.158 li
342.314 228.225 li
342.73 228.108 li
342.956 227.682 li
343.016 227.203 li
343.154 226.594 li
343.372 226.006 li
343.482 225.377 li
343.385 224.745 li
343.09 224.185 li
342.721 223.846 li
342.767 222.699 li
342.181 222.287 li
341.415 220.742 li
340.815 220.393 li
340.289 219.84 li
339.938 219.012 li
337.83 218.727 li
336.104 217.275 li
334.175 216.395 li
330.465 217.983 li
328.716 217.982 li
326.635 217.554 li
326.622 217.551 li
325.764 218.206 li
323.824 218.99 li
323.002 219.126 li
322.091 219.535 li
322.548 220.472 li
324.082 222.175 li
323.133 222.057 li
322.229 221.793 li
322.6 223.191 li
322.374 223.985 li
321.935 224.729 li
321.673 225.981 li
321.302 225.811 li
321.044 225.593 li
320.87 225.273 li
320.735 224.804 li
321.469 224.58 li
321.597 224.083 li
321.219 222.347 li
320.823 221.68 li
320.735 221.222 li
320.779 220.781 li
320.986 220.023 li
321.033 219.682 li
320.935 218.088 li
320.75 217.266 li
320.43 216.807 li
319.972 216.891 li
319.133 217.974 li
318.599 218.329 li
319.3 215.916 li
319.235 214.722 li
318.294 213.754 li
317.518 213.244 li
316.435 212.952 li
315.579 212.639 li
314.806 212.54 li
314.114 212.546 li
313.378 212.891 li
312.965 213.67 li
312.682 214.147 li
312.5 214.6 li
312.669 215.97 li
312.55 216.434 li
312.354 216.847 li
311.863 217.188 li
312.026 216.27 li
311.972 215.748 li
311.529 214.897 li
311.441 214.497 li
311.875 213.986 li
312.085 213.23 li
311.639 212.467 li
310.986 212.106 li
310.309 211.645 li
309.958 211.287 li
309.105 210.697 li
308.211 210.057 li
307.572 209.495 li
306.86 209.151 li
306.042 209.174 li
306.14 210.04 li
306.556 211.331 li
307.481 212.198 li
308.332 212.607 li
308.964 212.765 li
309.269 213.124 li
309.229 213.508 li
308.811 213.754 li
308.255 213.751 li
307.797 213.542 li
307.419 213.206 li
306.708 212.314 li
306.25 211.882 li
305.868 211.814 li
305.715 212.417 li
305.912 212.574 li
308.647 215.47 li
308.989 216.039 li
309.378 217.177 li
309.697 217.602 li
309.697 217.947 li
309.062 217.92 li
308.724 217.552 li
308.495 216.993 li
308.179 216.388 li
307.405 215.529 li
306.864 215.161 li
306.624 215.47 li
306.435 216.784 li
305.617 219.451 li
305.436 220.84 li
305.291 221.101 li
304.963 220.911 li
304.637 220.404 li
304.487 219.682 li
304.487 217.188 li
304.615 216.843 li
305.018 216.361 li
305.098 216.216 li
305.051 215.834 li
304.843 215.479 li
304.792 215.088 li
304.607 214.62 li
304.171 214.611 li
303.667 214.886 li
303.274 215.279 li
302.991 214.375 li
303.252 213.74 li
303.681 213.256 li
303.906 212.799 li
303.572 212.06 li
302.783 211.782 li
301.138 211.809 li
301.138 212.226 li
301.333 212.646 li
301.163 212.819 li
300.789 212.744 li
300.364 212.417 li
299.928 212.168 li
299.448 212.25 li
299.005 212.56 li
298.674 212.99 li
299.492 212.928 li
300.178 213.138 li
300.495 213.651 li
300.2 214.518 li
299.557 214.052 li
299.343 214.233 li
299.484 214.752 li
299.917 215.279 li
300.495 215.513 li
301.665 215.534 li
302.053 215.664 li
302.402 216.591 li
302.238 217.845 li
301.606 218.874 li
300.531 219.126 li
300.531 219.473 li
301.392 219.834 li
301.748 219.889 li
301.748 220.236 li
300.854 220.463 li
300.389 220.652 li
300.2 220.84 li
299.997 221.444 li
299.557 221.158 li
298.838 220.236 li
298.362 220.795 li
298.688 222.041 li
299.612 224.042 li
298.325 223.157 li
297.762 223.173 li
297.01 223.867 li
296.69 224.015 li
296.454 223.718 li
296.309 223.209 li
296.266 222.729 li
296.433 222.583 li
297.235 222.057 li
297.479 221.793 li
297.442 221.571 li
297.163 220.75 li
297.148 220.236 li
297.421 219.752 li
297.857 219.29 li
298.129 218.771 li
297.573 217.302 li
297.377 216.079 li
297.345 214.872 li
297.479 214.102 li
296.44 214.422 li
296.233 215.8 li
296.345 217.488 li
296.266 218.744 li
295.975 219.246 li
295.677 219.453 li
294.568 219.473 li
293.955 219.341 li
293.846 218.964 li
294.129 217.602 li
293.039 217.995 li
292.269 218.622 li
292.204 219.398 li
293.213 220.236 li
292.476 221.426 li
292.56 222.12 li
293.261 222.438 li
294.401 222.52 li
294.063 223.182 li
293.541 223.318 li
292.269 222.937 li
292.745 223.795 li
293.213 224.457 li
292.832 224.375 li
292.494 224.257 li
292.2 224.235 li
291.963 224.457 li
291.655 224.003 li
291.415 223.545 li
291.222 223.06 li
291.081 222.52 li
290.903 223.232 li
290.677 223.74 li
289.533 225.196 li
289.409 225.573 li
289.497 226.929 li
289.442 228.325 li
289.617 228.773 li
290.14 228.298 li
290.39 227.654 li
290.521 226.267 li
290.75 225.6 li
291.328 226.076 li
292.047 226.287 li
292.734 226.625 li
293.213 227.5 li
293.224 228.341 li
292.755 228.66 li
290.914 228.642 li
290.695 228.873 li
290.765 229.385 li
290.95 229.904 li
291.081 230.162 li
291.622 230.477 li
292.08 230.445 li
292.538 230.264 li
293.05 230.162 li
293.922 229.838 li
295.103 228.343 li
295.927 227.881 li
296.266 229.401 li
295.873 230.481 li
297.185 232.637 li
296.57 233.996 li
296.723 234.317 li
296.825 234.692 li
296.875 235.106 li
296.868 235.514 li
297.257 234.937 li
297.741 234.461 li
298.318 234.131 li
299.001 233.996 li
298.249 232.975 li
298.184 232.515 li
298.674 232.099 li
298.38 231.182 li
297.566 229.879 li
297.148 229.023 li
298.166 229.007 li
298.489 228.354 li
298.598 227.463 li
299.001 226.738 li
299.721 226.611 li
300.2 227.187 li
300.046 228.599 li
300.559 228.844 li
300.293 229.93 li
300.078 232.936 li
300.937 233.502 li
301.8 233.541 li
302.627 234.186 li
303.031 233.678 li
303.505 232.434 li
303.309 230.977 li
303.638 229.892 li
303.582 228.947 li
303.267 228.463 li
303.241 228.071 li
303.383 227.677 li
304.091 227.373 li
304.724 226.682 li
305.098 226.362 li
305.236 226.852 li
305.443 227.196 li
306.042 227.881 li
304.998 228.047 li
304.656 228.732 li
304.873 229.662 li
305.943 229.863 li
306.368 230.635 li
305.739 231.141 li
305.286 231.793 li
306.003 232.503 li
306.532 232.614 li
306.896 233.097 li
306.628 233.696 li
306.559 234.374 li
305.628 234.343 li
304.735 234.758 li
304.119 234.797 li
304.138 235.03 li
304.41 235.435 li
304.635 236.391 li
304.672 236.9 li
304.477 237.366 li
304.685 237.876 li
304.896 237.92 li
305.247 238.153 li
305.633 238.517 li
306.489 238.208 li
306.631 238.51 li
306.199 239.184 li
305.269 240.275 li
305.239 240.897 li
305.498 241.95 li
305.904 242.975 li
306.348 243.515 li
307.056 243.379 li
308.019 241.943 li
308.647 241.584 li
311.252 241.584 li
310.383 242.049 li
308.544 242.563 li
307.685 243.817 li
306.764 244.096 li
305.955 244.545 li
306.624 245.788 li
306.042 245.788 li
306.042 246.163 li
306.402 246.481 li
306.929 247.124 li
307.234 247.336 li
308.706 247.345 li
309.411 247.53 li
309.697 248.266 li
309.283 248.843 li
307.296 249.326 li
306.624 249.948 li
307.307 250.311 li
309.204 250.893 li
309.697 251.499 li
309.043 251.934 li
308.506 253.072 li
307.568 255.653 li
307.845 256.045 li
308.179 256.41 li
308.433 256.549 li
308.789 256.34 li
309.087 256.41 li
309.585 256.774 li
309.959 257.204 li
310.621 258.298 li
308.748 257.758 li
307.409 258.181 li
305.893 258.951 li
305.715 260.566 li
306.021 260.847 li
306.169 260.489 li
306.44 259.448 li
307.312 259.311 li
308.32 259.957 li
308.343 260.566 li
308.625 260.568 li
309.218 260.225 li
310.003 260.566 li
311.024 262.324 li
311.583 262.511 li
312.193 262.768 li
312.484 263.114 li
311.863 263.617 li
312.266 264.289 li
313.019 265.28 li
313.389 265.88 li
313.622 266.574 li
313.694 267.08 li
313.923 267.463 li
314.603 267.796 li
315.536 267.383 li
316.532 267.214 li
317.367 266.812 li
318.123 266.084 li
319.024 265.462 li
319.942 265.179 li
321.952 262.699 li
324.088 262.464 li
326.599 261.925 li
331.222 260.465 li
332.869 260.795 li
332.473 263.234 li
333.423 264.715 li
334.743 264.468 li
335.993 263.983 li
338.453 263.503 li
339.099 263.278 li
339.73 262.996 li
340.667 262.801 li
341.267 261.866 li
342.015 261.1 li
343.44 262.367 li
345.448 265.988 li
346.929 266.734 li
347.501 266.879 li
347.769 267.43 li
347.455 268.06 li
347.64 268.503 li
350.224 268.843 li
351.188 268.606 li
352.503 268.545 li
353.827 268.177 li
354.912 267.223 li
355.968 266.162 li
354.953 264.583 li
cp
302.122 243.422 mo
301.787 242.396 li
301.665 241.865 li
301.709 241.59 li
301.759 241.24 li
301.126 240.886 li
300.821 240.825 li
300.821 240.481 li
301.759 240.481 li
301.362 239.788 li
300.855 239.488 li
300.625 239.089 li
300.821 238.637 li
300.702 238.094 li
299.949 236.389 li
299.909 236.007 li
300.25 235.733 li
300.443 235.326 li
300.364 234.984 li
299.77 234.032 li
298.919 234.322 li
298.128 235.059 li
297.742 235.565 li
298.203 237.117 li
298.409 238.347 li
298.581 240.382 li
298.337 241.715 li
298.805 241.464 li
299.012 241.963 li
299.623 241.24 li
299.928 241.584 li
299.121 242.702 li
298.983 243.531 li
299.481 243.77 li
300.545 243.097 li
300.364 243.588 li
300.021 243.904 li
299.806 244.2 li
299.928 245.03 li
300.571 245.134 li
302.555 245.021 li
302.979 245.219 li
302.725 244.353 li
302.122 243.422 li
cp
.49427 .41117 .412055 .0505074 cmyk
f
354.953 264.583 mo
354.044 262.962 li
353.661 261.068 li
353.721 259.157 li
353.26 257.512 li
351.889 256.671 li
350.565 256.241 li
349.125 256.54 li
349.005 254.966 li
349.084 253.436 li
349.619 251.294 li
350.629 249.474 li
351.036 248.545 li
351.488 247.721 li
352.222 247.166 li
352.392 246.205 li
351.82 246.014 li
351.202 245.734 li
350.45 246.284 li
349.864 247.074 li
349.647 248.376 li
349.061 249.319 li
348.415 251.714 li
347.248 252.657 li
346.606 252.875 li
345.609 252.293 li
344.151 251.568 li
343.565 250.48 li
343.154 248.521 li
342.453 247.215 li
342.103 245.69 li
342.998 241.985 li
343.173 241.551 li
343.053 241.186 li
335.066 243.372 li
331 242.573 li
331.407 241.41 li
332.085 240.76 li
337.784 238.129 li
337.991 236.422 li
338.549 234.826 li
338.466 233.891 li
339.338 231.992 li
340.575 230.197 li
341.517 228.56 li
341.89 228.158 li
342.314 228.225 li
342.73 228.108 li
342.956 227.682 li
343.016 227.203 li
343.154 226.594 li
343.372 226.006 li
343.482 225.377 li
343.385 224.745 li
343.09 224.185 li
342.721 223.846 li
342.767 222.699 li
342.181 222.287 li
341.415 220.742 li
340.815 220.393 li
340.289 219.84 li
339.938 219.012 li
337.83 218.727 li
336.104 217.275 li
334.175 216.395 li
330.465 217.983 li
328.716 217.982 li
326.635 217.554 li
326.622 217.551 li
325.764 218.206 li
323.824 218.99 li
323.002 219.126 li
322.091 219.535 li
322.548 220.472 li
324.082 222.175 li
323.133 222.057 li
322.229 221.793 li
322.6 223.191 li
322.374 223.985 li
321.935 224.729 li
321.673 225.981 li
321.302 225.811 li
321.044 225.593 li
320.87 225.273 li
320.735 224.804 li
321.469 224.58 li
321.597 224.083 li
321.219 222.347 li
320.823 221.68 li
320.735 221.222 li
320.779 220.781 li
320.986 220.023 li
321.033 219.682 li
320.935 218.088 li
320.75 217.266 li
320.43 216.807 li
319.972 216.891 li
319.133 217.974 li
318.599 218.329 li
319.3 215.916 li
319.235 214.722 li
318.294 213.754 li
317.518 213.244 li
316.435 212.952 li
315.579 212.639 li
314.806 212.54 li
314.114 212.546 li
313.378 212.891 li
312.965 213.67 li
312.682 214.147 li
312.5 214.6 li
312.669 215.97 li
312.55 216.434 li
312.354 216.847 li
311.863 217.188 li
312.026 216.27 li
311.972 215.748 li
311.529 214.897 li
311.441 214.497 li
311.875 213.986 li
312.085 213.23 li
311.639 212.467 li
310.986 212.106 li
310.309 211.645 li
309.958 211.287 li
309.105 210.697 li
308.211 210.057 li
307.572 209.495 li
306.86 209.151 li
306.042 209.174 li
306.14 210.04 li
306.556 211.331 li
307.481 212.198 li
308.332 212.607 li
308.964 212.765 li
309.269 213.124 li
309.229 213.508 li
308.811 213.754 li
308.255 213.751 li
307.797 213.542 li
307.419 213.206 li
306.708 212.314 li
306.25 211.882 li
305.868 211.814 li
305.715 212.417 li
305.912 212.574 li
308.647 215.47 li
308.989 216.039 li
309.378 217.177 li
309.697 217.602 li
309.697 217.947 li
309.062 217.92 li
308.724 217.552 li
308.495 216.993 li
308.179 216.388 li
307.405 215.529 li
306.864 215.161 li
306.624 215.47 li
306.435 216.784 li
305.617 219.451 li
305.436 220.84 li
305.291 221.101 li
304.963 220.911 li
304.637 220.404 li
304.487 219.682 li
304.487 217.188 li
304.615 216.843 li
305.018 216.361 li
305.098 216.216 li
305.051 215.834 li
304.843 215.479 li
304.792 215.088 li
304.607 214.62 li
304.171 214.611 li
303.667 214.886 li
303.274 215.279 li
302.991 214.375 li
303.252 213.74 li
303.681 213.256 li
303.906 212.799 li
303.572 212.06 li
302.783 211.782 li
301.138 211.809 li
301.138 212.226 li
301.333 212.646 li
301.163 212.819 li
300.789 212.744 li
300.364 212.417 li
299.928 212.168 li
299.448 212.25 li
299.005 212.56 li
298.674 212.99 li
299.492 212.928 li
300.178 213.138 li
300.495 213.651 li
300.2 214.518 li
299.557 214.052 li
299.343 214.233 li
299.484 214.752 li
299.917 215.279 li
300.495 215.513 li
301.665 215.534 li
302.053 215.664 li
302.402 216.591 li
302.238 217.845 li
301.606 218.874 li
300.531 219.126 li
300.531 219.473 li
301.392 219.834 li
301.748 219.889 li
301.748 220.236 li
300.854 220.463 li
300.389 220.652 li
300.2 220.84 li
299.997 221.444 li
299.557 221.158 li
298.838 220.236 li
298.362 220.795 li
298.688 222.041 li
299.612 224.042 li
298.325 223.157 li
297.762 223.173 li
297.01 223.867 li
296.69 224.015 li
296.454 223.718 li
296.309 223.209 li
296.266 222.729 li
296.433 222.583 li
297.235 222.057 li
297.479 221.793 li
297.442 221.571 li
297.163 220.75 li
297.148 220.236 li
297.421 219.752 li
297.857 219.29 li
298.129 218.771 li
297.573 217.302 li
297.377 216.079 li
297.345 214.872 li
297.479 214.102 li
296.44 214.422 li
296.233 215.8 li
296.345 217.488 li
296.266 218.744 li
295.975 219.246 li
295.677 219.453 li
294.568 219.473 li
293.955 219.341 li
293.846 218.964 li
294.129 217.602 li
293.039 217.995 li
292.269 218.622 li
292.204 219.398 li
293.213 220.236 li
292.476 221.426 li
292.56 222.12 li
293.261 222.438 li
294.401 222.52 li
294.063 223.182 li
293.541 223.318 li
292.269 222.937 li
292.745 223.795 li
293.213 224.457 li
292.832 224.375 li
292.494 224.257 li
292.2 224.235 li
291.963 224.457 li
291.655 224.003 li
291.415 223.545 li
291.222 223.06 li
291.081 222.52 li
290.903 223.232 li
290.677 223.74 li
289.533 225.196 li
289.409 225.573 li
289.497 226.929 li
289.442 228.325 li
289.617 228.773 li
290.14 228.298 li
290.39 227.654 li
290.521 226.267 li
290.75 225.6 li
291.328 226.076 li
292.047 226.287 li
292.734 226.625 li
293.213 227.5 li
293.224 228.341 li
292.755 228.66 li
290.914 228.642 li
290.695 228.873 li
290.765 229.385 li
290.95 229.904 li
291.081 230.162 li
291.622 230.477 li
292.08 230.445 li
292.538 230.264 li
293.05 230.162 li
293.922 229.838 li
295.103 228.343 li
295.927 227.881 li
296.266 229.401 li
295.873 230.481 li
297.185 232.637 li
296.57 233.996 li
296.723 234.317 li
296.825 234.692 li
296.875 235.106 li
296.868 235.514 li
297.257 234.937 li
297.741 234.461 li
298.318 234.131 li
299.001 233.996 li
298.249 232.975 li
298.184 232.515 li
298.674 232.099 li
298.38 231.182 li
297.566 229.879 li
297.148 229.023 li
298.166 229.007 li
298.489 228.354 li
298.598 227.463 li
299.001 226.738 li
299.721 226.611 li
300.2 227.187 li
300.046 228.599 li
300.559 228.844 li
300.293 229.93 li
300.078 232.936 li
300.937 233.502 li
301.8 233.541 li
302.627 234.186 li
303.031 233.678 li
303.505 232.434 li
303.309 230.977 li
303.638 229.892 li
303.582 228.947 li
303.267 228.463 li
303.241 228.071 li
303.383 227.677 li
304.091 227.373 li
304.724 226.682 li
305.098 226.362 li
305.236 226.852 li
305.443 227.196 li
306.042 227.881 li
304.998 228.047 li
304.656 228.732 li
304.873 229.662 li
305.943 229.863 li
306.368 230.635 li
305.739 231.141 li
305.286 231.793 li
306.003 232.503 li
306.532 232.614 li
306.896 233.097 li
306.628 233.696 li
306.559 234.374 li
305.628 234.343 li
304.735 234.758 li
304.119 234.797 li
304.138 235.03 li
304.41 235.435 li
304.635 236.391 li
304.672 236.9 li
304.477 237.366 li
304.685 237.876 li
304.896 237.92 li
305.247 238.153 li
305.633 238.517 li
306.489 238.208 li
306.631 238.51 li
306.199 239.184 li
305.269 240.275 li
305.239 240.897 li
305.498 241.95 li
305.904 242.975 li
306.348 243.515 li
307.056 243.379 li
308.019 241.943 li
308.647 241.584 li
311.252 241.584 li
310.383 242.049 li
308.544 242.563 li
307.685 243.817 li
306.764 244.096 li
305.955 244.545 li
306.624 245.788 li
306.042 245.788 li
306.042 246.163 li
306.402 246.481 li
306.929 247.124 li
307.234 247.336 li
308.706 247.345 li
309.411 247.53 li
309.697 248.266 li
309.283 248.843 li
307.296 249.326 li
306.624 249.948 li
307.307 250.311 li
309.204 250.893 li
309.697 251.499 li
309.043 251.934 li
308.506 253.072 li
307.568 255.653 li
307.845 256.045 li
308.179 256.41 li
308.433 256.549 li
308.789 256.34 li
309.087 256.41 li
309.585 256.774 li
309.959 257.204 li
310.621 258.298 li
308.748 257.758 li
307.409 258.181 li
305.893 258.951 li
305.715 260.566 li
306.021 260.847 li
306.169 260.489 li
306.44 259.448 li
307.312 259.311 li
308.32 259.957 li
308.343 260.566 li
308.625 260.568 li
309.218 260.225 li
310.003 260.566 li
311.024 262.324 li
311.583 262.511 li
312.193 262.768 li
312.484 263.114 li
311.863 263.617 li
312.266 264.289 li
313.019 265.28 li
313.389 265.88 li
313.622 266.574 li
313.694 267.08 li
313.923 267.463 li
314.603 267.796 li
315.536 267.383 li
316.532 267.214 li
317.367 266.812 li
318.123 266.084 li
319.024 265.462 li
319.942 265.179 li
321.952 262.699 li
324.088 262.464 li
326.599 261.925 li
331.222 260.465 li
332.869 260.795 li
332.473 263.234 li
333.423 264.715 li
334.743 264.468 li
335.993 263.983 li
338.453 263.503 li
339.099 263.278 li
339.73 262.996 li
340.667 262.801 li
341.267 261.866 li
342.015 261.1 li
343.44 262.367 li
345.448 265.988 li
346.929 266.734 li
347.501 266.879 li
347.769 267.43 li
347.455 268.06 li
347.64 268.503 li
350.224 268.843 li
351.188 268.606 li
352.503 268.545 li
353.827 268.177 li
354.912 267.223 li
355.968 266.162 li
354.953 264.583 li
cp
302.122 243.422 mo
301.787 242.396 li
301.665 241.865 li
301.709 241.59 li
301.759 241.24 li
301.126 240.886 li
300.821 240.825 li
300.821 240.481 li
301.759 240.481 li
301.362 239.788 li
300.855 239.488 li
300.625 239.089 li
300.821 238.637 li
300.702 238.094 li
299.949 236.389 li
299.909 236.007 li
300.25 235.733 li
300.443 235.326 li
300.364 234.984 li
299.77 234.032 li
298.919 234.322 li
298.128 235.059 li
297.742 235.565 li
298.203 237.117 li
298.409 238.347 li
298.581 240.382 li
298.337 241.715 li
298.805 241.464 li
299.012 241.963 li
299.623 241.24 li
299.928 241.584 li
299.121 242.702 li
298.983 243.531 li
299.481 243.77 li
300.545 243.097 li
300.364 243.588 li
300.021 243.904 li
299.806 244.2 li
299.928 245.03 li
300.571 245.134 li
302.555 245.021 li
302.979 245.219 li
302.725 244.353 li
302.122 243.422 li
cp
.0152285 .0084535 .0084535 0 cmyk
@
374.675 203.811 mo
376.155 203.452 li
377.632 202.628 li
378.527 201.936 li
379.594 202.161 li
380.475 201.697 li
381.508 200.898 li
384 201.787 li
386.547 202.189 li
387.35 202.432 li
386.833 203.611 li
385.546 204.529 li
384.779 205.718 li
385.269 206.271 li
385.901 206.621 li
386.298 206.629 li
386.704 206.438 li
388.061 205.984 li
390.188 205.741 li
390.631 206.23 li
390.552 207.028 li
391.438 207.95 li
391.761 208.686 li
392.573 208.625 li
393.533 208.454 li
394.608 208.11 li
395.674 208.103 li
396.735 208.908 li
397.912 209.671 li
399.074 209.901 li
400.21 210.033 li
401.114 210.426 li
402.01 211.005 li
401.465 211.625 li
400.86 211.975 li
400.33 211.77 li
399.896 212.046 li
398.867 213.139 li
397.731 214.089 li
396.989 214.811 li
396.066 215.101 li
395.513 215.563 li
395.12 216.274 li
393.74 217.254 li
392.758 218.66 li
392.292 219.71 li
391.724 220.751 li
392.038 221.297 li
392.629 221.842 li
391.969 224.031 li
388.231 225.603 li
386.64 225.079 li
385.975 223.732 li
384.923 222.82 li
384.18 222.29 li
383.599 221.637 li
383.017 222.212 li
382.551 222.949 li
382.329 223.817 li
382.016 224.736 li
380.729 224.636 li
379.349 224.15 li
378.629 223.685 li
377.867 224.176 li
377.134 225.166 li
376.243 225.242 li
375.528 224.768 li
374.988 225.684 li
374.43 226.902 li
374.13 228.044 li
374.983 229.147 li
375.634 230.398 li
372.469 229.895 li
370.767 229.155 li
369.797 230.603 li
368.237 231.343 li
366.849 232.288 li
366.733 232.949 li
366.761 233.468 li
366.512 234.036 li
365.506 235.388 li
364.86 236.08 li
364.205 236.199 li
363.545 236.507 li
364.048 237.777 li
365.797 238.075 li
367.983 241.254 li
367.172 242.047 li
366.729 243.316 li
366.549 246.339 li
366.281 247.672 li
366.563 248.627 li
367.057 249.502 li
366.415 250.779 li
365.428 251.634 li
365.695 254.265 li
367.49 253.842 li
368.569 254.195 li
369.834 255.252 li
370.701 255.664 li
372.981 255.116 li
373.991 255.862 li
374.499 258.747 li
373.549 258.689 li
372.479 258.491 li
371.398 259.417 li
371.647 260.902 li
371.657 261.659 li
371.56 262.569 li
371.131 263.09 li
370.784 263.707 li
370.411 265.124 li
369.719 266.476 li
368.598 266.852 li
367.514 267.384 li
366.941 267.986 li
366.369 268.511 li
365.714 268.156 li
365.063 267.534 li
363.416 268.278 li
361.98 269.158 li
361.266 268.953 li
360.85 268.432 li
358.852 267.775 li
358.183 266.98 li
357.426 266.534 li
357.136 266.923 li
356.776 267.012 li
356.351 266.623 li
355.968 266.162 li
354.953 264.583 li
354.044 262.963 li
353.661 261.068 li
353.721 259.157 li
353.26 257.512 li
351.889 256.671 li
350.565 256.241 li
349.125 256.54 li
349.005 254.966 li
349.084 253.436 li
349.619 251.294 li
350.629 249.474 li
351.036 248.545 li
351.488 247.721 li
352.222 247.166 li
352.392 246.205 li
351.82 246.014 li
351.202 245.734 li
350.45 246.284 li
349.864 247.074 li
349.402 245.599 li
349.324 244.608 li
348.774 244.326 li
348.853 243.693 li
348.23 243.539 li
347.709 244.297 li
346.269 244.617 li
344.922 244.232 li
345.092 243.26 li
344.834 242.638 li
344.446 242.45 li
344.128 242.1 li
343.971 241.697 li
344.073 241.272 li
344.262 240.727 li
344.35 240.15 li
344.299 239.869 li
344.267 239.588 li
344.119 239.232 li
344.207 238.808 li
344.433 238.289 li
344.465 237.684 li
341.069 237.469 li
337.784 238.129 li
337.991 236.422 li
338.549 234.826 li
338.466 233.891 li
339.338 231.992 li
340.575 230.197 li
341.517 228.56 li
341.89 228.158 li
342.314 228.225 li
342.73 228.108 li
342.956 227.682 li
343.016 227.203 li
343.154 226.594 li
343.371 226.006 li
343.482 225.377 li
343.385 224.745 li
343.09 224.185 li
342.721 223.846 li
342.767 222.699 li
342.181 222.287 li
341.415 220.742 li
340.815 220.394 li
340.289 219.84 li
339.938 219.012 li
341.941 218.424 li
343.837 217.509 li
345.323 217.01 li
345.725 215.366 li
346.454 214.575 li
347.598 214.08 li
348.138 213.38 li
348.507 212.451 li
349.199 211.714 li
350.071 211.898 li
350.325 212.234 li
351.446 211.452 li
353.578 207.481 li
353.795 207.005 li
354.053 206.568 li
354.399 206.29 li
354.759 206.038 li
355.119 205.497 li
355.433 204.9 li
360.149 203.607 li
364.896 202.957 li
364.514 205.66 li
365.87 205.339 li
367.236 205.435 li
367.614 205.67 li
367.998 205.85 li
368.344 205.547 li
368.644 205.181 li
369.548 204.561 li
369.304 201.838 li
370.147 200.801 li
372.423 200.03 li
374.121 201.831 li
374.121 203.034 li
374.675 203.811 li
cp
.49427 .41117 .412055 .0505074 cmyk
ef
374.675 203.811 mo
376.155 203.452 li
377.632 202.628 li
378.527 201.936 li
379.594 202.161 li
380.475 201.697 li
381.508 200.898 li
384 201.787 li
386.547 202.189 li
387.35 202.432 li
386.833 203.611 li
385.546 204.529 li
384.779 205.718 li
385.269 206.271 li
385.901 206.621 li
386.298 206.629 li
386.704 206.438 li
388.061 205.984 li
390.188 205.741 li
390.631 206.23 li
390.552 207.028 li
391.438 207.95 li
391.761 208.686 li
392.573 208.625 li
393.533 208.454 li
394.608 208.11 li
395.674 208.103 li
396.735 208.908 li
397.912 209.671 li
399.074 209.901 li
400.21 210.033 li
401.114 210.426 li
402.01 211.005 li
401.465 211.625 li
400.86 211.975 li
400.33 211.77 li
399.896 212.046 li
398.867 213.139 li
397.731 214.089 li
396.989 214.811 li
396.066 215.101 li
395.513 215.563 li
395.12 216.274 li
393.74 217.254 li
392.758 218.66 li
392.292 219.71 li
391.724 220.751 li
392.038 221.297 li
392.629 221.842 li
391.969 224.031 li
388.231 225.603 li
386.64 225.079 li
385.975 223.732 li
384.923 222.82 li
384.18 222.29 li
383.599 221.637 li
383.017 222.212 li
382.551 222.949 li
382.329 223.817 li
382.016 224.736 li
380.729 224.636 li
379.349 224.15 li
378.629 223.685 li
377.867 224.176 li
377.134 225.166 li
376.243 225.242 li
375.528 224.768 li
374.988 225.684 li
374.43 226.902 li
374.13 228.044 li
374.983 229.147 li
375.634 230.398 li
372.469 229.895 li
370.767 229.155 li
369.797 230.603 li
368.237 231.343 li
366.849 232.288 li
366.733 232.949 li
366.761 233.468 li
366.512 234.036 li
365.506 235.388 li
364.86 236.08 li
364.205 236.199 li
363.545 236.507 li
364.048 237.777 li
365.797 238.075 li
367.983 241.254 li
367.172 242.047 li
366.729 243.316 li
366.549 246.339 li
366.281 247.672 li
366.563 248.627 li
367.057 249.502 li
366.415 250.779 li
365.428 251.634 li
365.695 254.265 li
367.49 253.842 li
368.569 254.195 li
369.834 255.252 li
370.701 255.664 li
372.981 255.116 li
373.991 255.862 li
374.499 258.747 li
373.549 258.689 li
372.479 258.491 li
371.398 259.417 li
371.647 260.902 li
371.657 261.659 li
371.56 262.569 li
371.131 263.09 li
370.784 263.707 li
370.411 265.124 li
369.719 266.476 li
368.598 266.852 li
367.514 267.384 li
366.941 267.986 li
366.369 268.511 li
365.714 268.156 li
365.063 267.534 li
363.416 268.278 li
361.98 269.158 li
361.266 268.953 li
360.85 268.432 li
358.852 267.775 li
358.183 266.98 li
357.426 266.534 li
357.136 266.923 li
356.776 267.012 li
356.351 266.623 li
355.968 266.162 li
354.953 264.583 li
354.044 262.963 li
353.661 261.068 li
353.721 259.157 li
353.26 257.512 li
351.889 256.671 li
350.565 256.241 li
349.125 256.54 li
349.005 254.966 li
349.084 253.436 li
349.619 251.294 li
350.629 249.474 li
351.036 248.545 li
351.488 247.721 li
352.222 247.166 li
352.392 246.205 li
351.82 246.014 li
351.202 245.734 li
350.45 246.284 li
349.864 247.074 li
349.402 245.599 li
349.324 244.608 li
348.774 244.326 li
348.853 243.693 li
348.23 243.539 li
347.709 244.297 li
346.269 244.617 li
344.922 244.232 li
345.092 243.26 li
344.834 242.638 li
344.446 242.45 li
344.128 242.1 li
343.971 241.697 li
344.073 241.272 li
344.262 240.727 li
344.35 240.15 li
344.299 239.869 li
344.267 239.588 li
344.119 239.232 li
344.207 238.808 li
344.433 238.289 li
344.465 237.684 li
341.069 237.469 li
337.784 238.129 li
337.991 236.422 li
338.549 234.826 li
338.466 233.891 li
339.338 231.992 li
340.575 230.197 li
341.517 228.56 li
341.89 228.158 li
342.314 228.225 li
342.73 228.108 li
342.956 227.682 li
343.016 227.203 li
343.154 226.594 li
343.371 226.006 li
343.482 225.377 li
343.385 224.745 li
343.09 224.185 li
342.721 223.846 li
342.767 222.699 li
342.181 222.287 li
341.415 220.742 li
340.815 220.394 li
340.289 219.84 li
339.938 219.012 li
341.941 218.424 li
343.837 217.509 li
345.323 217.01 li
345.725 215.366 li
346.454 214.575 li
347.598 214.08 li
348.138 213.38 li
348.507 212.451 li
349.199 211.714 li
350.071 211.898 li
350.325 212.234 li
351.446 211.452 li
353.578 207.481 li
353.795 207.005 li
354.053 206.568 li
354.399 206.29 li
354.759 206.038 li
355.119 205.497 li
355.433 204.9 li
360.149 203.607 li
364.896 202.957 li
364.514 205.66 li
365.87 205.339 li
367.236 205.435 li
367.614 205.67 li
367.998 205.85 li
368.344 205.547 li
368.644 205.181 li
369.548 204.561 li
369.304 201.838 li
370.147 200.801 li
372.423 200.03 li
374.121 201.831 li
374.121 203.034 li
374.675 203.811 li
cp
.0152285 .0084535 .0084535 0 cmyk
@
426.521 313.704 mo
426.3 314.148 li
425.61 314.134 li
425.101 314.111 li
424.473 314.215 li
424.011 314.188 li
423.525 314.406 li
422.992 314.47 li
422.949 315.236 li
423.306 315.769 li
423.365 316.405 li
423.136 317.132 li
422.136 317.6 li
421.327 316.895 li
420.838 316.489 li
420.474 316.04 li
419.304 317.296 li
418.771 318.296 li
418.6 319.361 li
418.237 319.616 li
418.023 319.08 li
417.49 318.502 li
417.535 319.018 li
417.642 320.126 li
417.301 320.126 li
417.15 319.759 li
416.959 319.672 li
416.501 319.979 li
416.066 320.252 li
415.769 319.884 li
415.407 318.655 li
415.557 317.549 li
415.897 316.144 li
415.962 315.355 li
416.332 314.677 li
417.011 313.833 li
417.647 312.862 li
418.113 309.635 li
418.75 308.844 li
419.599 308.228 li
420.651 307.806 li
421.781 307.85 li
422.658 308.41 li
422.907 309.609 li
423.706 310.72 li
424.726 311.546 li
425.533 312.589 li
426.433 313.508 li
426.521 313.704 li
cp
.49427 .41117 .412055 .0505074 cmyk
ef
426.521 313.704 mo
426.3 314.148 li
425.61 314.134 li
425.101 314.111 li
424.473 314.215 li
424.011 314.188 li
423.525 314.406 li
422.992 314.47 li
422.949 315.236 li
423.306 315.769 li
423.365 316.405 li
423.136 317.132 li
422.136 317.6 li
421.327 316.895 li
420.838 316.489 li
420.474 316.04 li
419.304 317.296 li
418.771 318.296 li
418.6 319.361 li
418.237 319.616 li
418.023 319.08 li
417.49 318.502 li
417.535 319.018 li
417.642 320.126 li
417.301 320.126 li
417.15 319.759 li
416.959 319.672 li
416.501 319.979 li
416.066 320.252 li
415.769 319.884 li
415.407 318.655 li
415.557 317.549 li
415.897 316.144 li
415.962 315.355 li
416.332 314.677 li
417.011 313.833 li
417.647 312.862 li
418.113 309.635 li
418.75 308.844 li
419.599 308.228 li
420.651 307.806 li
421.781 307.85 li
422.658 308.41 li
422.907 309.609 li
423.706 310.72 li
424.726 311.546 li
425.533 312.589 li
426.433 313.508 li
426.521 313.704 li
cp
.0152285 .0084535 .0084535 0 cmyk
@
.694331 .632349 .621027 .583551 cmyk
%ADOBeginSubsetFont: Roboto-Light Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Roboto-Light def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 46 /period putdup 67 /C putdup 70 /F putdup 77 /M putdup 86 /V putdup 97 /a putdup 99 /c putdup 101 /e putdup 103 /g putdup 104 /h putdup 105 /i putdup 109 /m putdup 111 /o putdup 112 /p putdup 114 /r putdup 115 /s putdup 116 /t putdup 121 /y putdup 169 /copyright putdef/FontBBox {-744 -271 1146 1048} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings21 dict dup begin/.notdef <1C60D8A8C9B879BEDE> |-/space <1C60D8A8C9B879BEDE> |-/period <1C60D8A8C9B87DE052DAF2DBC128D720E2595608> |-/C <1C60D8A8C9B6747BB44878B23F86049CA257D46D48A1261C071844184873F7BA183ED0152D1D59A4ADDF6DE9D9DFB4EF8A18A1ED175E71E069D0EAA9FD842C798B44265C59E3C86183D506201A1F237BD0C8BC7F53538657CC18604B18157F7985DA2E347DDB6D500C686C53D4C51C131AE75D3F41B9DCF5BDA8378A172CBC4283CC7B961501DDC25D42B54111> |-/F <1C60D8A8C9B7FA137890F7F72C2AB1E2E52E8A73E44884901462C628970059482119B179DDADD1E1> |-/M <1C60D8A8C9B696EC04C08D17F96757A0750617AD912DAFAE38E30548A0467FB1B909B330834E35AC6DA3E862083FD4D7486CF6817357CD8D056F9A39932BC6021F7C238D3A> |-/V <1C60D8A8C9B7D2D01C90D387D361A2C35E8BCEA1D62F9C5E84DB3B209CD4B543787B3B8626FF1F78E852C3> |-/a <1C60D8A8C9B78181CF89FCCF642CFE9EA6860C048952730488D11972FFEF731BCAC8FFD7BD35754285A42F58217D37D3B5A5ADB70B00EB023D07E1621B4629DB39742A4BAF69B15C9A346F05A04C84874D31A2A6539DB37599170F61B3FA185D890E2CDC08F431CFDF3F9AB01C8CBB885E4E5678122366CDEEB66FC91C67F6A3A27EA9053126B807BC84791456CF37218760BF68E4DEEDACDF30140D613B9644A092713497283E70308303F32D20BF612686475E925A32DFBB4496F07B80580721198B9F5474F5372586E0A1A032> |-/c <1C60D8A8C9B7B577732738133CE9E5199706BFAF63B73D6D4D7F3719EEBB2794748FA303A3F18BE7DF65FD1FB9975A373A90990DCE0CD231BE178190FEF1D28ECE726723597E0E7EEB20DA677A3E87C53E008FEB0C9B62D537FBED4564E1B5AC7984271A65138F613D4F4AD7DA50A9A4A1C4D7D12C79A396682524361105ABE92A6984D9D989EC657FB2C3EE> |-/e <1C60D8A8C9B7B8EB25DECEDDB0EFF3948CD468921B6A30334F55EF106F35574F0FDE794219DDED2DA14EE9C51394D51873DDF8BCA064C45CF6A746C6C33986DFA6509FCBBF5B22B6C30F77255AED798DEC9143FB40D845056EFB7F355BCF768F1B59CCE415894890F4B50C82378998835AAF1B2361CFBD3E5D082308CC975D2E6566694B6A2DCB76AC8DDF3E8C1D65A1BFBB5B0DAA75F0> |-/g <1C60D8A8C9B7EE7C2F429DA4C282EF8AE244E3D23E25ED0A846D576A442E0FC75E8C646691153BD5D22818A1D6265B0370C36D905F70FA2F6F897933C24342FEB2DEDD20596B89FBB4C60608AEBB8B8A8DD892E5B706951F2AB6D35B267912219F3726B91D50739096F9D9AAAAC79C4FBDE14433110B66A47419C8ADEB595A2A843E14F14BEDFFD9CF6EF388A65E1950326BC85822229F5A393537F43D48159A388BEFEDAEE26A0898C64C6D9497C1E19BA41B0FFA521230778001C7113A4B620ED7063530131DC35A> |-/h <1C60D8A8C9B7EE7C19EBED65F02B761F1813C71640691DFA56D5D13D983CC70AD7F215039E1E190ADE282470089A084FE2297D5D2968BD7A532C5A03AFC6B18C8001194440D42077EAAE292E55EBFECAAE796B35396161B423> |-/i <1C60D8A8C9B88997F3B61BAB998BFD8FBD37E68D323462A94E3AF87651213078> |-/m <1C60D8A8C9B598EE5412DCE7BFF159EC67BFACAC413284E83E9CE6274754CC58E6CF3DA7C2D656EC74232675D4AD6AF7CC3F93C7302BCA64E337A5467C03413EC27A21D2ECEEC967FCDEA45BDA78B9A1424DE7A1FBA8D310A8A6113D38465F9C65E4597A53EFD492C85FE64CFB5EF84EB54139A9BCD96386DFACDAFBA1D54C71848E9612C9F415D47B81CE9ADAE71CF6C8A4B22F75D857FC81B0941E46F410B15FC55803875074> |-/o <1C60D8A8C9B7EE7C596447C564123A2E2BD67D1934DBBF29AFAEAAE04814BEF077BE3496F670F616A330629EA9C4677BBCA1C86B76B01830B2BDB3932F3A916103FE53FAF170DEC8E0DAFE3DBC54A604A64A4ACBB42989FE66B5FB794440662F252A670E5BF88802F0E8695AAA731B5AAFC10B3F2E73AF39DD63EAF3EB67D9AA95521F9ACF> |-/p <1C60D8A8C9B7EE7C16066AEB31BC1D50A6012C82270105001EFEF0953BF70FA5E6D6C7EA4CF9DEF7FFA56DFA2F419E2E4A770A84446E4BAD69EAB18044838F7ACC57A3677CC0D79AA3124B1C2389B869E561C5CCF35BCE41E3665EC5A9068073B9DD60DF7923346E5C5D5DAF17429AF75723C69FCC1B1758497AB2266C1403B830B9C8A0DC0495F7F1AAA745C6475187E59D> |-/r <1C60D8A8C9B816D2CD9E7E1576FC93ED2118319328882C00DD23034A7E3AD375EDE713635D86A03EE009D8725F2F46F79500FB77AFFBCB6A8328001773C9D52FF2B8FBDA351A94D866CF9B> |-/s <1C60D8A8C9B7BEB141370159723DAF4160B0EA53204AB4E1E50594107700AD6EF42AFEBC9AD448D66C53908F15A937AEC1FFFFC98C0567D9A356E6C355E54E05BBCEDB1DF03B48D4E730C25DE21DC37A1ACC3654BDDCD111B07A2E960E88F5C333CA44C870FC29C2EB2D3A50F540CDE4A47F53F1139D38B2903C30FA208EF9B4338054D6004AFFBE26898264263DB03CEDB6B68DDEC845C1E438A69222A3529384BC7F96133112B4C5CD7BFEC98EC85AAC13B2A92395F518973C7D0892453B5E> |-/t <1C60D8A8C9B81E5FA4B9BD6D27CEA1E2E3678A2B317013ED54F9E29FCD2F0531AD2610B6D6490B002F6DA07A5475C112424CA993CE2952471901CE529684D59B1EDF2E3477936F25D39E621A41D7BFE540FB933B03DB12F8BBB98D264D475A4703A4D0CE> |-/y <1C60D8A8C9B752AB6199BEE42C14215B0ABE7188848D65C43051962701F9A6317C00A5A63FE4868A0782B6276A2426FAB3497952B634FCEB04F921C29095186E785286D65A8251D2AB05D94AB47AB8E08223CC14469A9BEFDD795505ABFD9AFBD907851F> |-/copyright <1C60D8A8C9B6D24F7C03A9BBA01D6C0EA5E7D58BA86BBA2C5FC29CDC6271A8FFEBE42E796BCF3C17C7E9466EABD0FDBEEC0A2936B3CF4F23EC92CD48ACE06E864C396CCF84D70E27C21F425A4C66E4D8EB7965173FB9692064B0A0F8764238ED413A0C006457C7EF80A435820B31E0EB6ED41F912BC1468603D33F0F0160393498915C69397D8F038DDD4934BE34D72F66C94294E9C687DA88408AE45A41AA2D62F402154458AD8322E63740FB992D9E0908BA9095DB441A709BD5784A7900ABE5CBAF0DF98B39B287BD0CED19FBFE27B03763C6C5FDC7C86DBB6406A7C649BB7CA1025159A408262B1A4883DD61514C75BB2500D04D96E227D0448D588AB9F9CDCF8E836E76> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/LXJOUJ+Roboto-Light /Roboto-Light findfont ct_VMDictPut/LXJOUJ+Roboto-Light*1 [32{/.notdef}rp /space 13{/.notdef}rp /period 20{/.notdef}rp /C 2{/.notdef}rp /F 6{/.notdef}rp /M 8{/.notdef}rp /V 10{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g /h /i 3{/.notdef}rp /m /.notdef /o /p /.notdef /r /s /t 4{/.notdef}rp /y 47{/.notdef}rp /copyright 86{/.notdef}rp]LXJOUJ+Roboto-Light nfLXJOUJ+Roboto-Light*1 [8 0 0 -8 0 0 ]msf583.709 527.832 mo(Copyright \251 Free Vector Maps.com)[5.20898 4.5332 4.49023 3.99365 2.80273 1.89648 4.53711 4.5332 2.73633 2.0249 6.47461 2.02539 4.5918 2.72852 4.20117 4.20068 2.02539 4.8418 4.20117 4.22461 2.6582 4.53271 2.80273 2.02539 7.01367 4.38086 4.5332 4.1543 1.98975 4.22461 4.5332 0 ]xsh%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/LXJOUJ+Roboto-Light*1 uf/LXJOUJ+Roboto-Light uf/Roboto-Light ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 9.0%%AI8_CreatorVersion: 21.0.0%%For: (Ted Grajeda) ()%%Title: (KR-EPS-01-0002.eps)%%CreationDate: 11/23/16 10:53 PM%%Canvassize: 16383%AI9_DataStream%Gb"-6pO;DKdO=qpIL!(d#%Kp#d#oBjcGhb%7fag$BYqubq;XU7Xf?7FY]6%Yp:^3JkI:3>ZPJe*;g!6E(84R%5O$^%]gen!YK_S!%InWiK(qR!e$6?K+h9e1-F8bC"lh8?]_g^,VNO&LXIlQ-jAH-[rJQ&HI:Ro4kgZeA1$tMCo[6<!7d-lqpos.rhO8JI2<hh[HH!6XF%#+_&aq]-GGZ9K5D$oS1iR*!Di#L^#/`I7!\J%-Nl-%0G0=@*JTP[be3`d\HoNM/.Ar[#sV!*atC90;LWRK/<LR^TH0_bOi")@rBY%Ijhp5N)q#WJL2iTAhA6gC-"n)keWu"5nD>q9;0mU$iOMc)$c*'_)*mMWtEP`aGul)Cqe7i9C@$5h#LGo$JEn?j4Sh^BYr89;e>HL%Rl7TqqOdfs51g4k%5SQ@\9&ZA>#MEYH\t-[Y^S<CaW3>B%O5fp)#T45EH5sQR<6GX5(P-uHlPWY[,0dB!@)?tJYa4^;</hhNEJH\%q\*W;s!c[b:\\'%BE=ZY3BtjK&?:!#Q%3bf;cVh`0D^af,a#TJ[l`e5A!]/^j%9AVEuY+Mq(+7/CC&,1Ta-hf32cepe*/T,s(Jrm%D?^SUVreK.Y,7!7;X88R56"_.oQ&B"LKD/)E^05+$_!^]CMmbu=]Dg]F<'#nR2+-,!hnrh)t"Qh7q[Dfh[EVEHuq:2SiD51G[<6^%5]P`Ub5H+E@9hnF?uQeS&%L7mXFP0`>J^KR2R?8d6YqdB]j=F^KM=E27P#$RNE0srcH:Of+1>o_jttV=-2sWq-`ia9D!sSC6Wi]"%m.TN:RJN(0SRHObEE[r+o=\>9haMjPi*-E<[g.<<kr6O:s"cfhk**X0_ieUZh^AB-4+b1-DSYC+&.3os!N'&BFKOX7iQ3L9*l?rJ%[d)FISW8oX44VI*9qI>KSXQ$!H>#sn/&-c_:`SaPku:kS@"ipIrE%F8ie[:<F^F`%GH'\%dM5L4RAR.EZmE;%$(TQT:<U]B;>3`*%^;0+Dh#7_"hoG,BWD!H[7%d;PW(Y6hO'?ZD%<n2@_$"%&=Ts+!7q6bq_,ZHL.^E9a1?io9E=sPt$/$T2kW6C\V#s[8P%9.#C<:4?%nCJ5JHP.Suc0[R0G#HQ#+"kt,O)&VrREd1<UQ.-F0);.@#i0C!2jkk8s8M-RP245MnBr[Hn)+,K<d17<<mSb2?"[--FRY3DhuI#B%r]Y<l\B%kRcX,&u=1.(1kp(.KX6Of"J`!I;-b%Y'4H7>`[bC-B`uVWQSph?;!57&(i6"OlVs5VX@PcGqg#PBnA06)m=+_qJh(JXn%N!pu/:;&<T:\lu'$Xg+07gg3Q-^mj&49&6-k_L8(:PO:d.@h0&hXlf=>>!INY[GQo0QM16j7I-.+LKbLF&m9MY!55K!iY-kIkh'@%=\>Q(=>W863A!38mnYPh8963;LU6>nkT_)TUnU+(cLg;%]-oA9"NJu.2co!9%<lPDC*dLrMiHp]eKOKF89dIBWcTB%OVT<j.G:6`%)U<<Mm5U:aSATg%D'u@oZs,$C8VS-R0BEeEMTrpS4;>qj`)OHPmA!7W)0hRWL#ri>LZI7.j;b$n&ES8d.EFfYb<U>4EQ`h@gnb7q%R68aqAnjm[Mu,\X3q.hN>J3';Mt(.1LCHg@#TtX'#<*I6/2<(AR=d:[DE47kX'ST=R_!#2,f.j,9r]<J>0u:HAK,`0fu[^TD)d(m%AfF;Q!-irXl^17V!"JoRB45#dSD+(.;J!FM=u^>J]=iq<:iur(42AihV8'U,Ici"+rgd9(+isH\j?8:36-ZZV2S^]kbB[_%O7nA-%al'C)mk7,N(^lkLnILFg!I>Rl6jO"_qm/M'_q2eplV*;EK[Ui-^[8>VG/r.qa%drQhs^9o))oCW#%93;ecI24b+WM2J%,RRF+7<t%,S5h"<],sV:.EJn\_llNI4oj5O#-Zl*b!6!/HPXF=6tdOHlc31HlNV)+joHPd'<L,MoL='s&6o;")R0r]:c@a^VA_(.T(<8r8o*s%"%_oGR,S&]@pFY/!t,!F[h^AmhV\b_<qNmeQ@atFCVY-9k80'_k4/K]VE[6NRNE,R*rVPf"/%Y_DI8@q/PbP+#@u=UX7?Yg+iJ;7%e=CKm%-/DY6abs?rW3b;qf?]6<.YsWiEh,uHf3iV#;[n[n:!Z]Nmi'(*u9>m'Qu_r9KPX1GC99nO*HIG4+^*A-r!lTG:Fd5h#Tu@%!i;bME,!iDB$'Mg5]&WaOlGo'<0_E;BGuI']i>Bi5)#ham1h#Z@A)iYcN<"HqBYu%!N#GaEAAG'Lrl;c2*7*'n<1N66;*HEV?W*s%/QM'8MF.?fr:uE!gD3T3LEHO"p<Z_.\-G1tI0j`,&peuaU#_WjFTWRrdGdIbSgHVo!%!\H$1P8q@(q.V&C;iM3[moa(,[Rm[FtPW%NIET[`Yl1aZbm4KD>2d3.Xg_!LCtCaagK3.E/&iG2LuG<nYKFncO*&f4;;Il*]"CrgV9&=^_(s="43[EK7VLe_ik_3!VlA/M,:uR%J?p<L$7l?)1]9_8hlQkf)q\=$,Z2i<=:EkJh_5#aR8a"YM5rj:Hog;%q_';oc.oY`F+TeT@c"F#rtF.I)uB":$4o"4=p'nfOdlBg%m1jCo>VNG)P^LFr-)!"[<AE(".$eaa1ES=M@rgC9$U3?,9E0NZfK@p`PPDnSC&V`u@k!iGQWp;J,s@p0MhESh_e'$fWRV.od)-ER%`GJo0.*/NiRZ8B-<Ml]3j>JR60^t4is7[O$l&5@/(^rW';uNm@pobb6Y9*I>&,a':ra.tjT3B5fW;lm`+QqPZYDE+aLkJ]gckNXO%A2:-]Af>=tWB+,&@PW)G9TEgDAoe,sBrYTEWZJZEcRUsZ>KpQV0r+P9`NfG8f`*B5QMo[g[^i7S`$Lj\l=^JIlS-R_M21S-r*TlQ%Inf;0,:)m\0.-CFXQ=^'hSp&Lenku5TQp=D\jZ*gqU[&QqnhEk:e\T)Rg*>NN96Wl*HsVhC%CGPIk]]>,r)drgV9(=Q-,UuTiYjj%VM0FHE0bV4?82lEQmm.h@MqA^QD3&'^.?@gA92&,FZc]2At%f!0Wlg/S63]#Kh_%"R_D]?\HM:[Pas3@+HT)&l_50O#@*b7/Zp]#%JA%I4]pdOZj/.N_.%7+@X^`lSZNKgu\S`fR/^">%A5O^W&<,Z.?a:cudJt.r%oY#).X^.]BeMnP22`G3>K*n@:EQgM9OC1?WA>8:%6c1@Q6'L:4B.C"uAn3%&o]2F[E0er`f\<A]D#:pE@o"gWG5jFs`oe53j#k?X-\9/Ki1&EKp5,ILiG5$Nh0F]D3G7\0KjKr!G;uMq%D+<O#GE>:Ln0jG`A1ZYK;F*tVp:W2sKZ8:eJFW.=^upHG)1EMD':"is1TUb[<9M4%Q-R;_W.q=Qf%6j8@-H0jg$.r[0lPk]\@sSk%[@IiaOZWKY%H),$@`,1P3j%pZ&t&hpqAjp9a?%"!S.Se6II9u>e3tMn8Fh>`Got>d!&nI7)U+:e(4YOUa\2OB8e2(T:<2U!?,+@q%+f_*a!*4qSpKmqPRd'Q9hm_fF``TV](m23QO[&8`1-HU<io:dkG&HKY)8k_MYtX132km4Uj^QGtIb!\U<g^js74:6_Nf0Zi7hM"4%i*:j`!@nd5%jLE5@:@UKGVm0YLEilI*"P7eO3]B'!R;38SX/k?15taf$HBFQpX41FF."hc7sd79lf7oXT]+4qQWR*>MlY(l>Ko6&%m9[Q]L.MA\p:XDsj3a6c,'=)!Zq>6nE/&86qA48*WWbkuXSG;/hp/A^l=4fY%-UT;mp[p>q0k0aIp?jB)79W=QW&E357S%t,e(nf%(/u6[&d"kKO2_:"<qA="I2GLN`r3\!*>X-u5LOF="O&FN%Lej.Yf!EiSTIC_04$+:ljHX7!qt$759(mYVahtU4?@X3O&$X<OmFXo%r'u?O*5EfY:J.](-["^7Rf3X_JaBa?Erg`01*-EKIGZ5Xl#=`-Il$8hFM7^;*VK`+rkE>S[;f.))Rb4,[V7A64`HP2-*e`,%4I/3%a3masF*f;)j4nQ]E"bJ$QF1rWYK[h8f/J:GCsYZkq4B1AA>\I2PqHVY%kT"2h:9lN%0_C#r5:c`b.IlGG'C?!Z?Tbq'qEWi-W@%;%Y+000B>NNq7L=hBK?MbV0f?CDL"")WXlA04=U=Jg%0$8'mpIjGRL9>Of9V'*aO0QVa>-N]`P8>NK2I58C3Xa>i5=gk^R!@2;kjF:%65T.CZF-;r\be4UE"ei_WU$JV."#-$UTaLFlJW>(h4h(jc.^mhY=4"I^9;G6f.)2C>8Pun5"(^An*RK)r`4eMd2i-g?4-)'-.3b%%Go`$50D@j$1CZNbS71`2[P]N^nLI>`a<`J!,PVg_oX'^&L[Y$2$GXUPYIj68r8>@t[ZOFVPp(RP[Fd/hDKMf&$ebC*cJSPk&"<;d%=]m@nk9fGHG-\T[AWlTTFSU>!.c`DO.aU6IPcq0+532!E#GKrC7!g8D&M^\i&.q-m?3rO?gnAnkk#NQ^Q.Kepq=ie*_<N_nq,+3/%bON2k2'7ciP0NE4bhJ2T&H5C.N15#kQ^bJ@^)+SQVlN0-c,qfi3VGd)BFWlE=Q\?-1P"43%sN:4GGk3;:C]%UZSdSD1)HcM97&co%Yl2f%rFPi2[MR6MP:J]>-^&/U5K@fVm@AX7J%NFeH/u/sp1A.domYN8bcoO&f-9]%p,fVY>.FO&me.T`_KOnBaSBiK3nr@KfSnof%:KZn1YA2)J-\X@ZX\PmGs.*sJ*=$)dj.RnNe2uAXQSqaTCo^D8X4-E!mNuuBB[=o[f*e"rk1Ns#H!HEpB(pj^I@/:Df&>hcR'.nW%PP"D$8f`*G/XD7J(D"'og>Ua`.+:b1ZqSLG<D52/Wb^j-ooR/Hp(JL.jbk?#q4sW89nLVl-El"pdqfk^V6Xm%ZkZ@fkN_S-/XJI\%h>Oj[@P@a.*r\72&nUUk9![.[0%UTiK#-6%%Qlhs#(q7mA";_fgoKZ8drI-gG5E=chmD!la(\l]6_;rO'7O.77/E5?2nt2n@]<53%@H!t@noc],>Riu8#$3^'B>IS*<XFLS34e(>U&hpA[]/Tu,C>u:?o26U#M5$G'#E5>E[J;9rHoWE5N^jTM+TlK9K$'96)ApW&S*-8%%;IEReY"h2i^"g%I2(`]/'gMF]aTNol;S/F"oTRRGnk]:DH3r^+h/3"0n[*M8&aECohHa!lEOGFZalY8Afk&[K)+nT2-;hf:B_7q%K?)nYENg'<N_e*>'.<Db4PPc_KBHZl(qcfC>J\bHW?/]MDQeZDPIKZ3D1<cP]RSUK_C1JS=(^stU@T4L/K5YFb4T<p=M#TT#4&\Q%P@1`cN.^N%EY.SThRs0k`Pd5p]mB8k*,hb\bJ?PYZFhs6S1]RQ/)fS\oCcoZQJGK*j.jueZ?#5H/Sj^[]+eF,hDUF\Xg>FVo%%FA%EHucQfj7D_n(sD;c-+OUiV?S_5(#EX/>#$G'UO`c;gnJIF4"4+)IJhtmhG!K1#5u=IOPG-Q7H5X\\<3b0"8!VKC6n?BmFZ8*Ps5b%[4Ats>T0cJK_<%@9!hU/=c&L?_$\ZZX;)t]`E"OoDcX;R\*>KCbI@A6gt>PEje/C`<_dPd4"KKT(]$c"D(!&<[h;tNH*R[u/'b[]%>]C^Zm`M#Fr3d;Cl!7nj/#.'pZ+=2qX08[CA/hSSkPaPCZ??)RC':`OX7kSsqs*V>+LmlbZ*i*a/KJ1]NSPGPQQ)]jeXOM>rp""a%qL$iH>^9GRT,opmgTRBol<q8s#R.[a4%l8Dq"F&"'Uu0eL=hpC$h83t(>:q[mtNSi]bK1=?8P$Ia#h[Fa\8KsGK]%$cuZ,`*ico]%Gj+PVofP(0=1dF!c-aFEmFjug&ag.G]",HghE5E]iD_<J=UKlWq=Sb&oX<Q`Qbsb(iVSQ39%[!EHFVoP&)gj_-4uifUGluId7o!?%mNul(o]rEng=F6oj'(TTYHJr^9=;2!a5+G:RoX((p,m&\Y1<>RCor&)pp)eqVtNCTXmPNZ,Dj![)rW^4N9n2[j%-ngFW3=EW>I)Y%9&[kOUJm0%NWpkn:.F3)ETVL+\s@?:d:>.Y*]6_gG,'E1UI95(4ZA7i-ebulm8<R(qUuH$7pET:(a]%8Z&J?PmQJ"M#X>Dlo;CC@%qVHe[?9ce;h=Z\Fhc[_[]?ff.Nq9d;DEU.aO8CR@Z"UN7'N;.595Np%\J!*!.eVHI7]mE:3P?HQSE3Trp3(0s@cQQCF"+I.H!/7*%W.i-qNU:uj@3[udZo3fldE9Jbe%)naIF[m-h+IPk^>(6Jj71K6/8f@Fe+*(`qb@!u;t%c1NCPT"qKR'"D^R0,nO_bI8]3@pV[4EI%F:tS8!(KO"?UnuHf-f=R$0V*K+ON47Fcsp<g3,6#H!*^B[1spSSK'a>Mjn3.H%0u/S-2;<P4.S['dXJaD_'Pl8mBt)S:Yc<5$q0i%)n?oaEhO@C&&r1S_oTqtLp=:"P3nL.9m5_KVsLF%WiX(CIF^J>^K*_jXgG+rXMr]FI_MQuB:nYBg\&M!>'!?6qL5`UVF>R&T#UHe%X-PVLYI&@,F/1tPX"!H'Ug`N22aq:,UaO49R(fnDL@q=RfWot<^,jj$]@E$-dT/k-XM$eUll1$!f[".s``9;]26-2$@_?W\Rs]WI%Zc=ZkHGBoVA;QX+9/!s+M0/O)I2=fn+*DJTd96SCg&CU5Xa.U\[a!O1^M]'HW*<#T2qI]=_8&+WAp!?fGO*If*N.c\Q"!@n<VQ:D%c@iA+p-l^+D83Z_E8I_aNQq.Ih8SMg@6"TKCN"^oc>=%L>NMF2;J9k=\C9?`ZhoHY>]+Dc<R*auCt3E`f!`SYEjMl9<fHEFp8t`N%hQ.c944[n`qn7IY\eEu5bO4`"f:k?>::%P'EkQe31H7.sh2VBniU0IDo!Eae]RIBfEdnG.^H6*<_L(ft[_9.s2LO4/%Sk=DSAIa5%D`D_&<3j$+9VkI#/QI[]JuMq_4\,gMTA"#(H"a&G[C\p)VK#O1^TBN@bh@7;/Rr-]\s_T01<_jnp/a#%@5YJ-asPEb[;9#0g!,i&%j.gG(Z@AEL]q*YnB(9]%4";Qi\Ykp/3]D:H/`i2Th,Z^LX[htaO25qP[GJSIXPLOK$<tWL>rZo[=+s7d4PC<`7X+Qc\FmLa(d3LK%p7F\%e,B#CFEjJ2a4Z+#q659dgW]+-FOrU6_i=6WmU8-pI65)fW+HRtm/>m?FJ>?ImCFgQUJeYuFO[sHGE3ufLXGY;rU]\:peE`g%bLZG6@L_d$G$`\B;Wsp`Q<ldi?9c)n7To6WFLROWSsHQ`lKMMb.sMgc)pP]GcTdrU(b963h<i6f0l^CL.d!<;[J6sgfdOStgM>te%doe[qgj>Q]^Pnf*(W!$GjMED=QS45>,d\8sW5j/T16Ob$0))_3oCCU-mTk"^Y)Z+G2geWZ:L7'occ,+@**drOQ*'W6G56MA;CjcH%oubg2om5^Lo5M?fF^IaH>Rek\m;(a-LL$N1G>GF.iV_G)1fMhh69"-urT`P%$8(-DlaussIdluQ>Du"ZDB%ull<Wb!e\''g>ug<a%*`VGhkd9XLS'@/1qsqa=s1Xt`Sij7RB`6mlCHOi2Sh%F6d@G%A0cOl`5<`*P]2-8@7!L0QZurf[H+LR8SNQSg*V3EXpr[Y4G[Gr<%RHmp-M6!]Tb@-'l0@efhlntdb:0t7iep`$r(g!9Y_oea\Qb'nNmSi9pB6&6G;;&NC5He>DY0SW9ou^jr3ZDEZKrUs]H`6Y!&"OWr%BY;kJWlhQs]mbdKqN56sk<&DU\!,XZXD8(0eU$cJG#E81;d)Oe[DPJ='Rjc'8,Zgo]BF)hc]d2NAu@d3[e.W(<pSa[o:a\r3s"[=%NLs8_hb&s7mb=CS\C7n(SQbnOQT!Tn[t3#]c<j\E]*WPjbI?<`DJHf5m67S)UY]1m?L-_)fOM+R<-J*WAn'O[3m_d@c-#JJ5ZN[l%KCdO7l_#=-*\E*&Xk-k=rT;I0*X9$*4%prlY(n[rk5HbIWn[Phf8FZ'Fm?H-&,Z$#`slGCG!UN8ZhnOlWYZ^I3b.ZZ/!I5"8e)'C%7!$@fkNkjK5A+F+Z^Dl\7A%Q&p,a:7WGb'^j($+]/;?sYjfnOdeOR9@(iqlK3]H?.QDf"2K4]W.pX`O"<HU&8pU_O-1UC2YE@4$Q%>'JWjQ`t.8LaZm_nUKh)$pGNX^7O@h^B0sd>)f+0(Z5&$A6]Rtqn=4op#@ZSNV-r!?6?^a'F/fleH6#Ur"[9^.7LUg<S4T9]?q"q%VE\nU*WH9DX3]7^o%Lt;3l=@p?ZWuW1m5*;4nAukbc]Un@d8UFW:g*Yi,H('F=r&okDUmmERu(U^Ig^d:r,(7bXZsqG$DeoK$j=`%<r5&DG)S00d>qpJ:d[j!INg**D^4emmgdJKmsc\u`dLFMDkr`8XRsR4Jc8,n$0:(;,VW^?Oo@4/1km)]V2LWBGTJFcG9SEHLl29+%A,9dL%ON\S=5eqe^Hh,rWr6iJjM[qK%(;6GUBG0oHLBu9ScL)r+nKrIo#8,VO+^_j2lmHY$+G];o%J:-89hJXHJp%Rb=goT^1D"F%Fa?2(3tZ`tF_e*NG:#0GPtlt>9b5(71C+8]aT,7eUHb6MZ.o<@Cl9`<HIZq/C,b+J$iAt]48]9r%c=3GkZ#58V=N^c*EAYjqqW]T%;5]TM$NtBOea?dB,XnjKV*s7]XTYqXB+,^=0iGS3Sj,[HJ#H_B#h[I^YZsRn^d3t6l@!.[LfIH%U[\b&/nB'O;$pXure22)rfWB#%kU7:P__;VeHt0D];MEO-hkIn`*qt$=#S+Z7\IAdBNfjZT9F0Npo>=C1@c21D?G/9me2gMd=kHfNgJ3^?R\F_>k+ofERf]msis\&q%rPAuZre.YGo$o[tTJX]kZ%pC:Z45gP$RS>N-;=*[O7R1:K1C@,Rb\nU3OO4K,gcUV<i]=%7c'&g@pZM$%)8"eLc:hQ4Sn_-rMBOG%9QNl'WT+k-r/7_5F%5L_c5]P.UE<<IS\_Pes&=C9RA.UfAGC6e&gs@k?`jA[+07)^0l4T[.):E061^.d0XSm&cHkW?D=YB&.]h)&%b5A.HSMS66hU,KuKq@1,kED#95&^_@Nb/UuW,;iur6eoh^pK9c#LE0\pVEmI!;EM`K1V+6Y;?.Y$"*E]*4_dhmE5YXk,@)SJApD]%IuborM,*4]56qG6bT_N$c<L$0$6SpkG`R-)^)GJ6MN5YAMJ6@\VjC/Kd5W^J3R%FSJ?d1qrdD?,U,Cu2c?"[UYN0K]I;E$["f0@'%"&]$IEkf#/]q/!r]md@Lm!""Rs6P^bXMXg9FRd=D<,=4f2R'-;?B^/o_Z7i)^XMb4]1&aU)a6pW7Vf/5m2P]rU%?lXT#[s>D8tr<%Z;h4lX%RBl]0mAXXZ(n40G(tjCs!#j$p[4j)S*e$jWDF.f=NT-.F/\krF5080Q:LEbt5CmF'>,s0<r5s7WrMh9aUO4m!bm"qh?1A%NeGr[po9mWfnNi,Q6h:s-T9.#$RN#9:m"'d"lS">G`U(*YIPGW'5p-=]DU8;](\@:%UXZ2@Td@$7ai,0QsIu2UPRBOf.^fh2.($.%Ns=]SX,E4VR>I!h$_md0LO=DakZ&\g9)jrZ#TDEpKdY/JW*"OPq"5/ffFMU!Sr9n\l)oDX!$n0g3!"rt.#S8R0*UA(MH^#l7i^)F%Y.!UI:]::!_f7[M2YmYH\sPHUENH0IW3HMJqT)h9Y8#=BmJ2J097sWVEQ7!lN;jB9b+>m9r?=HGJrcu1c%^[FO?X*eM1!sVJr]jR%<IVc7$YuQQ@/98LMSIc-7%AO&q9LrBo7K(%KeAj)dP!p8^Fh&8DVRYrdVm+G#L<,mL/hsSoP.cMIcJClUQBP:nng8l:j(2adM;T2%V?,^f0_bZg]#K]t`.(;"U6cho)-*c;jnTSI>#VZ52f8d,FJX.02aK\3n5WfTVAkU?r4kk;8i?*Ne*R<.c6%:CSR);UkU8?QQ?7X^%!,$u2jNEd."i%3&&HHSWqh;dTe82;B^\X/0!3GqqE1&4MEgh[FZ[m<I><Q^:QndGV!\g_5^'@:AN;M7'eIAn*cm%BN3Y"%E$OcCm%<Ih3Oi8kQb,m\+0fZR.kD;(<n=,[?r".j2!?_>W@2%!$'D7gCGpfdE<[S:ns)Z8MmcY_LA<KB,d+:EYTBX$IBmeJIT3]Dgsamq62%q7F_)YBiJ+++>0]qIl^b4H!ia]*&(&1)bODkZ6>"=oZ$S7),`!f(Y'\LY2=FcJ"S*]5aX#Mt'JU\DM.@2L<376?"0TQ>JX=d42ml%aRb\AeCFQdWP5ieo!ik3)G[;E+g7J@+n1k#'P3MUb;D2Be^W/k@Qh-40c6`Va(fWDPhJ/)%R$V_EMd_pEK]&,h,:\hZWk[#&o3J&%6_2`p?p$5H#]6%)qr?Jd;b"N_Dkt#DP>V1\1iC<Vq9#LpdoUHCDk4;*V,4=t**!bt[VFN=oD7J*0jW'OY.l$"(2rdn[G<GtV)Ci#%DCi7/RM6tC[JEdWLfJ['c(1n"h3_<kHb3G,1rn:HH-bWonJ]\Qfu\SUHZ/:@oE/#5AY0pfIJ=M*a-tpo->pN!VG$HESs[Et;k#=l%m'fNeR]dVGO_dsGg"K2VZu@R;[df6o^fQ5k4'CIS5$DZ<<NAk65IFtrqFOVEb`no5%U6!;S#tkK>,Dte>Dj#%O-B3-.K#4tO/B@G%RbCYqDd>T(d_4pL2n!e=Pr-+640?')jA"e2=NqkGY(:EORVUbn8o:o"9ffMnluXTfhf(@lo=QSSE-DpeAIl7ODXnaT0nOg6I,HNe%B"%^ZgV0gRCoWbc-gGla(P2hXo(<aQOp?HR07$0eh+ToQj,u:'CF9I9=ujhRSaCA>(qUmL-la<k;_Ng0'N-F(LH9jDm2!.lVsTuO%Ys?WQjBk>glCE5,XF%"dG'ENsC2U5[,Q#%)g"raBSNYFsq@eV_MA\dA!_A_(If`Ep$*_Lr,pKl\_2MbKpHk[qdW(i8o=&JGS9p1U%lH/)\]]6)qApEG&_EJLd?DWS5b^$?tC;$P%T/IW]To=G%IM'N2kI(3b$]A;'o\4JmOF+TbagU&NEi\%+2%&%53WfHO^7+1qXZmiP%._U%ee&@ODj$GA%3u53n#VC9CG(2VF>f??=STh?3?#D[%Xn$]s>s90&4tl:*AS:5bD8bfqk]KmWP>f\cQU:NF>,\./DXZ\O_IH1_%(>+)l0'%OEei.'+^A[tLYN@8q]<U3^#gV+=N[@.?=N`7dN_];s01Us\Aihp'H7_PMa,.1/?+sC8X3]O0,4jmRP=sX^7)FRi[`L2W%q:J950]c7n!-`jU0Vs.+3A^npWZ-\hX[KLTAq"9.<Ne%(k.Q*4E=^>*3nJG$0CS)a)\m_IQIp'K34fksQVVBOO>+:i/ou'b?8Pm'%SAEsp1[B!nnuAGPl_g@8B7+$ASp.UM3TFG*mI%a/QU9/D_5aO.69]%L)'1G;PJBboKBisb1m`S1XCpD0[;Mkj]C)T?c.c7^i]-(E%0Z\2)cdY9@DEajLlch;#p(YgAfL]"4b:)4Qi@s#8;b4b&p$I;X_I7uTVm9>o20Nk7^q]"]HLiJ3'rm;Vn\XP6njCHDlbp8(U.l@'%N&#h<5>npGmDtr#f\U8');0Ig\aI\i"E_bEY\$L=P)ntBhb5oPLSqr0Og3Sil+*Wdc`PgOf&<P;'"b_aAD!^LO=n3fA`ZiPrL2G(%a<goKobsXA8N=WU-SO`4Uo[@a&i.N_!-D/Wl=O/bf'N3+hJM]rZT[ochMADYo2Ss%#?UN<doj,O4\=V1?0,alm3lj`F,t0+Z?ncO%GM6LT1rU^gIa+N6bYgh)b"F,I"[:`SXh=b@#g8%LdbF;DBuG(ZlHB,KO!rb9N*gX!+b+eU6oph2,=]N>k.=1[PMc%;C_7$"k+&=0%0/lT==UNP3`I`)-k4ui-).?b!flRqniZj;m.=W>%^A@enj=#ImC9rW?Bc27r;A)#b:Je=JfXgQD:a15^UMPG43nXE,NEWQos2INU%fEO?nBS46lp.`^Q3mEjuLK6;28tGc&mk:%qC>i?>J)1emAbtK^-jH7B.bFeJs&Y0L-!MM_M8-&>X"5M34TJ7V9WT8><]W5^3Hh98%7c`PQU4,)$4ooj1`BGi:BX0YU`SUN/ZMqpsV`tS^aO=&mS35W0\R"$^E\3t0-.30]b*G90F'j.t-D^t<lr1CnSCHHf$^$sX83KTe%>9j2_C&ZNXB5B!)`'6UU>1+BD\](:3qBX.CbFlu;?ha/hhg2k]IG??Kf%`#_qK6p]@G'fckfUn:iUuh\ZOgA;J/6%F=e<'_YCbl!%CSu&NXr?!Eo1LQ?D81j[.[r.?N:H_qm`_cc&\B31#(3\$LP@.ECW)up_XooSN':!ZgmkjMXJE#N,'LCT\\-6/+2;H#(R02be!IaQ%0i`N@<p6,bQd(R(,Mur$9^03+a'T5QO&(t_d0FVWY6Xmg7QHmq)esc?De,8.,Nl5m&#QcM>"V9uHV,,hKfrVY):r`VL]H$@I9X<^%kgtN6p8N[K*LatEaj\GR1sQI[-*Ys[qu7]"j;4s*>"\gacH._E'5@.8*#cko$(#q_pO-pT4VXr\(`pa]\-fX?I<9h#+Z":6VeK64%GBjtb8:1?c_.2mm_q/:HBI._^H<AKuKV$1o%\osV(XQmI(Ep6Eji<55iLB(*aTe=?&l+TSh)d<o4"'-3n`gtD*DWM?cKRa2E[h2T%G<'%)&&<Xk_]'+sr@`l%pAa<4]#EHR4649K]%G#q7MS+(N;!S#(#+acl"BVDSp]LmCp+-OZ_&jm;DDk@G\>RM]qUt,$JNp,/[)cO%XLA+\e$%W;=0g)ki$M.mji-!QVZ\P0!G=XG5)k+<EaIAr"1!cD_/lKUmKBEuHtHG<CYb#&gN5:8,P+T;49(];HSGoS:[9NbHuB(a%;@V;b95rJ%C@]1rX!^E*Mt7WrMnADFSET#dPeK+-?)+Uj4h,dd,`V\0`GA="kK:mhdFfTVh;O-Ojf//3p4%DLV3'#dL"((o][A`7%Dt[jp/S/kd'tq5\;R`uf1OU&ER=gG^aXCucC)!2mK88Ws]lb=h+-cHm6n;!G=FMJP>Wt1sX@G3k&6CgKhe^egTUd\CKpQJWM(@+S%gQgr.lK09+hJC2(/Ppoi)tE`_FT)ui3/HaXL?l$pa$+Q<0Y]+lrUW,&g$_\>b0seIJ/F(;l25;FT]>dEG@i%DHGL?_f<_SVMdo^0%rc"hVjkmBdHMiJ`5L]!g&2^k?H8RB`N]Vp"afHW;r.X@jq)EeMa(f'&GE1!a\Q[VAn<bl7%"A&EP04oJ#\=_=#Bph*&0R][2`o$V%q\jW(SIWr/R82b)6)UP#R2npD1#glOoosrO%R%Vg)o:$NjuMF:XJX<f+EdKp#Uj+'U<[K6/'7\>]F@4@qgj-=WNT)9?n%L&Vh<F1%mM;2P[[)./cc+$7fHsfNE9bhu25WL5on\"sipXl"[X]?(>=i]#?%m?Th:=s5\@t\50@nGgl-")U4H'0brf`aaZeBBL<"TIK-^d&D%3*Aa]j-!5(3cC?#:#7@T=%e76Q1/(^%eRncXOW<c;'[&'j2O=\A4\UED;Y_IH)nY_C+^?&#:4[Vb/`(YI9+&??4C3rc`-6\n^nrZ%"LbfPjPuH@-#g.e:;l<:XTb!-L]))CKs+i46@8Q0YA^l#/l'6YgIN-$G6dGlQ8XM2`0N_o:]6'hmuX^(c*Q\9nH6q"q]'HO*,Y;K%Z.7!8o^<Yg7Y@O17cA'r4'l8]]JiX'I,^lc&a5D,VD)QSq!EP(/:5))JN%-5@MjImZhaP42ECFo@i`^pPQ[*BB!;uD"NZ0X8AP$`%k'X)rI^#C/S/>0L=Dm-i8ha="^%Se7j])C">;)k#]8->R4G<T`9NUR^#PMjpajS/Qr,HI%1RPS_jik.XWF=SRTM/+Wc)98uY&;!$%oCqZ4r.1I5gMj8'HN3dnh/=(\JR\5pigWU5ol3$<R+1!O%%$>KE,?2>f^3dpS2Tb-1)jS@onsDqA0EG`C_'PRg%84<OA.Sb%p!o,%@G4Jbdu.)OlYicgntB"7cAcIK"-Rn?3OO.m2H&+6pd/uBc_H"X[n_8R>]ej#m7N)#2rDgPIcn'WgGS^95ejthDr(4.V1G;`O"a7W%!Sm2\:0lJpPF9./q9^IS\?*[6m4^?93W)n>bCs8'VI'2\qOU1F2:D`r2b3kT:9s+J^Nu]!oiZ;T'IUGDkKt]e;(:S8UT:(=i5N>&%9XhNII--cRAPcb$HaK$G=9R]T*Wf9BSBTO,6ZDa`H?\KS*fcgupHsYmEGE#S4O2LS_o)V2[6\RdU6s]G/S+0og@Y/2rrnAa'*GMV%`%%kF^9n[*BK(#0]-.ta%%E.lD"[XRjEJ49L`Fu`d(+Nl)0)-e\"D&JR)Gj3TU4cfeg"&8(iJ/[<ODdl0!^E?DY@Bu[CnY(R6?J"%)$HRHaVcQXUQ'W7H_ooS7f<#_"U4cc$6debT*oCZTh\cDSFlAPUB`$a'@@!%>"b?]dfSmPh0HT(Y"'7g!gGpX^?QmDes"P74H4'J%8^$)NY>4@&gP^LUMXgZ']/#+.>jeF'Fg#`b9_GFHX*6oUQT>trHcR.S2!DGWV#@o)LD#Bj\qo_nh&jm<#IMcTVIQK(ad%sE9TI3u%F+&Z2ic6h]h]DVESIIlT*^l8eV_`Sri4r-6Cdr8CneG__D:X<*4`^'8h/Q]D8uuF+7S-t\:WBr)id8qVPhHe#f!G4,7LA7YbPVZ/%RGb<2[k81T)B8,MQRCiBDq2JY0Y$LgHtj$@YQ.Ea@cnE3feCQ-2T=6A5#tpH!<JhQhr3so_D+/ZKolb"73aI>r3:0<gRUZQecu0,%=m>6nLI_,&H^;-J8YO(G8,)^V3.eNU-1+)QU3GgpS0_AiS(lAaooKM6SKnFXaZCsC[ZO?iqkGmC^>jpg;>`JuY.CA[G;J$.2.&gc%8)A[_Oqig/H*?MY9?To\WXKe%.Y.`jrIo:m[U*=oW__F/8($'ucR!4-pk`EgR\^RFB6FUJm8BX>C&jHa-KWt-r6*4H,s%\@E!krQ%UOkY7IHnL=CqVbh$8H2-3a$nD0D5I"OFLXk:e*Z-UUP"rIXUm2D4,b(K5C.Q[Yu9YEbbJ<Hd3WRD_M"0ifD@"*\05/Htr!3$Hu9:%,,V:Xmo>J?pMJ9fog/G[A),97@HTO+MV]uKNfQ#)qj#B5O[/TFp?20^q.7uY$3=a^-eC'Io(L)aZ,LqEfCRo(XhP[\$WY<.^3oK?%P:)Qi*#hJIi]J488X[a^WZ?VH4Cuc8XhP=rpgEbT4q2CIenWb+VWt7TB0($5hS6b=mD6Mq1Xg$/5WO1o9F@t!P:!toNI7LGDkjD_%7a,bYJo;*aY?=N<Dd_V/,3`F11%Jo1>`[3GQZV.ZNQ#/3f3l6T:Omt>+V8E*PNc#^@lNZCQ!'^,c>KQ::132>S%4V,;Yfti<7F/N%V3UGS_+[OeLm;,t0'Ceiam/T>h/OcYD&d#7i>/MKcDkdoI78F"F/4MV#@f5^9c&j$0O<DB6TV/e;n?'8jkr==3B-mqn6V=S[nn5d%pKRIVgZB4VSG:nAoN-KAI!Chfk+qMAA`&4*GcRI?nu.[2NCI,an*hNUT(p?>oEFIWe&!$-oBL`fIV1MnqMc8_g&9Ln7O)3aNRmq&%Z*UnA^2X:GX)0aZT&7`f%\/m.ApYp"e@JkP@5P_@EpH$SFMI*-]>um/[<V,DPJ-dbneLiWEMX4,c<.;(kP#qoRJ"nF_7;3:>3LGS%q+<Yc9I8`SaS0@-*7QBEm6sS6D2P<cO/se<q3]?;hKaP(8GDh0kCqO/PDY.S0m=>5/(<a.ID7m_*>T/<q<%'E"kMZKUkoAY-De\D%dX^-Y1G9(;4O1t3q<#iKY=a]]q^%OmNS/:9@N09@b+j?,pAhe9$4g2)X8Kl8h7*J-).n&BEV[Oo]%jBIEK5+DOZD].!_"S(*6l,^%`d`:&a#=j%HJWEe9[fNG<Vo-Rdu*8.[*DTLf\oQZ^-IV%]af8#LX27@=E=>u?*+4,2fjc-HY[QAq85@dFN1FKa%ale?^nl0Q'og0%Xadl%=D?TnN^"#r=<N*"$5>_>UjM55dtj.+><V5]pGL1/qHFE)&$]Z69#+(A9#kSU_D`<]gQNZAor%6e`sPk[%"U&XnOWZX'bG:9%hn3fNIU`C[e9E@[:X]M'M_<KS9Dh&RftIS<^ZfS6L!rG68[5R.1p;9qeFMtl/`op9G\89Pmu1MshAKa/N]=L<5LWRgre@AD8,?gu%dlThO')(kIc&l/"?;4`/qG?cI;l]:DU7WCF?Z="SoFh$sL%9:0M0]'KTgYqgN9*n:KucupeT"C^==X;*EZ9655AnS5["1#NIYh"'%3n#U2hY!8aomX'6o?)GFh'8Kir5\a(++sV\&n^:()!ETr&sGO[ir*Nsr]Z!Lj8YBpJ\[Jl;C(:%g\BcO]ZG-@>GBa-O$C94Hk'kF%NrX6u1)^'q;?H*ZajP\"V_3Jh9/*6#X6@umS".:OL5u9XFSZ=DXY3s3fmu[NE-m4m>dhMuM,3YKJM3V>IMSQ%5YChs\'W%7oLCTk%c?$b0ZAA&k8WL`e+6])T^=8d6Rt9W!cum'rr>aCL`##6$D>Lr@K[(DJs/HG)3/D%Z+8VfEeHXr`&,u%Or0uH-T&79Hmr#,r5J4sS%"*I=0BJq7OePHmEAX]hT\u$h`?.T+s'(hq6-NLIcMJ:asB:?%_!Fs>O"jGCW4D&S3^_EY=Qu3cCO.!3t!Rhm@,GA=$Et>.J5TEc_%'8BqR1!G<qC^jcA![_\RR*H.W$PQMld?Z.R%B-2i>/KdkbiqW:#fcA#CCk)'9MThYJn^MUdr!j40f1nlT!23!bLLl)_d*j.OCXkh%L;Lm5>2nT'OEcXX0US?koqlCL%;OitWJNolTOJMW?lf^^b%SY\WN#JF;.27gK*=s33[5J<_XM/H0MB2h$REs#%?k0,B;U?%cEJm:%0"4ge1RWs_^`U!^]XG8C!)0_m'AFHn[rd;>VQ#;?!JX"Ybqi>T6Sg;:!Gn""EXucNg`i,gqGT;?JSf[a>>,I+-;<1D#c:a^==s\"%"5Bb>+3TamL-MF8gBaV5W_">`:2jL(0[<B'VBQ0TVUuq`f4e>-GekM';1WT'oO-:<:+K7;r7rGa;dlOTn2Tj39$?/$R#26W1+eDT%T\Cg\\-eJ@N<J7WYp9[T5]6b&#DBSJ.8WT6d/I._[0U5,1L7>D#?4XK(gr6#gVbUI;eRKdAo'8U\C%Tm>Dmsb#[fRW2^dT>pkZ@;%_JI=Y0W^0/Jd7GhQ3Xaa-4W"sN6*M)gCSseEF"cQ-Kc;`/5u/+@AjSF4n,C&"G$n2LFf/<>/F`XF+Gep"ptE>?rQPW:es#@YeY-)%go%HWl3,Qe3BmnsQ0cgrCgFnoK,Xql1lZi9e)iJ'Q"`q[\7-st*P/(L5.BGf!gmGrP,IGRiQ5!Z$_;7e)*,AP["5B!gbtN@#83Cb%8(jmZpd7oK@(*&`\,atp$qE"roO0f)'Oc`1=;%K7MG5eE'I&)0&qpu-kcK[$N%b@CLa1(LZ2i+egU.<^?g0lo:f9/i%+md=E23Pr%FY</SAXtAd2DDCfS-q"[[?lCm**EBt=urpRAcr(6(=E^3BW<CfMIidjdriVV(n;V1[LM^Wfq4[?W[[dS)HR4L,!`I;%"sBQ!tLee%Zi]r"1^RUq%KRj%F\SO&KJWsF1<kn'7ZmqRB55?f#dYA*#7aYdeh,Pq#WWE-1H?+Kd5f$:B)8j?;5eQg(<uDX3f+H!R=^&&#&9V@%bgsEEEt5KMjW"f4LW4;4E7?HPR0^&pZ3&*JD(\+Z7?0,<>cK8&9P;=D61\9#%h1Ro!&@sFjBgR`AdE"K52VceH@o]NKd6)gC>iLZ%#ccr?J/L7?(IX'*gVV0#4qNZ/c93#e<K;B1S3-f9$r8H+!^s[I@?sW(#6IqH+tOJT3>)H1,^KPb0N;":2r,Rk1f8No\*NW/qte[*%*Odb[2u[oFNPG>W;<s#/X.f@m[2I="$Y0Fii;@>g1K5JQ_$iAk)VPlPcs$U$<kql](ofD[_K<UKTJI9)%^f;:bJSs,7[T%,cBL$5%!m-<RKa<?!E29UJ+:"jF#K%Vpe-p`'H[%HK.YOdY_B]Nm+l]2lTb25%1+Wfgd*Pr-GT&%J'4Am*[cgN+hsP"XdtNV)5TRaF5Wf8:%QMmK[JR(N'gCWD>Sn4cf0TN.?@;,?`3l*ZNX[@bm[AS'1c9cB#+HA3`'13&C78mX;[]U!#<Ce)E%2)Ad__?n[1f-<-(^8.'>sfG7%/i6%["CNr&&k4np8]niG,T-NBU;D`W^jpOh5_1[E$Y\/M0^03^JcQS4:g3+(IRk665eo3]:.7*uni!(6>tu7cAJ356"dNM1TU*+O%%^5[9(tc"<('L1;)be+"#+L,sgCg4e8-L1GVh4)=0%U5o9Po>E[bqpo4K2SFUCF5+Eeg;*[RC\7]U^mAdGQ9*-5d9d$9&"5CnFco%>as4^Lb^SkT]'T/(,p%9+tc5O`)I$D'l22p<@R)qS[5M\E67KC3^90>=>dT'+TE/Rj[P`b/IHng":,ZE#\FQAR200gC*qbh!SNj"%o,uMQW!10_^e?TJ\Hanr`mN_.+;=*5!#]J@H;/NEJoF21CiW@ZdQqaqbYX]4duehdVH\Z5S;r_,0[h.'$Ak^$>7=0Z-=@7I$c7E=%1^VV?RL:MRbOf0^Vi"+LpWAe3J6O@d$c:M[0WsYl.&nK`&C/6_Q([((;[OfW0Mk>3:-;[23rqf8\VW#h,:N*a>'pYq]g?)dH5W^r%77D3q9:1ER+7UmoHLt.'KP?;h4`$kslbL&u9ITF,g\j#,*<4RX28F6J`-Y7gf)LSh<)d%742[`lXbtCYSg+?VM[Bu3&EhmfeBi@C%A(E=B:L#@DnmR3&qd`>3!C"(iD07[?KuhYA1_2DW-+YHr1c1%ddMc$3_'Zs:KZ8`*LCkA)"j"!g!+7Zf"uQN`W_-DJ^P6[*K:;>t%+)&agaV#!B6mtUF!s4c-):U,CoIdroe-9GoRj8]!D.)PR8\k[`9h.VuqoVm7j\:=4@3DjE,QY@/LEYg\#TR'r*ElH:_W^KfA6u70%2r183J1r"?.)Jqhd3T2<7t`1A5E?q-K$[XU<Nd\S/!FA,:lEhmapA2'OD"rUgq^T,(e0!#bX217@8(>rC^Od69n<i(o&l]K+r4W]%@;,9ULhjpXZn-qi,.9<C%q]lCJtab:0b(";R;bMG+05i("DFnU2baT7.%W^J*R5r>/1OYEI#=Uif_i`5#=0^kMC&a(N[>eS=cODe%5d5At.%mY.k88&0b8*DPm8!!Z?l&b.Y^e1NACW!hP+4et*7.AT<heTkbqRQ4:d*L/Ot1"9"u\nopk-UX(DCXo+n%\.=QG"M(iUs)%$"FaQ6DGVQ-5]3#:lYPbS-Vd)^l:#OSgdF;J^u7'Z-]*p]MsQ8IA.=FAt#GYg`oJ-/EnR5*FbdB9]ikS'@9NEF-rmMb\+;G$q5\g%6d?Mp5)(io#6'B[)>`rfTM4]3Ql,U6`WE$l[(?Um%:S^`V#nFH]0i0Af+<rnUZmA^UugpHYo%.AQmYuik,"h#AtkerBth05:*'n&%UC6%Z'/SP`(.OMk%(D2H$M;r'0nQYXNX#jD1>r=K(d?>\]CD4."fH%tbbJ>q\^)$.GsT_DQu3;>Kr2(K>Dn)dgRd)VJQ^M+6*1HY%-d<D0WD^?BBXa\AN'iC\$Gn?SYs&gYUVqdrW9=?bN/Tfk$OdFPiR/Fhn0GDn;@St$BSL/Kg'4rBd5EkX=UC8/+HfokoE<W"$1i7i%@G#&3>a:HoVi7;p7+7sR#J?*ZO"d6*.D#Zm?8/i8JmUbJ=;lpWd"Q!s+Z%nn3m/?Bp-?Duo%8gRSAm8PBaHV%7#a#-4@0)j?m%*+%*^cnScE_Z>d-9SFE+TPPp_Mf[0a#`/plMq>LB]_ms1m/a7J%:A#hX*TLiJT3RY4h6iW-b',!83PU<S_4-Bejk0GTuZ9jHr"_46q0%KemXOgluU'.(g!C9,B\3\?oNQ-7BB="fk>,\BqA@1KZ[O^,n$H,o&R66:4F8f=6KrToN%P\'k!q0Ha-)YTt[W=VM>)Sg$H;Hke=H%rL/Bg"t^Y/g`H>0MMOHHe5<msS!J#gnRpf,9Vi:F)YAWn)$Ujm#uX1P!nOPiBMG/9bB5H%A8-o,Nc:\YLbB1i<YH'[KILT/P,E3=%[NGf8Z7SRlBmY)nV25a$\-f[bHRA:o7mSG3/OMQsb_2ZciN][_C*&@Bl1r+U81(%4D#4H3Z3?\ZL::D"c9_J)L`])9>*m&U+U=A\%U-^?.%bha_'?4KY@Nup2nD6i\MI']E7ZNAM,@at&jal_6H3unq(MA8\4Y+Bi(.r%hWPYj::`U>RNffPMOK'6@]:1PUB*jWbTa[Tu%.E7;-f`k1s1DI22f]b5CK$Gqc#Tt"-jrHof_H_b+%DhE=)Ab.9CC:HF@/,;iGq'_N!XA'%KdG-mk@21;7_pU4)i4.h9X>IB$j*VX%EWO+E.8iO5LlUHjaiZugb[Xd-iRqctb(\nU<6FX%fd+t,HW:Y+2_:$TPhH+n.8huJ!%\gRT`0K*RN.PY1=Vf<4lN*h[XdU_@46@o%k,#0g#uVYp&-2<L*$hd`(*Z7IdI?3;a\RG,abWJ`M_[;+m0[')5rT_d$>'9;.4`MYZmh\Vg;;VHQ\o"3nktS&4d\\o'so62Yc<?o%jJu-!:'<GI5A$rO\%uTZK]-qX-A7\:N\_<4EcWFPWus8Jh#RaHP>^/b9eiZT/eOsbjOeE9Eho?hQ,t')!6^T$BIKhs5EMla.8%#[%l>(,0+`j,t(+Hj@O"i[f1?5.`;DWi5NQd86Yg+dq)Gt`Z,K&?$A>Y(g;`">:2oB0u.U[ubkhp-lBbqmr'a-rGMC0L4VJD>$nAoUD%PKIuCU4CiF;e)[XB,-ACdp<m"-aPf/+[eH;e(fgU>@GF;iEdKr&Y=V!pdi7=g,M.!V<'_*'`7r+Yq3-r^+YB!UR@\cTi%BaF,d2Y%fP.i[#/L_NGqe!I4;1iFRP[Vj@:>#*,*V.3]"'S%.#p#AcPE*cJlj)8`fIV\733l-(.gJXT@pM!3\tHpl$0Rg-<JSfirTEcZko94%D'iYVN'qE\3"4F]R&j!@RHUO,:4R\*90@p',h"HFVKrhNgI/kCa[b1QcXnqbW9E5_@pht!PDZ%B5=/"'=b(KZ7"?uLMigos@j[p?%6k)9#(kS$(>[,-%<"YBq--R\NKuZLnh4`A8MN\*ndke/C@+<.h\;20iR`An<PD1`J&ogf+j=Fa;URpRV-AmcJTia+iKN/oF!9%Q&%iA%HLR%=tc;ck+P$5X<h["N#s1d`!T*J4bJ0b`@WZSO:a6;>iC[ls1Pk+=s88BV"H0JR&k6R:JB^.ssuq>aF=!)-=*b-jhFSrfiT%>$W*_E0Le<;cUut1LsHZ_DFk=@89i>"u;-QOlMEY"!X$A+;;57;YhGt_'qs62R.AT3$qKjAHA1)[Kkht<&nX?+2U9-"rB]2_"U1;%#=6UJ$/`Tbl\9GekeJY=lN17jR_O;O(F`@T$iQ)2+e'";h1k<Zc9dDfcnCa-!jjt(9(0VjAH!*<D5:l#ABk#PTW'=`:T0-".m!#j%,K#4\3?\a^@D!1\L*:$ABQiZGj:f@9&5Klpq*\Z`.AA?o@Cf1QToPGHJ>$^S/SV0,^o37';M,ql0`&:q4!1'0TZ-cX(QkmG(Oq.4%124eD$OSB4g-eAo;,2GF^o6K+gq`P@D.Fqh:))?R>dQf:";hnu^j2[l,-W_8F,#AgVXHGn#06t$!PU0t.OBEQ`hZ'n3=@Gq^lYjZ%+841!l=JuQE3Ciq1]Tnlaj<8h\1[D"k2.mscR@<geHK.A(^Sa?e+<*#eKBgoZmb^W.]+j:-4PXWUlk`[+HXj4^CW(q-89#RiQK^Q%_\sa"ToH$u&E"(R_,T/bgRo<K&<hhVC,-2L+\\#L*V=![WaJqbU$KFXNqO:+Cu+a]<spf@$r\[bk#i(lNIq9e\`ObJE)8*9O\<rq%GlpB;^d(Kem]40(JuN!WLC/l;!)[-^92!H;L-PjE'PF>tGfkS5&Z4g$(SOd4('NBDgEe%c-n:#Q@'PXV)b0a!XE%a6X4!AgJOaJf%bYTn=+544m!>S&7^dBuT$5aWR@LPB6(+6+19ZAZ\]8>%t[Z$/#OgN.LPNa+SNtVFc-u;Vp^r[6DDHU5i7G!A\WSYR##<M:kT-EKl%;A'*/6WKn%>LE["?Z]78;?<je9G>M]-.i]E;H,ggbqDqZJp+MUMe#q1,aFT\XMP9U9.PT+<U`t\c5"/TL=$Tu5`-c63>`>_$"@#F%Dio$O'+DCko>#KS[PYYL$l8$R)Shfj1d;_*4,P_WaWl_c%9'%DC""3>N[Z\f(mcrs9ESI-rJL!7Cag)qj9t8UP7aa@&8!]T9!]5V%-CCnS*c,.LI@VN@Eo/5D+=BDY56f1W#-+,Z'-Q<V>nkGnb1)`/2QL9jKYis+MM4NN9R/.ckG<bs'6rHGH#AnI:thB8+^o>jCeu,R%-M",C(2V+\ChXUb9\1tVM2$^nq@P,KJ@l"%S9/XHp)*,K9Fn"6QH7hHSs+o>5>/(Op&-cUj<4PS"iTKKHK-2>DjnC)VI<GjEqrE*%L);V=9X,\R6e811#/W3dW=ig;d6oZ8;]@-5/VB5EQB662Cp4N\@9eqD)[I$<bQrk"f-F&/cjiO;_9?HH\<t./LpYAJ!hPEq*n:In%h!5KPC/I?k$E$M4Ga<.qX\8m3$&TS9P_L_)XajLe`<+I"`\X?WEWFY-6>);S=#I0-="I3I^_@Z%!$Q(o@Sh$E]ntBDj[ccaRQ/e(%:6UOG"n5\XQu6$#pcoY@#J/H;(GR]ndElXZ\O<cPQQ.6<KI;F4EeQ-S8&`Q$cRCpF//lUH*!_MP:moat#r<M&0KKZ$40*Wh$QLHP%^sG4,RrPGcdH<>%`qg;0a[cc/MjB[.GVG[j!c+a%kBramZD))Y^-!3#.Ms.g'`N?a.4^&`1RiVU6O/ZMn)WBSn^0%L,lD$`Z`%>Z%()I*"(fuE!YQ[lP50-1[KrTGKRu;##WYY(J=rb_Z&8"K!O\oT<Q7(AX?j=UuBF*&t/=;rQ7o/lRB&$8e>tjAaIOncgLKj9_LG!76%&Qi8S1sq=?]P(tW[>]\$EA(_<Z,hjO5Vd+NnI8&%<>H0TT["m%8%[&R!pER&!]8[*VQ3NNL4QlN3>&9S+\nh(O-glm8LQ!=3TNeh%&M\=-GsOiQ-Bj0E79RWcFqTObdIRG\_0m>\B,q(nS9[sH;irbqj19nH)A6>R3Wh$YX!5Lgch7F;R(B$K1mtGLcrXWYZUFo(i%W'C%KrKqG"]:[2$B5HIT(e?Z^U=(PHe%7^^\=eQpHS-K5Sn/N#[>f].\:RcK"D.A%<TUo4O+Q`_4kC4K4(!=Yut0\U567de74f)V<6K%%(eHu#F4_gJ_#Om'h^"SgLc?6s`PS&He>'T/@kGpqE<8]Na\oAbb9.@['#6hRMg8#rUG=8!0Lc?S'N;<1dR)WdLm?YNiUo^d.`)V^%9gkgEAL)e"S:)Rq#o(i"hEMLE@os,[BBiS:/LSG)Ta<%m0b[?-1:r/&/4ug;.A9Q\R$5BX&Wp3#CJ=u/YtB8,.L[V`V5_$OJh@,-%k[%.Q30I'l&C;LVBI0&%'X8TPZ56q-=s'btJ^B#!iVAb,;&k5*9lT)k=ni)?@2Rm&8Se[KD.7f-$&G>%o&jYR)!D^#W[;.(-*nI=%I@2dun9cH%(_Mo?!2_Fg"2h1F!!e,g)M(jbM,#\6NbLcfWQKT,a%-Y[,\@r/R;9i[`TS%kA&YPMKW4$]A%Z&I_dU[rCHuRD9Y0YH%#^O^X"m]mMmDmSX[#_Eq<'e!#_=3C+$]MnNP,;W_=,qj`5_tuY`aKp[WFK[1+]e?hJ^GEjWaV=)>YNJ;8Y?r-&4*d:nWG`/3QaRF%25#Ys=WT^T8kC_So&:>ja3`FSGN:&)RYW;E.$`+fKa]TNP.ZaYHUGTYX>pBMXkIT/Z']U_'JX1<(+7;$WdHN;7FkLI#XhNX@2@='%>LY(B"(ZT^,%I&Y6TGENR4s^r//6(!03EC`.MN#U8^J!Bi!SVg-&eU:Vu@Ar;9GhIdLOML7;,oDdnG[-Q8I/d$jiqc/rC'5RqPf`%840p96lP&6(tV*T=r5j4`1t0X"\Z$E%$\@mbegWNS4T);2(*(]bJJ7_.^Ohb<,L)'G@'-f'XBDO_*gkcL-A7s@#AM%O=B2K"JY0A%Pdqu-Jmo26?`^Q^AT67qr>1`CRUpiOStX#q$9dNC6tT?%+BF"KY<1+[@L-k/K8M>k3&7Mj;8)Bs:!Qiu<3NEYqO_.N+^s=E+Y"U&%)/8nF`q0WS'q1TUbsdsAc1\&E@'M2uR,p7aD+2r&Wm\hi0I]NbL`"DK2EPY.gXa:SM?n-)[&Zm9A@*<_O!b*>g^m\(iD+G#'AD;0%HeK7aZ\0$td))!#S!o:E=Z@jkGgcIX4HsNdB/5G;BtK'KiY[oAU0\M%*8(kOjWpm;L^I:@iNZp<Nc"7+J;+j!h_J/lSMeP/1:k-]%Yob46!0&[:o3_o2NM(B[fJXC1=I,&FL.j71*=cX1d(D3S*b!/&'smuM**c.R$oASfk3B6(<@*R6QnnUJ0M^:D(dlaU$fMpJLD^s4%]#6C!)FHq*iO'EP6Vq?._SSSnKK^j%R)2!'m'"b`Z5OPf:,"qm;__g7!,J.0GQGqQh(6CB0O:+r?9/h%`u#ID6ek/+W<cuA'*M4M%;X'uK0M>oI1ltVQ6>9h#(cMl&nX8Y#dD[(tk=Y#fj:(+9chGYphq^(es62[&dIsVfB%f3<be-#Ks4Ma2G\CYo,M,M#kYrRUX!M[L%gsT[\cP=hCA>"Gr6Q!*n9bD6IE'Y.+OdZQdl?#j=O]AkY<@#F<b'%2FRmHqFUVBD.7Ah\e\7/q+/KJhX;_r7Yg'N"<,1E\&CBcH2%0Q.@rQK!o2cC&^1d%;V-"*Lb4#p:]+(]=B&Odi;O\B@>XV)1oj`O:I2KCYPT?$.^6(IePI3N3VkK,q83$nF>,]dr\A?s"8GaLceV%2SIg4'f2()&tYJMq+XR_JWe#<(qRJnJ:YNhjJ4Bq=]-!9S;W)+b2gNJ6V9r(I"^-W6mke@CYY$EUJfZq4[lad<4'h2qd6Vlp)R]l%4?nBq#*m%=[c_/Ij[#.=-Fr;L.$R`O+<VIUdR$g)LpWFVMkGTSc6/sm0FK8Tco@/A3f54GFqagF\u:F1FX[eT1F@%8g!VE//^.;=%gMNBU*[^,sOi^M?%9AW0MCibiabj0"e)MV[#0^J$nqIXuo[XpQ>Xk(P0Ekm0dZCV7dS2Vg:)WfR[RB5@%"XN!B8]E4gu9BH.Vkn<%k$_+U!o>'\VWV5e9YtUASl(T#M(G-nGSrA2Uf!PHX?^-[H!?N,>Em66PjqtB)-iCl>a/r-P`]44\QkBXr#ugN.:Ke9YIZ.^\i<L_%.@n(!lanQ,]I8]N.+eAG+h]:B]f<e*3=ihP?bRql^*s#q-r7T+T>)fC:JQNlmOOZjQQA)iE162^fS5aeV\0[Y<A+#ZU11P<Y?-5X%D>R9u&W[52=U]j]HK`Ko%(OC5D&Y-^Wd(L0(>JoaBN4Y`WB2!-^bS';4a?)AQDNnlQ;C%*;d=qjbg#@3$Pl7T9:lJGa?DCV]6`(`%<*VE"'MUB3R-&t4ma/+,LYW_3>2T-e'[tGTN)L,fbM,-$Sthu-nA+hI,YU/$]SbZp#n5-'[`S95m13\i'P"p'TR"8NK&,AO]Fne9%d5dX:qGF[K/N<q9<NNRW%Guq0)3-Di0YKH#Y+rAB:nLFCTO1?q4@%m\Bq;5JmEm&DX`MfR<@q0_<1#3[Q=c&W!7T[]4&o6E(_Ter%%p#C()2;Da8SCO-)llNeaJA%$9)Gfj68bKe8A6qO"SX4V6LU\B]CAdN)PUU]qZEJ71YN9f0>]JMe+\W?:2B?;QdE6ARRXV^eTj9!%TJ^L+:DX-I0U3IhpK$h2<4_pc-'"Ron[kR],2\ZO+Pej@;8p_/Os*P/gaDYh-sgOXeYnS27$oQQ6edJiQnJ%IepQ/FXdfXMeS&YN%WZ(K51^^Qt\4]kr;1ZCh*Jq6lOEr9752u_?+\BU^6;h8`P2>7Sj.7Bb/ONa"]QAiN:<aK22.auR_j'e6$\m2K!Y&qV9X-3ChV]X)%<>FgT4E&fWF%&*?-7pR8DTu$J5fBu\asi4VVC\)7R#MglFRX)a$a@Pq>&:7_.P-Ke!+HAZ3X_>#KnC`@RTPq/f0q5cPJuaOXSbMB%9%URciL-Pmr&n$g?rKLKN*=A^-!2-PV=Ft*Zc/oJdB55-9]q";D7igsh-f%M2?^lj-6+>WjSa>Y.SVlpd%>i^cR'm`Q7D@Xdn<r!%gF?-;B]F,o/`_(")QG%S+/Iq2;cTAr'[-,6N6.C0OD+Dq!)nPR'e,"?VNFkB3s+-3'Eant*J@9a/CXQ%ZSn)^0KQM4Jj-Q\GaUJl%fkl\B<e_lV9f8hJii[M['?bV3VT[naNL(rZ&<rip/8k[1'#N:caUf]t>nnI_Xa'gGQkBI4M7O%Ifd^\foQ0)P;;RD?0JQP-9,OE(%/NTFES(difF1eE.3CT0V9X;9)'d^;=aheAmF%(u5!FG\G$DZlge)MKh/22T+Jf-K'N^br4AYn@:1kSI(,pB%D2EI%DaV)9-T.!qO%E`IDoiXHJ\_/sAofQ^o](5;jr9WtFT]cbO\\Nlr<V(,HW]u@X.3`s6idAHmYaoF7U&LQhQkcue_<#gPf0@O;W2K1:WXOP%%]uoK8%#>W!8"I"QZ6>SboBVNR]0;e#7/i8W,M"`6hW@&FP-<tH";p-a!P&Fd%atBloG\%8:QC6B,q'HQh,C`K+7],q*$'f`:oqs-BBe2M=%<^`="W<M91.+ChdMOY+7fpF<ZP(<"q9:/>[%$43tn#O6hJJY!l$p5)>[:Emr'm`M>1`^->f!S1YOWc89i-"9b+NtJMGYO76r0D$)%HTP`b]1)3(1:i:3@*JhN:U$9j<$rp7+K%`bm.I<[@71o?MRZEA0M47Pj:#=bDi:ngo<n^$b/B9KnY-QJ$7qW9Qm*b+(g3b<\6pbW%aNS/$ir<HUh,\CIY3XFff`*X4(??<-B_T\[+:p4W":X5p6<GYga2G4DLQ+"eqpW`bp+]#U;j%m;N_YsXUqLqSIIp1EelHRcV:O?W%lGg96$T@Z0e+bu2#KF,=goa7<.pXrS?ouB/Ce6#ui./;W:ToE7I`68d\'q0^+k$S8Z74^*BbOMn-G\Ekf^AJ:(a7nDR8+7TQ!IT$%j@rDWM,ticV[865Kq)0Pcn.u=[G@Y"C7(Gd$n]Po6mX8:Y4@MR^Jc.8#]MI9!iqD)Td(F;<b[NP@2DZiA]>F!9T6dN,iX0L.s0V0%"6^O;[TD$R=V`T@JW1Zg]ib54\?t3L`aPau`s0QiG*IS(/\1a66ukDaW\Qs*a3-/^5b,1o<eeeEC'rIiVaA.X!`rbJF[NKPV4M<O%*lo2Rc:4E=-Rq]0p-N6em<5!^P6/(F=J<boo;<)B"5AZX+\Bc[nmY?Da+-[Y4f^m:"2SWoZDMFmGX+>r&;A5+qCNo4>We,EWS*(I%9Q4NmQ$mF?NJ)MqF^h&[o9u'*"r=6;U7aF\FrA;]L,RTbW$:0u<b\6cQC)$;m!I&r?jMe)oqm4#q7.A`!A,p6r/?lp'Xt,8h(K&l%`U0f\DrUXE*Pm>>lOO;jr=:qT(ChKkV%FmMR91K7?RS0n\['f;C>NL6".Ps;Bj:7._jn9]h03Du(l3W"SZT3G!K!WuMdamG=CI!3%MXY[Y;:DE"4Dh@>%@JJ'Ke%@!*sK:-6%i5Pdm.f9e@[Q-)7!jXD;d&fWQBhW,KF^-2b0aqk%q,FEua:j\(A&eM[nq7F"-?0oXnd;%0P1!*`EY4B\7VsDWuc=p@F;8_i[Z5J=_9[fiPX42EE+)Ren1K$4bF<uk#XBa=T_<4b5ufR!?1Ya/:#mH/(S@#Gh*):l;Q50/`k^r%cKrE,XSIqrX.gq'FZ,t`73-/&"L(qjk5\ROhL*C?or```3cNG..+;Os]Qe>keR**)/@!ae_FQ6^esI\<`lkh+0t,D9/&]YrEJFWo%D^T'?s7+9k,?sNtN6q-^_j4\,68DWP0L&Go2'Yk2@!?P0aI;n2eFG*O;VXbW85&eaZCJTTAMBZJ6>m1sDOi$b4.NdjXn0Pb2fY>K%R"<QX8$npLd+*/nk9aetJf3X>5"$=)Os4hbR9ta_1SH0^&O<%>=KgB3(aO/L*R#kUA?6\"79aWsR86d"nl1BH9!,"IN_Be\+Y98`%IY^NG0qm%U\HN6#_YH)W12aGU?tF-XqgcpB:<7I_I5@<h7@gB+Q\Ds&-G@4\b0rEs-;hZ+A<I,!F'AA!Q'(6Y>NT.&B+S6Z%+3A1%!r/SariLn_bjWnB95ph/@G;PU=?'7WPe(dS9iEJ10G.6cYGToe`BbojpdD!HFbC?6l.cA8^=?hs1WK#/;p\-Qr%453*5Z]TU`tmL%7Z#e\`!3hD94M#d(9slpA]sFXs#*P1gm\-uA8=^<1/ZUk4h9a3"`mK<FQFN-]`u$[#O-ArH47K6=f%%ML2L7nUZ=_h!`g2%^cnQU%"L1*sAehRW[1_Q/DaD%&NI^qW%B#BRAotH[XA_2^C,"*'#)#o$%p_]b^!<lMoH$IVj(qpteU6W1>e3Y_!F?Nu4N'&@1gNmKFph(E%hECgT/;*]BW>e#X,Wcesl..\""o47Oop433UtE^[0Z$=;.JudNhMbP#\a+%31Vjm)`mg?/&0AQ;joo@FXar@4r+Ol6A"toBTC@Jp%$n!U6n355\A)alI;6Xd1-ErAOIC-7%H^^)\6=LWa.X&><paBOpT)/usn'LuH\&5+!#o]:L++\Qse>QadN[F>^ol;j+2[?lf(omIV%q8fVf'ugU4&G_&_#]K0$Aa1kMF)q1j1:OFXdLDgPeIm123RuafC?B9?;sAGGra(oWJ,8?CZ[C>BIf8l1.oYlFf0=cX>AI9;cR$V]%.\o[gPYU%oL+GAtqdKFL<g?+-<']RuOB>%L%i$Q-eaT$[*5X%cWI\&`L-gV?-#;3l,tB+fJHH,ZQm-9BXTVr>4Mil#^b2Cpq,Ksu%H@KMITHg"AJ_!YCRk9o,-0Lt2\5%`]U,n)R@rWjJZ.GWQ2JWi>VMWS$[`4k-[4o=NFULV]?Nje'h3Z2$6RFK3d7kF.D[:qSeVi-<%Q>n23bp:S9i(aC9T.d9f#[j3;%T%CQc<mUrM)+WH-KikV&hN"_&#8P7RCKqa`)]2oJg*VJ2-<^pO0S4C&UnXp2D_(ZLj>3U#$%:r%RGg_(+4C$>]*Dtk0&ZC$B8n(*eZZ.YK0V7Rq)$_E47r=3&"2@`c`PFSms6SpGPj?SifHP5+pkKNC_uqL&?5la`NeR!*oo1d;gF>?%i/f,H6+./nbClbsf:_")h$^@0Kj_L'S/``o.PCM+V<(.J9aG@j[rVcWE=4Th9n!6@/,?SUc6cOY6`(f>d)k2A=g*FI'h5:Uh'tC_%0g,-=?%n,$L8bmeka]NSOF2ndYu.HB4uamEU_)`&_81_#6&?Yh<KJX20ePmm$/r[oH*HIgc)d=:.)i>LUgjJ`/kt5@COJH4VQ;52%*a_Bk^'JZ"CkU8GEAUan3=1?$P$C$31__troW:!b's(rS'/_hKZ!#a,?%g5dDiN&&J/Q_%Tn2!a`=]lCUVO_J.[X[kAMKAQ)&bJk%lH9qk<gZ5`$VN4=XsjFJ9YK7n(edQU2Iu)Fokr0X":U'&DF_S=>:L+8@g`?I^ng^Y-QiF'Lj[H4b%SAbG6S?KC<.7n7`d>m"-FnP%K+3[o?([Rj8cZIMFC=17!ZTZ_9bOEGfLeo=926VIbH2L.Y]K[d`9mfYE6c;oB90X5<_$LN*s_4-C7de\l"@%q?/t=O7=cbmqCj"A%$7X''C<YCl9IiTi/#raDq`=3hJN;LR"tGq@#3Gh%R:-1p"TGe*G-F#oY\Dhlk$Lj"qS%#&W>5oD-s@!oo%F3<``>9WjUF4Q[(n.O%;E&7*Wf!,58WVG:dn%#50sD"C'j-L'25UhfCY/N*$o\0m:R2i=O.^3.B>H/&UB#-MV!&'e@+^C<#?Kf_^rt8M-VK`cTflCui4TfO%[D+"P@j>VkRXhd9_;\:g-@uR&<[CI?8Y_m#Pj%5(43<:&?6gcr.%SWN2l[M];lJ_%1-!``[j6`ebR&<)TR9@k@!_o>Vus5^ZA@)k%+n70XRs8(GPW>#9ShP2-b,3r:<]tEH/275mB/Up303qO-,`</%7A``\6A1r]NZ&WX.AS>T^LG#kj@Y"W/U?:r,)?"@8_H13"N",3%?Z?hi1,QOi_k(pW'-AC`LX_K3iJ&Y5UuAT<[h\aF[&0?u`eLetZa1UN.qtJ%7UlBJ\Z]ZI:?`NF.A57D+]4b]NHE:$oL7s`MLgPi%c,P_HWL)"-AF\&\#[.rE#$[R@[dJ*I,d7S2q$<K_)(R\A=KmM5r7^5@-'b,]MST_H^(+CId_ZM\G1X6>/lk7NJS>ljmR-UM=D1?X%C>68c6V+Z@g60f:j_p]C$=4Z<CW*le5]NiKrH=YG5h-`'kj'Cjgo,+flaUm>K.IRpXZlSihr.ml4j9Z&(tN4;.I.F[S<eE2ZS5R8%b77mk0e:bD%FKD/*\\]0N2J"uN:G!Pqumj.iVg'\)T!t!T/mm*_78'`NIV5;CC3gHQ!MRW=X!0blq0[PVfdS>iNK:[P#i*u7,S(7%fP2<RaP[=cnW5fkZ4<L_3<O8(J]!C!lmuto%WQ#t('b*oU;\]$P`BlR>R7U,(A/lmI^0jM#4Nii95Uri(\A=dbfT4Bo&91b-n9B-%HMIKd%PL_W+D-BtV>,iBV`3uQ+9g0t_.hJ7Dj:oI@G=pD#UJqU+.7'ZL;JcY51'um,ZHa>`5^;:(&S4>3o(8hQB`V=O0k3h[0?oF%?r;VBoc_7/qUT_%B7H7;4kOot!rWmYVu3K`%:Y9],1e<X*nIKhr^g0I&%d0RP(8#dG5/)_=%6e$f4r\a'gO)QNsQ)gYE6!@bt!_8%/*8_7+/T-^6^`8h',&8/"?bE_f'^1=@ae-_Ys%IUYi$asfOB3efZdX\&aUoL\k_]<b>>'XF$>"iQ5u@%-jm29#T-^k:A0*eC-8oh%XI*!R.[m0u9PN'3PKA`+OLEWoEnGN>e!*[a"RQS4.^Bm94W?tQB]7qJ>P1`Y=XUI@;lG@S4YCP=b'"F7M9^heG_>U4'mgPD/c8.J%#\I5r>lgNXoo(GqT6X`rg)NhS_K?\/UgicfEjqqNJD$61*ks$t,ciB+'<k?NnnD>3->1o#Z47c]M4O%Bka4FqH+j]0Jj*4b5.+>.%!:kfcD(T1$-57]akD->D21$+.c;&IaP'",dLG>BYkSd%NFb_u)ot(P?<#\]!HGSBkA>WY4b^p`_^9I=%s%h`[17fLApf(&I1YmUX%j9\"K1&+H0i%nAdpS@K>S_S\T^jhY"s%,]Y-[GHYV<:2`]b;lu7\fGtCirc5M+LC#!Mn4IIZKFF)!e<[C<tC!Cr/k37^s"TI=TJO%V2:,;"0cIBOK+i\Ae9Ek;K%fP8cET"6)Pu*?$IEZ4!\u/H?C@Y0SXMD-=%Do+OG4^qiljX$dqk=C$@<OCs@Y"1/H"QSoW5M9rI77%N#INF6=c1PHStGB$QQj1Eh;g3<+;`<&is'IRjq2ao2_lF?G"LtG@/NfdP.3[#0g(:fPBQd8>P/Qma`JANfpW+gZrGFCJ<gMkqFrq%=[Os<%o'+d=R$Nc8XO87PJl1goIcqd:S>%S7[UNG6E!n=R:U(u=)-ji\(IsKg,DoT1TB<]#I>:`@M3j6"dmP7T3>\F,3:)NQ23ih%2Bh%MlAB`&)`PnE<@3l_MT+MR$cbQsaJ-i+n9&6\F=PdV@?!Ca0hU&>6=Z=CTZr[]79XZA"`7CH#XoHn]ha0J76>GEgJ_aU*Z8bf%Q3DC^efAe\ipe?lY.DAA>7kTp[N!\U$K4He`F:V-],b"R.DPitHY/7k+sF3eFcg9DI8s]&DUE.NHGjAeh?tXc8U*CRfU4u)?R.gZ%`VQKH;V,1nLDUs@*3gL9X@97spC8o1=oH^:D>3CeQ/2Y^Sihc5"^igj,I&TBbc0$)NAX#ns/@Xol3;8hmRE(qIg]j"Yj<f3<b,24%KKM=E.#I?@@>Dm)A8XNn$_Q;'.!494T?Ck_/?(HA;3\APHYnN\2%9#dDQH/uLm%J7qLe+tZ%8'F=B/;.,d;)[^hqr$E_)">2d5h2%6&cSZ0kkR9.]p;sP&A9NmmW/+5IKal&qO0r82bA4GWb_#njl8%``QFq$UKNk?uN8*5aSc%(RSc)L>qqh4/jpK6!,g*8aYP3L'4Zo%U094Nde0Oncm1hNkujY$$8Z:s[Nd)7`G\=TV7Ne,/ZV"Md"&d2dpre3<@@7%nh$3,0u[%F.Bj6c2mD9$)r@"%Wa;<EA(b&@9_?:T%!0,6de\q]fE/JA7+d(oCSj`5.WkP]R@AahcNN^]ogH:gR9:B/:$<4)nBZE"jV9$OI&](-'BSbW"J:Q+r&So0:#2!m`3<fd;3(S:#%Cb['r,_5X$[5cX?>RW,6`+4TH9@>Vj\d/Ud=DJ90H>R/_Jn)T\)lH;=\m;bK7A3HL6']*ri\J*1$^UW%:`m\l[,$nN,-W%eJJOX'%C<pV=1l<[?/1k#d&Ieo!&NXJT.iX*fKrKV,VVRNO#$3EdQG\A-4G5$49u;"K*#LCH_n^HU:)d'D!m.L&Qd)8dkB8n:-m-KFm#+tH%+Ch?5':UNXb!TA?G#t6G>MF<A+ngr8/;b5Mj23QK7TB?e,81FtZq-*]%[kmPcjgjm7Y6_j-A;u2X2>L_euXDnCNF%(G1D&hR>R_A%Q7\2L69$s'_?DW@)6tNC/rL;GIiYKJoOML1-rt9LpoG7V7*9/IRRkuc5`%[2#=j,ulXo%cDHe1jg2!,R9"T@L*>q<&IePFC]K3NC%&m"'>gc>Ma4:W/`jXL"ROmbg1r5.L2Yec:i'N3iQI%1tp6+i)DL<pHO<c+$i$DkmC,kLG<9uA_sD2g0.P<>U#Ier%PL]8@*\?:+e%+#ORYrZc2"p.oEE[Qd:,6X@a$LZMlFo5OWARYUVun1UqifV7M:CcA!<4DaI4&'J<T`P_[&<'9MEnM'$"rtR")Ndk3N_t@@+0Oc)Q%T]0DZ4XCW>Z*WNMmjTig$BhBGme"Pb(4DW`R"550Vu?/Sri_AirBF7qAK7hWIJG=[!j,BqaLPY/C^e'E(D_BJqK7sG2+pT[j0IEl%`JQiNiLSsc)Kf;)e<1H4UO6&4R`)4K18raAY(:Q[NA:H5::seiFjj5UJ_Eq'*V?X)n_d9UK[PR;:N0#<,[4d&bpT&YXQ;_[R+cu(%N*J_$K^K0KaM":rPo7TN53]rB@!;+P2-(OjJH@h)M'W^LjQp]C(*TjehF;7)fmY:j]'.=0\oh'f\B30BbFoZ?Gn*1_GOq<J^-k0m%iA]tf/MipZ^=>sd[s*dHf:2o^2^(9*U#[ak2SF0<;5*Zj4R8`E(#Cq!4\*h=>aHTFb?=0[#jqpp>@>-Yo`W/P$R@+G\9k""_AQ$f%NU%pZ(qAJ5H]jdVR#J$3OBF0jWSo=C-*"#i[M8J;2F,']bBg8GP=&O;6s>Nj*k#'@o6+rU@kn#PqGh<nJ+iO-k8Y^:J/j#!Fr]'4%RGU8q1[CtKD<U'</k,V8BSojpBA`gTQ43gER*dI0BWTF5lg!nM/@^[JTHo60GFifh\YgE>hMoSj/gba$*?)TS+F>YTP_&g9LF=Lg%Kp`P[lZ*c#+sRnrgLiKZ>]>G*d)-/HidSMfD$-N-/0E7bm8+`XYh/#9UF*sc8cJnSl"=JWa]#A)jnR24\pss3Mi-]!D.!Qt%4Nqa%S>_H-`&Cnp.kt:7lE06p=T;e)WFDt%iYf:$_Lj/M*=i)6i;"*V](`sXpCf;/"J,A]Y/*YQbh-@$OSP6T?2j!,9hES!Ar=c(<usHE%fFjM_Frbu\hegJ;-YX,@;##bkPoa=CE/nB4.D`hNFFusD7@=QtVojf:)4(/+\[2ishpl1iHgMkrg@(c*rXg-ua/3H$l/2CAAkbcV%*$VE46[AUgK6h;mR_Aa[=9%75)#sFWJ,I1hS/3:Io[3ZaiLg,?`BX=1i1L#>`BX=r2rUD.o#3ilbM]#lo#3ilMrC<-o#3il5F$`p%b8:3NMgoL.MgtTB5Q0T6Idp4KpnqKsdkC^b(]X,cJ,7,KrSjGunP?ppVdKAN0E12Ps7D5!qSb\tih(\i:VZ\&&,tfH?i8A+rok7!%o_\YHrol(Cr6m=uknjBlIlm]&QS8@&pHLb>oTq61l2UeYVn`.Tq5:u73q_tAkO2DFjh9YKhgYLsqVPZYQ>^fbTmln/)'N#D8P'YC%P#@"*ZrGrW+JrK/4#L$r8PU"HdSkjk"P(g^!pFRl2kSGrJ\DdtKq;7DTdNuCpH@c@5i2mK64_3g^lu,4m%(R7oH^R@IAa4T4is`k%:\sA"I;]1fhr164l>9<0X$5mGZ$t9bG@u:iAd/$+B*J-,BEe6-C"45!;Cg+<>-$Q>+LVV?WNAK_Ei\VTdT_\P"BW@U6#d)):3%(q%dTh@;&R>he<*,b@g%D[@Irr_&H1e5OP$WQpKD$ee,eiQ%:[5"-PPcp&UqaLc?4!h?%gqZSRKTZ-4(tjIgOfdtIQsd86;KA<Rc^E`%$9\["!Y7o)^loH_oVBI?GKnrTT9*Q:T(H-XmfZde#=V\O6';EH:6QE=&nM/nV90-.aKg-C.pZ3.8XT1O*gBg$-YZUUE7/?PT#=b_%;")n:TdP+dkWtgUGS4[Sl^R+GcY0[Nhhe^,?`CCKp'I-fkXh]F[BG6eJL@90kW>aZkW>nIkXhl+*=chd^lr"RoVC(W4UAL1m6Rul%qF\%.G1(4"Z7"&NkUY1a2`Spfm]_=]/+b+B$9]iIT65Df#2!@V:i?N/jBJ;GoNS!W"C.Vg'\j)pKS0a*SV@OESVR[GSVdgISW!sK%SW55m,if:q.Cm%Y6-;([9$7D5:<XH!;KMN4K:M8Z3p=+@:P,`6m%EP\4\3.N:RZ/Xj"!u.9n#u_eNG9_=6N6-eK#.:Xr_a_G1DHt%Bif5"dWXHV#B:RD4*C9a59]J&IAQB6HR&"e4=Rp0:D,>-G8d[3PK59HV"+S8-h@CfVt0t<-hIa/.(oW<8\IT#BtXRD@^#3G;L=+h%jBeN-]iXqk$,/`%MD*>#P-<5rk'Ne?6sj?j<*u<eA7)#8h,iN+p_A*QIY#4sIYAiM?\8UR=6N6S"o;!n"o;!o"o:so(4&l/J\I=u%Kq:,/T^P9VTa)>-!^@h1$U*ai5i2ma5i4$,6;LK5d!&YId!&s'd$#@VoUQs1oUR%^rUQL%%.p)7%.p)9%.oN+/FXbh$TtE*^@WNU%#Ppb'edJ"$@A,&[=Qi<p(4+>^"eNY@Ta,`8%BPUL39e?.>V?4h^Xb[op8&"NfI_HsLk38RM:IY7PuuY0A7@^hU_E'.-_]2V/#Cmh%F-)95T!Vs6qarDg^?\G@]T\8-*qWoEGpgH'gQ,,Y`jTRlP-JiOP@cB<,T>tY-e2>_8N-SAj"n9Od9"3T[i_5>NeO(#@t!$%3u3,T%O51-Jp"57NOH3m.^<houPYM:#TW]&?T^O.:TdL9ekW9A:Y'luf$TuPPIYCiaZG;*SXS(nT,RZb+ae$,JZt(g'#;KAfl(fZl"V,RY%52`4a]*/[rZI"f0N90o,Ub)/6.;NW^M98.\Wj4O<PH6>-Ualg9$-V0r%a)*6ll[kf4DE"8i)epDS*$@r$U)VTC>>#elnS*(?rlG1%'P;t&M>?tqVjD]W12@_s<+_gOR9;oFUbd>u4p]D":J.sZb*1<pqs,c7furYHC_lk>D>*E/EjO,VhX'tt#gT"c#K9j'H]jnQSi#VW%3kc/r]bS7ZS\=P8A7mjG6$F)j&>$Qo*L,_@?!^+K0CO&4St@sd#P%WC*dCMRD,;55kEe9coOg>S,X;`#.F9ur?:iLM'b;4iB#?of%I\(cp.Wh>eA8&/=#9?t]qBSH:IAK>IPrM@_2GF]co^b-8dV#1KUO@oM*3H-0oOrZj8WX^6;P`,V#>*X-qa$G>\o84WKq;7X?[Im2%D6=n$l";4n#h++SP;96U5=s==KnD;Njn^)pHQ+rCdr*rn4RLDPPs4S!3sa>&:C8u+G7q=1P=@.r,Z9-hnJRTqkXhZ&*DSZ'ms>VG%Kq=OokOJ<i<VtM\>.)-)+BBS_WR]kS%s#(umQn&-dnYM&^A+L+J,AaRanjbQ:MA>:IXFVl(4&l\Kq;i@Da-F\>73S#fAD%)7_':\%P-0AMe#nBG`+soOoigQF^(tt?YC4lPJ1^Dh@/F(3$!U,Fd]hPd#8(2=E)Ns#*b9(G_El4Cj.:qjDa-F\A:OLH#q>c+O3_LmhgTr>%bl7=r'5BG@GB,UgGC$^EPG%mAa(H+RDa3)Lg>@@,7ai-!'",LQpl)6OmDijMD4q2?qqI1X#i"6cHq)d)HB>SMrV2>[/bC<+$U(KD%hgTrBhA1Fa[fO2V\:L4cmVb<R,B4)SC"u$N,58PgT2E/6rV2&i/b#QW"+;P=IsV^A!(:o5Zu-?0PLqJZTQUEb-[-LmkhSR$K"'*j%iiQ@+P.\R.pl+A6mDij-mr(ESUO$\cT4DjnKa6H2?Jf&phd2=M.Gn;u:=?V[M3IZ#D>9CkXaT?)IVVS;aktsR%f3Y/_Lhi+,O;"Q%gSd5*i4eY1%G]Ol5m36Sr07WW?1B%i$U*b46;KrC[i_5>_S+)6Ui?"P8IJTqT#>U@qEYSbY^%OMCP88NE1mM&>i7m[(O2+]Kq:,@%O7@iNY5*$7`ARHdZFDfWP:ljfoSr)E<o&BEQSmG\ToKLDal>]`qY7NAT+K(N/q*:mIR54`qG&7OH4n>Z*`R0R-^icR5puEU?3oZ0%:.dOnG>buuP?&1cSQHBoSQZNqSQlZsSR*r@,a\s&.HWrmP.Ar'B'qan&C'lS-e2Jc8N,1eSTJqJ#N=H^3%3rV:XZegiLlb-g66dL%q]=7.p!62n(OFNUh89Hu?0FjG#Pq1^(OFNV24e-1k^j9o]"irWmcj@97i-C_dQa551"/@^V<c<"@_0SI8PL"IP1,,VoQ4Ge&Cc-c%K;(!j+K=\G:7Ac@PGkW[4/qL7&$id9iLm6`dgj7+d$(d'CCekiB?g<epil#7d$)-A1'rTI%X-AaJR.J2@2Cru,dEiEHdLE!Sj[aq%#F/TQ6"UpXdb2T_4UCFe#JX0j"eMN5TdQsJkXfSL^%e8/$U)W!6;Mp>>4ElJ^T9FS`Vm-'N%Y)c&Db[7peRZrViUlK'*Go!7Z\J(%f"VTYQ>?0^$-j3'Gct\\I.E&"rVB=?H;5R6It(_4r:nf,Ij4ggn_a=mqY8h2WaG_Los`O+rq?2T55qa7qbpYLW>#TYEZ)-Q`sk9Y%?#pr]'/9sK[Bg?P<D(:>8,[3)o.ic,`LFMd&Qk3CLTF(;L'p/BOp_FjAbcps>[)XkL-Uk30,qe:'Y72SOti-d(gr[r(dDT-&Cg)Y%<Ti:.P2s;h>ZZ,%`-/2TE&urt,Z-NmdWi[R^YXi)loj@='mgMV]IVk,R\EHANHtu5i]on4p7kLU2*^W\CJbCTfSnho0_7-BABi57%S45>U>"R?-,/N&)?f2ohMm7%BDo>gX3Y$s@b8iFG"BZJm]gWquA2(_,JaYi%Nsk;^nR"6!Ztq.rI:3Si$XhS+68+<UqQb<;g=Vk_%#@IL$m+ULcb=gm,>snFrYWFW)/pAPU#n:_>(>-RqqH>=7>Sre:HuI"7.D=Cla]p8;=nE\.[GYErf&DZ$d+l48Y-D<%$:/,oJ1h`P%kjT!%<%7h#!Sa#En_i_RDZae&!iB98dnp>%eW,VrZ#q,#cLgV@GCJr#;C5]Y<inm85@`$ALBBO@BnDE'?%2JcqsleACcE]DK>2Yp%583@XCggI&&DTuRj?e2qC>:f)>j#'qHUs^;Rg@(#'ZL@.VXHHcO8tRc=qI/T/X,L2HL2s/0Z_jhcn/B0pI/i4XrXG3"9GSKdLAlt%7K+!.Ofoe*p)[!].gaBtD1snd7@./#pjr^Y113I+&mu[3(jpq&J,%Y)G@"nDNKV%/CuKVo2m*M2h@0g.G^[@N]jEiSY\iWE*mrf:%(=_d)JMGS\Q?;f\>Q:qZi627Vi%e6hi1OD+CW[C51aKFr2#9B`Z-*t9`X;\N/2^!_e&'$.%s6?^lZ-p\dR\B6AN3qS"XBuCISHda%H1V@I!1Wm8,"mm[!*ZU*JBb6>\C"j:FYg49/5NVpDmt($n1Wb*=$('Pn$NI2Br[)$"(&p[]en\]8nd+'\fcZgR;JaR4dJ<?F6qQ5%&n3rS>XsH(<jdri=,&;*HH]aeQ8",to2RZ&o-g8re-:gFL<SCX2Kh!u>n2oi1[irM<P6KD@pcuEh[=`>G.`KUX)!1^9T8o\Caran%^gG98i&=Q2i<#]d/n06S/\.0"3&u7ibIS2E`iRp#hlUh/QB5,O8#9mHf,5"%XetVN]ouml:5e/H9hFRoBrOj%o&eIZj3Utc'fl/B%>mIF4M*JWZ!aD5JfY3B9Ah=4^\%m5d-`2MYYRR'CfZqVU`@?]e&"^DU]p^Rlq!]/t\Ap*DnA9oQ=5^[+lY$f>A$;F8?*k0m/NC&o%A?@Jq\p>"DXi?Pd=Bi`3jds:66?Pf99T\mse`j>YXhS^r@R[P^]Bt/,Qg[0`g?s9'.FE!4:PI+ujU"3)`q^NT<)gB3PoG/ZB7\bS%fZo.JeJh:F2MVKul<m9gd$Mc%AbX1=8XJ6X/8W=Z?)J8bZ'F?#$KE^h@ak;S)='/O>5*gr>!Ne<$X`e]N+!*h#Zqs##"F3NPh.dn%fYb,@f7T^M>PYt/_V81fF0DI^`9sH%@E,;4bbE&29o.`s\NA\N)J]!nRfE8hi*\i[&&J@OeZbA=9S9ZnRY)IgYmoDtX29'2KmrNV%_97A*[QPa)\@*hLQYk9I[?OeBEd2"5HQ05cV/O82L9XgILFEWF!SpeDSKY(C.-VTqq-D@[1gR=6gr3&E*3[.]T7L!=&V44WB`,:`%;lF6npb$=@4AT?`*#i;;%[MtEiG'qM=MjF@F_M'25m#%^9"hE\K-&D'RKjejN\#")R`!0T0kV.V?Uk@35'KH7(&1-&Lm#i&U7k3=%`EfRAJ]@tr2h1-,[]6CT<"\"B!`JYL`Y;e@_FD9^$[2u_3jj1;0<-T%l"pmudeqkIDf!9b9WYXH^JT8'.WT50X4Y=/_FTP.@9iSo%>Y7,)0QD?Hd2o'aktNf-V0b%Zb``n!;Y*(HdCeF\pM&o(%VT=uYLPIWef(+tF1<=T=>AllNdE`Dqj!:ij$#!Q!9k=ZK[l?^GX^Z`%=D3k7A(e2bkPJ5gOM7PIYZ=eFaaLZNmB2kN'.&C_DYIjE#!CRJe(=d2Nn>n&^Wkr)Um(-C>;sCYE'(R-K;DQ9F7I\8#Wlj_-=q(g%-D)gcprc2jeQTK)S+1m]pR.HqAmdL^Z07l^QEPAW,%TqG/7\+U]6ET3>e[*!4UU,?jE2u%3qpusG9>4nYPkT:'Emp)P@C(_/rAo4%0n%Uj\]*g<<\F#(rU6uZ#$;+ae7)-E*0#N"A\5h=>9*4TiN"sKg)r]s\92*0BUL,K&nrV2mTf6T'a@G0IGOI:/UM+?7gOLgl`SL<%^pF,#HB-9FLecp>3QBa8l``c4TronE?]fMi\g]EoA$\UR-SG>lZC1/9!4j"O@'pi[]?gb86W&Rg#!p),@NK3tB?S3o"t+M2S=A$.%Tel#E0j4gtjr4!koqq&PO*.pm#M</;+.?:pStCS2WqI3%f8j+2OR!<[f*L!NlWDO?Eh`&GTN5;f,D_0c^ijsr&37bX"P:2odDD2j%SY5R@S0s9nKmC_2MLS)(k>G\t]290#\^j,Uf@JCQ6eE\@iM4>62"%OR.:T>!]+?Rt<cuia;Z_,)Z%nsL+G.kqk52aUd&$%t))9&k%dT?8!g;>Ku(JZ+e53@3NVcn4KMg@ZK5iXOUQcP?,8=n/7&K_iPBDAoN9ZR*<RpHIa:6J&+Snm/V!s3a5@"NA8D6G7AWc&?_k"8((%Yb6IU_^!p%6*@/AA^3/LP`6!k+gW`@&p=YeYYclZC5#c*lb3i[*+3L<7GB-p*gek;neX2VlWMD(b1;Z*U;@Ib9tcXWWLX7f`gkc&%H:rS!<m!"IZ\B6i)("A[(n5hhcT?f!k(%`5BcYMb%"<2Y=R0#$\JFh2Ku6C`*.-t!],$htUt]ta]1$/jGId7PdbG[si789Pg8[E^%@Al+_eB46l`:+sjJ*[M,e@70;lYn;I9IZ34j:JB:$Q)4sgkdX7A:W#UFP(/$_a<sme+o8%E8;E.#cF0<p5fTS4^(7u(Y$8"k>e@t%\/Rs`!LBH76%.l4j(9'95$XJCGjVXoLNZcTf1)\"57Ihj\Tt&(bR"m:A<DY@m3K_U>1JO%4j:/K?fOkq*O\jSH=3T/(1S^!f#.9"%Siud=SXY_TI(SGi<+^AU=nQsQK.$G7^8-*KB;q<Y9hOP5J\1jM(#\]Qf[NjP@gU(.@&qS_DO74FCnLH5F6]aVa+d%Qg3Bm$00,J`%:0$D;[Whn8NY[tu[rDQ0LtV4`6r&"I7I>rm/o,Z&&o3bL&FP^OA&k=q&("nU#=_u4@6)Q3Z8b9-86>/V$][qhH1.t_.Q1o8&#)fD%_PXs!R:FL@0Vn5tDLF)b\L\c6QUpef3;F*jhC7gJei4!JC+b&P:^MBTGJQ3aYNcrtR35]7]rKu\D&t'r2uqXYTY,u)]SbXDn^rm)%27s?L0$E:ZN*7W%aO9W>IOQoV=@^Lea'Kg,>q(4j1bs6^mC-;CZEBnf9V'j06jI&=O!^lLO17Ma"T>F^+.S\5]X;[T_D>`Lo6pVo%gDCI_hD5N-FrgLoGgV_!69>&gHXg`V;*>67$Gd+2$F4OAC*O4Zn2D&84[rG`^O6/IN.H(-9*U6OEOmPs-8/iIj`-A.IOtor`"i_]%?VmLL6692=N8uF4B?QOD."7%P4KtFF6;J'F#I(XAL+;fa9ZM%_DasgVh9Hb:(t@(&WjO-=5)A)3CS:f&Ki#(j+#s[Nfb\Mu@k:6V%P`W5]B4)*[6[l/6C9L]1W=)AtD?33?cqrK6MI\ir57ON4MD&a)2#tfPnFpT2ONq.aX2+M"`)[TGK'rlg:N1995F8I87a+&)?3_/,%\DM)bZHJBYJl/.[:q^%tR_TI\J.2h/[Blg<ZjG:0]7tD?g)fF>2F<i)C2mVhI^s$k5St`pnD8.*PJMbq(ZrMOknn'sY(p=6@r];e%D*J_C459h(1V;.<%)G$):faetLuadf`AfZj!R&%09!<#R@FON7aKgB1MVk9W<W3?*1E-M^N7,(d?44X]Ml__CXM@fnf7j>^9X\6Z%;VC^Eh\ohWJK1$bbM%,h-B^*Yo-3otpB*D[_dFXuc0k]oQaqqFe`45u$kZsOYQ/EL9tDG@4CJuX0YF"mJ1L<4#-kjZ'jiL;)%%7,%LD'LbFUcuF;),:r#ED?jV?PH-m):u:&P,R2Dr`<J@RZ:bAeQ:1%$-ss>00nFBCVnE&9glSK7I)<ZV3B5q&-?]_sE+XosqKd_U.3Y%!jh&#mul5_=#5mYn(a!eJaV0k`OGNW0$cR]$G1,*9rofA^a:(#?!2=[`Vkg\"gBgHZ/?D7H&+3U&m@b&8E!BT0$af^kGuS_c#V^F%G%/E*m?#bR3#iq!QB4S-;"\H83Pft]!jf\FXq.Z%db(AbO@sB!;SYW6*F0%#73m-3KigkVXKF"RNYZ*LUIVZ3-=pr-oQ/-]r;JV:%3=ip##K8:4[$Zb-!Bg:sQs0p\,dB0AZ/o.^^u3\eZjESbHXRX6""m1@;b8N.EX/g#eMNA<G@l43Z>C5k"Z[JV,f#iW16?g+8\-Ob%WeLetNK5)4XTO9PKXICP=PRf1Pm/WQ$20!cNO1NkRB%59quVM)^,O;VYcJLJ<H-?"0Fs3D_0'9[+cX#=6VGUa)$jn"=9jf%+Q(kn%)%d0a/m\Y!"(Z0JS$!6RNFf9cqUhh#+L("V%W@oXY3ZE_E1pKDg9N,F#E`P2OmI*M!\91IZP6dGmK*Gg^Wl=m'#Oa7$Z'lm9H;59%m+9"5X`pPBL*!VM#`T/a_PX@;+@QLt<+)&L)`8-1KS;2-4PD05c)!q+T`q@a[%4c,?^%f7do))$bo3Dj.['7NA[270H:Z>sG-W^4%hrkk''_Os7#Vpd;Qpu9'"X[]!B6+eiN):!5Cgo#8dFg7,=P(Y$I6e#Z?KWoKB<c)h]BXDe]nebn<uM#)'=QLu5rBh0qn,),of#?k%lM$I+?'$IndA?uZglS]?XHSB/(3i[[)Cl0a@a`I+=1Km""kAi+o308tCZ-7'G_m[n=TRGP^]O^W'lCDJ.d6r,9I`(MJ',]Y=3/Qg%>H6+BS0=X8j$r>q3$sT5?&NXXg9Wi:B<Ik-&mVoNKuKcoFdoO?Ml6q7"#3,HAP^bN/4cc]q&ViS20%I9>/-0h"g]8YPaC0[dlQJi%Q-#C3/l76gTE:K,s$>V:mfFB)/nte6'INoj3_b^XMt:X/OXt=:NQbC19CZ?B2[SYBjn9DC1'O-QYndNg"+5W&G4AJ;'>+\-),f\l%Db0is:%jI(@q4So!E,:qO;l'!#khH2+c)d-]P,A]GEE`06#_l#jR+I#:(mt+QDGcB,8'a?9d>:9s!T(rg$gs*\?6n>)t7!\Q0]\L%#`R^:>a^ol2Td@0TL*ukHJD&e75V]^IDSB\<""K^6maXqEI>hR.SX_K8"b]8Dldn/K&&Rpr2(m'"5*)I$drP&pk6:eSP^jD$!Vp\%e,b7V'!I&9f2>>%'M\oLMQKDXRY^a?lH7V4g#0(FX&b5cl'ZLLX[f3^/D1<:-tdr3##B]=1+p>R80L1jlGQ^\[upS_:HgP\MC'D:%Ha'eqVRU@YB]2<TFV-"b!ba\Rq),pfX;liNS9W`+\<)`lR=`nml\Zm1PB.KYSsFeDiZRm7EU;L._2;Tg.P%Qg-"9@N<&UPmD,jc7%%OTt6aSL,N&ic-oF_0m<1S?unfYlI>a-)L<BW1;22Y>P(.mWp[TnHMs`c?n--i0U:.PLt:-Bt`48!I&A0JJ<n8p6pX1t<Ip<73kn%]W8KYq8G?[h#Zic_kcC`+;NUKB1=f6Uu''+3`Zm#H_!6U15s.1_%M/4DjYMCE(TSWQY8F*(#7M!n_:l<7Wc3G`kZel#b"Cd0[[HC%]9^Rnc!@d/T%"ds1n28,o!NCu+e2$'mCPVO/t<)!TPIqHFT&Z?qqM%^3Dp[W8hV0Z8UA2Geq5qJ//S`Q2oh=</+>tK);>>'fWA^L%]C2)-Hs1AU5:m@>i\S(X+tpO(rmCpOk>mN'9?;J]<r1Vmq@'HHH,ca>nD/V_%E^#*`.((X+F6.i[:Ju[.5.l&O9b;(@):23OpYJ+%;L["FZF#OD_9L,'Gqc!DfkVcCoVbJ^Pf!5aji3B(A!e,#lIj9#$dlaql%9Uhjd@aHksE-4BJ_H[@:rYqXA.U2lf!fFR'eGW14a8!%C>rM:?cK;M8aig2&bG;(]iGO9\t)<te/l>A=./uI%YBkTiuQddfi$2qMD:dF%`fu?iaXr#F6M465q&T2W#Ib;FU^-r'T[?+Ko0%J%>>RTE;S>CGQP]3QYhmoiAW1k#TbA08!N$35,YsTQO^[&*Ib,Va>OD:NrV?q!iZd)688b('HB#I5Mf4sYN:IFAQ73LKAGU;;anA)H%@RR2M:.He1g.Oj.L:Hqr!#nLp]UFR2bKWW4*fRNGEOUg)%HT%_+;X?"gM8HoMQk&V.G\tj.OLO$2=Hg(VduCNg_&AbaEF=@IHhCp%9M$I:k7WkCMTDNJqD>Ga@*FoO$[O,(02i3/7S3l9*ThZ_pV8<?7qFa5VOrtoC]dU#kIZk[j),[1^&RWFcbH"V4UJ/DC(W;"<u[\b%j*hIp,*1_i==[N\'Kq;7B3nT)?16HR`W3r:<eMB,?HN?epCqRG&OMg5)IOq>iEO%J1<mi9DM0d_MQfS(]jY`,CX,#qSOoNj7_^lV%D/t[qiJ("j+OuH`Cr19]ni12*'PX%G8dq4N@T1lFP:78eRhB5q\$`j)9i5BjbB%*6A#%1?WJbCGd=)YMkY[JA.NhV6q$S$\:D%`:%;9XeZNQLtZZE*i,Xs-]m@u3uX3b+2*ndLm^b15jqH@#Os7")0U=>dj+lr[:[kWjgu3iD@IC1gP^]_b*BIi8#:WP@kTBd3$gSYj1A%->SMS\LJ4%g?uWj/oheod<IlVbT6Q4A+OGL)RH1WQt!?lI<]RK>T44]NX[T,5J0Vqo5BG&!:l$Ep0+=]K>kKGs+()>)DDV>2;XF:%mo*a7f<+Jm)g66I84^te!:3uBaS1>!_=anFkjOPpNo!OTP[l,$-a@'SrZg9Ak[Us+phrI@Qi<\-M$Y!iL1iH\FROck%gm1e\f"u_%*)>>=#:)'Fn1`bT9M7QE7euG4`j:O(s#\46mYlB<7Wob5OJ,b<lg6T@AG"O*4PG(dI-.G.1=j%cH.n5+"LWo?NZ.L(_iZeDf$b8$%bHZ5"__dPCMM[Cd@UYSKN;SMXCq8%R20-W")m1>;osj0NJeJnOA7-Ir8A+4ubdm;'*WYoPdr<R9n@$CCeKqd=q^\73p<oYVQUbHm%F<o46%G&/T*MQ]k"0V%,.ShQ;+7.QcLJkgdOQ&<@BW.>#N"oM2YR':%#$I69Cd!ZFD%%Ur]A#rQW/L)Q8rEFJC(d#0Q4XLCY=t^)%35NOb>*@cgc?i@GI`H:#'jK2Mi=rJ^="HdS2SD^S,n/.jf^<h^`O]8geofL$o"NJVp]GrQ31c!dbD"Y+\BcW;7&qph"r<tIqruKm%X#6`/A4Jnh!p?)GF$]5_%)>bg5E73!l]NV0Z`1iXaQsh#6Sn!*_MTSY\.63RPa``#Y$r.-Df_umV,\gr>o%mJJ<lP-]:'+jF79sA%N7;0DoZTIh<0f[/KBn7[B_hNb:pR6-IKCK.:,Apq*g$#n=NX+7V$./>I$&I$j5\k4>aXSh#Noh\B:^Qt/j.Im1iZN@(LV<f)\`7+%M8\MiDLEr#A_b<NkP/lFBuU!P780".DQA;-CGAf*JF&)V!I?6;\EFO@OoK-RAQ4eeq**aGfZVLFS$AN%"LQO!IC-3b.Tg4tcZC6R%#?/[i@JA&Mi5K/HY-9T8"p[Xnm;\PD#tOc#7O3.7FD*KD'3/*>c#jh!Uk]Q7kT`-)m^Q$A/P`2&PVYo[\V1V`fM%XDD6^osbu.(2%r7QKSYJZ4-(5;4H;]MHDN'A[[D8r8,8BNQ)1us4H8Pf*FNlP\-D?Wfa:54TS3;TWI#;F^&^?a\DDN9i<=PE,2bQ#9RdC,s$b#+G`%5aHF?cV#YMG&?GlF$>URbKFVe3=]aJRuXo19u6._$;[]9BqpOI'V_<X(d"Hd@%JojYL'$c:V5CP\!^a%BT3Ut0rsD+?ZFG#6MkhB%^_p=@l*jh+5>Nl+(gCu#O$V)V27\g8V&Wi#GL>eifrm&!_HcRC\_R<[A_sn#9nR7Dp$_D_:b96)Mq<G>9ld[%<;#*)AlG1=>Zq^(%"BOgTDW%3.=E=O+`u^"QHfQ56g9:m)*/Ob,`+6R)XNuN[mh,j-`[s6V]'mn'oGiO(GE$`r\KqU9ei6%EoEJo>&,i%l5BZ*(An+]U%_^o`8pJ`m+].>V`CpSVZ@gQh,n_0l_@a0'Uq0k7N@WeMdQDghk7lL,^@!Ukgm]N$h&bM\.p@Or('l;A_ChKdD#d_tqVL$g9[?fI)%&kGs:<qXn!`NPQY-D"+1b%.4%'j"P0LsJWj2OCfF+t,Ul$5gaAGIRHk<q0e]Ait\indM.OgT2;Ll+6.pc!c]H&ju-A`"TigZ2h>"%>$E80WS8Vj+(u;!XmbJK7E)YobETpN/#\7Qc:4&VAQX$0B-*(&:_C#XQ$9]#Ocr%6gd<?a*!SUfi(;(aD%OTrMb\qJX[i+Db^ThI%HOYlVM6[7aJehYK?l`ij0Y]OE'9*;m78o#qaseml!G1h\,_NYE;WY/:1[d38G-rp%ce.8Aoc\WNWmA2YCO>?EZaT`,)0"'^V.gNo%">n,#YH::rCHJeoMSY;o9t*c:`Z$Sl_NCt\_ok315rZnKCs\WK-n$P#LYRUI(,?G5b$ftNIKu0.]rf,M7#Dui6mPk\rH-QDhIK%Y%-?[tt^+g1DCe,_CL!)')4t5jMWRbi'KYfWkHDHSq)MbOTfmKk?.=7FcS"#sQPE/d9\SMWK]1&^T?PW*,0!l']]T3<F!6X'<fW9r_%AVrq+(SY2IX[6I&CK_l>=0gH[4fsObEV4Vrb&[Cdl`+&P$kYK`U2"'9K4g*@aDATfG)r&G2^p(a2!lm-C_fb#1pp@s**fPs0PTg"%*W#CRgp@iXm:hBXPEH$1;h699HMe&ig6*S2.R5k#R+)r8=ubuC2B<('G'mZKMmg"C`7T[=5)'?P9lD\Q3ZCs?Lc#j6Y^8S&lI<LB%?+]r0XVY@I5)JGK4YtJX]4P4bnY(%']NsL*F1j3BN+/#_C<_]&Z&'r/,1,3bG:l]t#'O.=io<lIDSM,P3lO\gV#*5->'\H$bX0&8%o"$3t^5rUN;Mks-E8kYd:5*&+29C8fV&ifh$>!;H;V*WJ)Gc,`<Xl5PR#"/bl1Z?hr7k&$GpM5VZOt=`ERWDd!Q;mY0$L2-KmGNO%bC2(j9gC0q^D?&V9&[;5DX9<kEGerb6c/-G`FCI-)qup[:E6_;&EA1r]L*mt^*Eh0+XY0\PDO"]8>o$kXq?U%(/!\^;]=q3EKm=&%k-j`S2C'/6+!+*'Uf*fp']"^?"H5k!J\kEUWLfNh%j&]36:t)"fAG!nYQTY)CCI:KOMKTXGTUY4A/VUP"9$NE.,Y$98EWZ.:Fnt$%#cU-O9ap9gYp`+Zb*4:].oDqB-f<0B5A6eXUmG<ZfUs^Nne(?>'<@1IWfHY]<T15SnKrO$Vk.2Ncf[9.\nAHMTUN%o5Pk)!0AUI@%2Q%&^=dgSrVC*Ch=1W,5XnD$m2kQ(`!qjR^:3P"A7obRA;!-\F=YF5,B_H52P2a`PU,9)2rFOrF@+e3M;heT*paqn`3*T!TJT]dX%KJ%0YTI;D(G/E'&g6/>ZOL>d?7p7VW*Tje\K-Tn,AB_4oGT-\f4N'bk5aC5?`PWcX@kb(@21_pZ<a<-10n6?m8p3\SFH::?8t:3!%91;;?Je*Ro(8u2+lf?R_ZN,DZmJ6Bp@#?4tnAA96fihR:Y$UDpmJM8C!<Y\n"i<#X3;qHjol?]'>:b:O[Up&i`u@7EE:QQP!'"_q%^f$TS)94XPMlnh+\h$jA^8T.ag_jsVGO=E.NHP)^F"ekV`X4AAf]:>L(oZ1olAKY4H(.>;SP^;U"V\oj&U!qnB\YYmJ9>0("<Xod%[<4LMU8u'Y)6d_"1p$NKFU(?dUg1PgCa[T&RX3ROBt>Zh*D$LcMWE<Sjl6(Ya0J*34+%oo^O5J0SBYWA-=Nrj)F0Gl9E=K3'&g^>%fHV-+[WQ0=4V($gd??Uafo-q>`Ep]7)356u]?,/o3sW3`c'dkm%H:k9iSr:,;65u'*XJ)o9Hg:;VFsd+;uX5q.#Y'hbNlc&Am_<0%LhC8*r)Vp$@6*bB2@&-gD\:Q<>^lBiU<OAuM(@`>bb[N'P!_%5[@WkKqa:'dHW`6O=*ps[Z=:Phg"u(o#IM+5@3`lYhQ4TnUgX@!%RB5oOB(n6oT@H[mBeMVd2n.q.o^9=8CY/A+?B6kaO!I@6,HZi:k.1$`fq7/V$Fqjp\9GSiW<s-cQiaK\MhMd[P$n\+q@"I.]>an,%\o*Fr_86CKrECadV9YJSN27g^_1Sg=`$IQ&G3a1uCT;V0L&G*+:Otc-U0C^[/pV3,VA_BLjQpKBGEH)l'F8Mt#'HA7<LA"^l!d9*%BBp%>Psm"<3\;X>>PalA_#_>ZUQ6A(hq4X":uf*]m+6c2VkfBjIX,TPZB0(7!/,b\TPSPem_U%J/3A)H=0]$a?c.)t?[)9_83)5N%ref1A)*?lhS(nE]StHcrCsO=0oapt#MWe@b:E:1'\&)4kVtc8c%o'G]g5E0\.4U"d]m`43g$o93KR8#[&k,r*7EGLS*og7F(nbNJ%`$<9l1*`YlfY&e*o6FL&Yc>=$UF#.,QDUf`[Xa9)ZVH,UcH(lG^2E0<pFq"D=]hJW=JFE%8n^HDLjc46+kN.&X/r"k-`8h.Dhl0\%StGk"2h[X*)K`D"4Sb\*VgNUUl'J]po1_S@?:s$,JNa?UV_*N\%7O3NZ^dXTs3*dn?5b##"C1DkBQ`m6%[\$TR&!9#.FKH.l$a-P%=X\jfa:d\t>sJlc4pS#8/k<hBdUEX(`kD!cboG5.3g$:8[P&JgW7/_EK(CO_1!AmgeZlVcO\)!/WMiT*d\YN0jk*n*/tL8l`Rq%k%m4D7/.$O%?l\]__QqYD-]:^%;S#0B]XFJZ]85XZpG[m=C-nB%!&Vb,j>2Y_"\k%_2P!(4uc:$](o(o+I2amj*3QdKHPUBI8&/^]Z%3KVoJ`>s!%(=.OuB"sP,.V7R8,gp34r)+_InE>in0oKj6>aMkE;QQE]5fg?p)1YR]7eK^K7'@ZuYoMFAaR\*&P1cPMQ":"VfiT;e%blN/rBCGLt+q##g:l0nf0JIXb6"FT_cZ211aoPhCNKBX*O*#ni7g<KdRn:9L%k-ckmVqa**&W@fRJ/]Wq'(G4hJYOW4Lm'gneg>Y%TPK2Hhio@"To2Br>^F"Nc>UMMrR[Z.q\hmODRfm2SqaXnX<Ne'[2*KR\_E7o/CqW]j?DnrHjda^amdW?Eot=)9TG&qmM((`mkBc/%DKX70jP6-if'"9"mchYZd@+pkcCFX2#)-.:+j3b*][!OHNbmO_3&kE91V,!I-u47L,N*uLPb^625J^W?XB=8B?Iu&F9Y(t)m8JT5%i"d&2ndH7%5)"t/Su;M5s6OUtbVAP+m\05@c#Hlp_CX_$.m@DlFEY]5SeP#-=N5*>>aHP;DM8W;%G*,.>;[ZmES9n1O8c:Jpa7tY%m1a:S2.`=ZH>5D41<c+]=ATp%b"=?:.$MNRDK*^&bJCUOXRH>WbVilH.guHPCO4o@h)`N6b-43_-"dJ198V^-U^nn0CDK&LPPVc+%(lJOZ=hl_Z`[3jGW-(7@bkIkZq=\kC(._h;9/%$*MLN.MHqR8=l_eI8V_Jd,@LmkI%!<C,W/)Xo7b7=m5f6At9L/j0)8\X:<&_1O%T9#-]X+eH5_m&=EW`Ta\$?Zkec"UL&S\ZpfKk5^:d9loIN129#g2GEpOB<5iqi%#m#1bV\gMd'pC6,uT-WMNM4*GY]"Por+BC^Yb%r!\&oO[0tmW`lt#(*Tnc.'JosmhWns40[4("HSq067f7.%S.\^9HiN;da_meTPR?:^T9-VI-)hVb7l+S8an@7`RbSV3P-l[1LP0=%pLFW0Gn;g9nVAon'/Ttm`1lJmSb^PBP+7]T8f-"[+f5sK[b7@.'+FL#B==rcJ!rN$Ek.h3g=m63fn]en[LPLbc_@-bA+oJT4#2el%]gG1;0d-:J)2gI/[,.&#K!%@Mf]OOnFKV('efBW>Ld-P#`bQ:tph#;pB`fnQO_/lFQ`tOjXY$9EI]Ik(n`'9Cf&ReN?g<pemG"hG%P9gP7eb"I?q!)#qk]4"SrO0+"f@PC`U)(B'P3flVLZN1C)O4do$Fe[o4jbb<A%5I=-VD'I,1`s9lHWcE,@Hh;.TYOuH?j$HYU#8l%A8U[0RAE=!PK3tt"A?3<7[gUSY?hq[S.Cg6Jp^].pn8EJBnH[U5EIt`H)hGWbG3'E-,4I"&7<Mu>V+eKW_uh/rbEs2d`^oEOqOhf%:h*tnLo5b[ml-G@-;&7bQHQl1\e($7?EP#'qE6lTc3gt_q&$@NApK'@T!1:u:OTV4kjG`F6m'02BA'lO'Y!N+[A=]U;M'.]2+V+L%)CuCVPT[(a!#>\pMASmbV:V3X2[_A8l-l3k-W1LHb<6+rYH*2^E,'W$6P5JF5AN?^7:I#]&m&5r;rSYI.kB)UW:Y[A3Q:-I7Dqa>%VDZr:@dDJd,j_"Sl82'B).AJJ;]WbYC^;L#.pS%?!XmSpEgeInq,4HtV!iX<Vli4>#sS(ACIocoJK]f"0ubjFl&8P,<W<i69FFM:%7#0b-+,7+W?aefe0rI:B)@fAlQr*Eu:%]f4?Ej;fVjh=rnOiLb3]`'2?g3g-[XEh$.1T6"lqQ.tMLP=_Mf<jnqJC?^!O/!agY>h?%%.e"[hT9eOi'kd(enr>KM(U+IX@9Mc&[b_XZ_nD/lYB)u)nSV8Yh1b(&Q1AU)1]BFqm&!CFBpVHP=^4%j:ATR;$/^\dBbpl*o0Aq%(s!fU^>B.(9Hm$^ET:jD<6HJSr%3dCjOdchC,uEs2p8n?AASJ!j6#c^W<?l=-Pu=fZp`"d/B3"(_Ih)UCHQkN^_:ItN>3=&W8Sa]%AYg2.C%V178(&_K+`^#fSu$9n5#]h,qj9.YB4O7o4_a6Rq\.(503qZ&^(WB^iM5?P/1X*gX,QRdJI;=`$#4nG/O2Z.qg#n?N%uuh%@cqTJ,q@9g9'jCQRGE%bMb#TRK='<ECD,694el-QKc(daMQ]7*0Y+]@!,K$>86+7*@?2,r<?_<Y6?:Sd%p?WGk>TPaFu5j/?+0\:%$'h->Z%f*VZTBldqf?9;L(fF6SVd7s5D+YugnHNA+b2Rp#[!h`P'079,dA,Q*hjjPe!cDhI!d?c9G/=)La3Lgbk$QqG:M2_=C(oZ%E;)Tb7eaHe!^A+#n5q4!!T1?1X]q*Lk2j!IL7%.p^&i,8GQJ6NA<s"_C.,CIkUK@L-3?q,<AK4\=J$KZR=i!6Kq/[+1cWXU9X*[@%-dU&K580J72=@rnICPJZkcM$u(X4cif8sD,cW[g/OG;!Md">u1RR4O/-7@?ARbAM;W?jJ^.>6+Uj:]4cm"T,mo7K0UU,WOK9qpr=%iU^CL/'+I#Y/<p1f%U:r,8;8tA?kXg/QbjWUk1sI2_.9C8;i&D<niUrE=*?;]W\A]LZI'CIAD4*mD7i"&na6Mo8(%DVP[E4WlIIB%e"UF.5_P.LUSje4kf&<t#^@qh?/rbE>,fZMXj[*E^S)uaiA8:&-cmnrYlS_FOfWk.5QfU$'-ihsh\JPdU<i79>U40Ti)@VN8q#4u%H5f%O<i/IuCZCU^;[2bsQJ#A!+-.+gk8bSj&).\5hABPD[$kS7X;3=lc$HF6m-Jnf\%"q6DRt0_JXt/nRq^`t`>o`e*jOo<\#+;G%3LuYZik0?[QAiIH+!NqopI_F*C/O<F0F8aP?sJdq.OW2u='7k)d<G1a(dhi9h2BV5C<VKdh.uXlMG(#P2K@GsYVp>Q%I4iSh3P)\%/Kq+'AOQErYjC0YDL"9\OQh6R)b[\*l&MO\MsPsuGFUf`ALUG^<ssUlAZ;9s8390,O!QsZmB@rTPr-\I?+u'rLLV!b3QW/TZ4]jc%*"*9I31jVj.#cEbNBQKhS'7`910b?@ROh&`l.\ME>Z@_l/?b?!IP51O1Z3IWMu7f!l(<G'S%nuYhu<&tNdjG[8ONqAMCV_(!KlR!%B]Vo+L<TM*(>VH6%GDL*!PN:CXuJqN:iBiE'<72_XAZIAOK*g<p,n\H$\9lTj]%c7V!QSBY\(0&3T3Za`)n91ZZP^Me['7t0<Fk]%:.dn>:=ge7IH#u5##mOI9:\""ZE$Ypl(/PuNS8q/"SP$`[ARerM`KKn`I+]>GgT[rCff0o7M-,j\d%mRCRfPfP;rYoXcc\l5"R&t%'p;T]']r\I($*nE@;0a6D,;h#.O!WYU;ruR,T[>JM4>6p-r0l\!]O_"f3#q5AD$L&,[%FsDHEM[?t9JH&8bL[H\5GP:+CQOF=[SR%_%$QOW[_#_<O-hOhc@7BOtahq:r0]J;N1$&V1)34Vt=nHh*cWhU64a1b*DaS\lY??NFY]s>V01NC;s@2)15B5bhu9"1:Al:X2ZBG%;TITEq_P,%,NKe:OL`mfeH^-:ZX;D5=g!f0q#b,k=Qu;$qgK836u-.PH1B[E`#CaW<P2,rI'jkI`VA,6+Ej`5H&JP4nNKtf:Mps!%TXpSQRD'T8Cpi+`I(5$iL#O?k;r%S1"^S8XQ0ZrHRY25fTDg"2*p;:67rG,'TLjl=:HfC+2R-dr"cWTkTj_i?E^0.Q2DJacFM.p2%fR1]':o+CZ$>STH0>/)oM[VY6NnM=VB0tL_Z49Un`fQE\MkTo$,^3aC_SXFh"ALkA8up/L*X315L)9LT0"rr*j920rQ?lpHWKb3l%d^fSh3!r'?)6S>!E.ST7Qd+Vnn^PU%$BjDS!B1Q)fZ*kuPS_3X^1LDn`<98-lDe/V&^l6*6gCl?*nIM`EFQ5SBsM+a*"_nGlsPeY%(eX;AidTSH#<,;Wa;>lHX"%/lUj(L,'Z@&]k@YH4)@Q,U>#3CLm<:/2];sPQ?B/]FpiaV$&I0S;8b,lied>`=;9!`END.SQ1^irY%6sse&93K2<#n.Xk;4rSH0+V:<6;B)Nq*]OH%$4k@JBjH3XbK)ueh(WJD-rX?R\T,rgqIZ9Y&^45Aj*A$fR-VCh8%rM-Sh]og(`<f%l!CClZ?3@c8j-:W9VQQE,pjf9pJk=e'_[fMTSYno0!gcGM:g)AX0[bJ,o<7i0'[&&T>FAu>8A(rr)6rEH;u*bVe(ZLKsP[/)rt.0%i^hV5Wl7#%fd[B8J0*-80O?2;-<l^\r5B[4F`sSt*31^2m>Ol@$DcRRb%?puVX,do;"Pff](65IMi'NF,9i;VJCQ(n*iBJ6`Iqb&%_V5Li3$2n9&/I6"'KfFQ-6?eZ(r4jeXj?&M9I3LDrGj^60;TSA0C.tj)$NGZW\Qo6MZdtU/0bH-9o/tD4=r7h2=d*8q$Vgp\G=V\%h]6Voks]C#/e&]JP6H`"G3>hOR8>3g8)TYCfu&XKQ"+4TlHYTPm6thQkkW"*)-8mC)@K%cH-hGS>V-C>n?)/`(@e'/D"hi_0HDif%QeKp6C058RWnCH-BFnQ1esq'&)Y>'cg#EChl>tEseQP.Hb1B$!G^B^1rGdc>cU+5k6-[BNhoZrHCa"?@c'N7*K1".SR\amX3:ZiF%p5Xtk?n$Z;KGNcH^@-0N?E[%;.rPWcE/_'Ib2XY0]FiO&C\)/6%9U_[0eW2F</`!C8"QBk_iW)4TG5D?_llo4a2#_g(;&0g(FP65%X12HQGmKJMMAK),]Gh9"e"s'8J,I)[j,Gica<7Q!'3GLAl9_QUh%JlS>/C):GQktm",X>5<]K>;0<_a_P@`rd&]<j/9A=2.jAr"O%TN,j&D:2(^T8XanC;;kcUY+?fHn7l5V2T>2_:@UiK+B'aAr+<0bopR\,9e9bZ-\A>L6cc\"i$(k68Nq>IL4##%pj!hI(=C_qKD)l%D&lnO&BB]DS7!BqqfIBTZ)(39GiQ7J!Ir>0@T@D+'WaV\E:_<cm>+kPrY@S#3tl8s>F,9p%VFZRRkSEto'83qE(Di:&+k*KP`liY%[Mt+_(1>Db8.8NOE:gm2TFPo$L(K9R!bkl?8;gI.d$UD,!%Zk>:0n"H&jNKh)'a`#4FW+YbS=[g`YG+[FglO;7e!E->qVA!=m$aV%Yd_&<SQ+4K-q@_6'sW-6)0Eg`J8MJQUpXi%A_klgp,!Q160;n?NL(?^^T4:;N'O1^$rI$+ou5CbbA%([72iesMF&OILuM>V+R`SD%R9&gF"7)7WCIL83^fJ'_R1((e.SHk'8?8c4fWr.O$CBte=bU.7<V@s#A_f@B=>dWnS!\fF&p2kYe(EuWHitV=Wd&u#9F8Ql/B5e:%VH+"#rE^>arpc8U4-%"2,C=(F6j['o5cuR;'Mr7o_(a0.r*5>+?5`FnOepPD)]i=]&Lg9X<W=Q%"uYr\.8J2)f]uR`7[/t$],"E[%aCfl`LKVH99N<^.laRju'UVQ'D!Pb*CQ2[/C:KHX@@G(d,b^u%,%[0:fU+:-0pNb3PA]9*8I2'-oZJ_5`'Z97%)A<&KIRtXcc,]q%KrF[P'Q#mWMDM!#AW/Sa/CQNNSZ)h64g;Ip,fgEs,BO#V=dgrP^W'/NGOc2s!?0L0DlN\l3=9RaCSfLACO/HdRAbI02Xf8bK,mB@%4MXS(YmiT8hmmEg*[$;F1Qp')H9Z;BV%K14],iLM=SQ+P<lIs!0ddlTBP[",,d)8qVt1jn;q=j^]2Yu7E0!aZ9l9Tp"sLt4H'n)A%[eM=VIQ)PMJ5N8HiC*.a4IE"uN-J/sZ$TkdXl1h^*SagD]j<:POdW!?!ok(t/WPA;g[4$EQuoc<iL7;<#"QgF_</.:<&=_mXMMNj%_oTJtBV5Y^JIsB+Il+a*F_[k<Xi)[6AEPnd,CH,u_t!Qghu*F;rSqhqn%\hAhsL<:=7`oQ5C`?1;M<Lhr^ctM=9![Ha'W2'pkK7R%ViR?3rpp<kl>M.:8?(]*X&G8iY"rF3P\QXL9"sU."?>_o1m1'6e.oJg8DBKuhEZE:18'eHJ4<h=+noAA$+HcELdUSr.9>AMfCh@@%hIT+^4.%_Sm]cenOs=;/J`$U2W4FQepfcE6Z)PCG:?g`W]1iSrG,0O0[#R)E;W]5/-NVIWW><7XanMG,hlBa]_\;?+RB4^E@Q>PX%.[8%A!;nh-G_.d(Ub@b+=l]Z`3/PiZ\W!uB_$,Bkff/E%/OVt0d0XSL4F`h]O-9a&VQk`?"+Ik:h,dn-s+16T1.gGAe*Xrl[7:Ve%hssk@hYbiW9GP:4-:FWI5A9<5=!SM=UVd\OB.%/PiOp4E?%/gudI`/K4(Ua,_/;<pOsAolX2SD+Dnn_A(f5J@AtBFVJ4iWT(+b!s%,"#Q.lOF!&`OBJjhuRkI%6g"Ji2@gV`1cA76X,rNi]Z^K*U>&6HKG`tqdItAWP6"M3Ke*e^Col@Q@'VtqN0Q21)0*sX43j<!#)Er%'gJhq$7W@TgNguk&S6o)ZuAMTJrJBJUAOtPZSe30cfJsPTBVusg"QH8?*/.#^:IM0c2=-Hef;ud47_pFk\SfJ-t^"Sn[@RU]WLMo%G['2ar\_BkMHBaRhUWb)f)5%kF12MRbAaqrSc:ZnC]@%M[l.nUnZpj07YZJMUC^s9MP#tu#m44%&n'GdcpM)@%h^/W\%i997!E3.%?\SZeTZ]Nqe=E9!1ZW/@$NgaM.+s)DD+A([EPaGMA.)gH;ijI,*,BArs-Z#QD0/Jn)+!8hQ]%SY=PCP5&X(*q_M"gpU95]rQ1RR>%6r4_/B`Z?H%l#".$QoQB[TAgV>/c&sd0Z4"/nON6KaGB!-pfdak<#'BF=SL-mZS(S/X&IK*-:`]TM.^UL85`OV-m&2rH((U:PNp;%P^Ff[<6"6OC0i2=9?8\-e%go9dW=B3!o_&`LUldXad*qD:,hOi-Cab1(,<[dNXt,lb&<[bkZGm@K;cN?OKL,0&l'2HS$F_%g$]h@%j>AQt?+#d4U]M4t#9.smL'&]#\R`\CQe:\e+(;;/lNmZ%C?BRsi=8'-_2eRV_]Jof+?,Q2ESU$ThbkXcMTdjr\-3"!L-E5u+u.W7%G0cTDqo+;JY>+ABJ;3d\mVbPi<Ou_6+6XtK'KsFFL.[K4LZ,39!du0j2sWS14uOCXf9pmtCV*'m,XoeRZYJk;</*iI'ZJ[P&r!e4%<+hL>n6?kKP-FU-+^4=f@!O%h(mu=+L6bYJ4IEOuP-7\9VD.&A58BV_b#,[^g^,_EYe6D4]qY?S$^KZ><W$_+7:,,?Wa?QP"&(5B%ccN(=5hCdW!utpU#<Q>+TO8&hp$QV"&>=n[&-T9)/G_TYVM'TWnGqXQkV<sYL"DHPV_Lihj-470e$HukZZn@3l@9.0h6`%(Z<M9k%;J?0U+fc\ZAu0ZS^t0H7#)9-8Y`u2R&<Sig<;nmrW[Lc6YY;qOhqAb>@B8WH;G<-aMA3GhB+qc(K:SjNna8hfe?Pg[""^o!IE%Hf%:*.<X.0Ml&n4_tVM91stCFB;]]^ikX?^K/>ognOL=d3DmYd>9PE2/^b"lB$_@OSUn-O]ig@bI$+-55G0=<,-<j+8Lc)s\i3JX_Sa%3FL,&4SWq4LD\Z"qRt#s5*mN]6OP^`5h/UnSGnVS>*odOP1`6&$F>UbI5rW!N)efc2t7jQ/6JBqL%Eel'>.u%^5fi+3L@Q^K>J)%%A7%C;*#)";7keftW\!=a,IkpQ0G!/hP>;);@;%p[W%`-r<8b_J^%qtOp9A*48bhelGf5U_A1kS:*/'3Q;TY)/J[0.h>!rn3Y&r19%OZ*ZN@H?M>3aDnHT-PZmqati&^tFfL)cq\p-Zt?@DI[ep3)IDB/Z`0U+b4+.j>TY19>_f[]G?3lZ>Ghd'\q,.#$T#)90V:E_qprD%gRo`0Bt.RhERFm2Wn^<9$POI]n_'2moY.JD&V26pTn(5AME_H+Y@CE\N>_MsdMQof`2Y7hOrr*=j:?g(>$49*auE\.07'"o0NW7g%dC]2l9=`b3N\`OUd%og6JX6j0-t#Cs.iR^BVZCi?&WHWZrrDA,c8Zplc5,22K*o?!"G0mP2U'[=L,.oVU6/Ja)kL8CEaL`1@j/)Y%I2M@4\;iX.YVg29<`jef?-,t2ZPi)7G?4._iJ1:*_?&MjR;1R;6#[NpQ&P=b#3uFp?%0O7:&s]@j/`Ih;TLP6nEJ2n>A3oMG:BO1%JJ3%WS4"dP0%WBtZ3hbc&Tt=s*e\7(MABZjq6D0I.4A>5Y3i2hJu4f9-3onfYdNa'hJBl2JdP!;9>$hG%s]1U3Vj)RPX,gi>ro?M%`cp5_,\$^lol4B'224@$Ph^%A:k^YoW+&uM<.h'=<cl?LVQgX-I^unTeMKhU:.$cQG*g_/:^rSX3HcQo7]YP4@0\;72e+Mt3B6Ck%n`4\)6LeQic3.CBNU"1g4@`]OfnLm:`2:gsB8VQOH!E&^La`^i(j9?U7A@CQ$54B%g@6-4Kep3%lNC5iU;_`bY$qjU-Hcf-MIX[m%DSh*_G4!fg;T'H.pD@[/D[-oc(\JJE6:i!]0b,M8>QG7rNYAeZ/]dBljc5A4]d_Sj@raheV!JcPPk+tNb:["TZ<8_/JXWf`HWCKJ%chY4R;F1eQ^b0D[_597"TkSWqXQ"SAF.\acL0bcn.<h\8AHr6$QqqV@(2gQ0o"<k?'iP?t'e?LX7jSRO+..$FUhp5RV8aI\p2de2%ct#<I@S2VIf@@Z]P\%6O=O-"lb76Ks$cC[UR[sEt$tm3NP&#=Fl8(kIDjXf%"IFJnc-4p>8mlt3.*.S4,>&;M!EZh:,9<j3#JUY1%AjeLW=X25"U>j4D>4tIFFmh\UQ#K#?R;k/`jO#/Oof1mN8=;7@M:qELf1C_]pJ<F:?%hW1K!,'^fi*F]Dgm:/=,.nE[/^cTH2QV'%q]Ic%hZ*)Gs)?fRY<VTu5C=UAp[M$$mGgE\`C'WYnW7+liZ[3oiZV\!OKWoM=$5Oo*qC$Vq20rT`C%B!+^ac$YB\,i4QJ"6neD]2%MMHSu6b_P'JUPL)rZ^>F^O4!f^>^;CnW:QcXlCS>r+j8=I[=0^J,JusrVc2Ib2HXc*oDGEpA3ZRiVsHl_4)G?,2[is(*!p4L.?d.%"\?B+paef7oIWTXn-kKd4Td"Am27Ci)nZ>IoNGn;7%\E&9S=H1'7fO;';J(MjKnO]qAZp:-fG_iB)i,!HO'f=>7flt57+(bI1N+R%I1N.[4bG1Khnpm.hZ>83O-#6:E!B<qSm`AI_J<OJfGRj)H3RGum;$t.riVRfMdG<MYm>aeZGZu1LKT;$JJL,Y)/=/t*5NCtH\>Up%n,!C#4MTDkjJ'@OK.]L:Y`$jQnD[*%d#4@Y%)*!1__4@&!0#8\"JZJkK.oRJ__=@5"#3-g:lNaG(it8si>@,95Xmtf%ESm&%EeJ)%7p&7E)49qE*MF?5r]N4CoIW0-n3'#=oK>SeoF0.JI1Od44TdQ,ha994p'fLX4i9-BhZGe5MDJe<%mGS'](?EckgRhmNF(QPh<6*/%i!n'-nBHZ9'#4PE*l8M8#'#1-LN/!=JK1?OTcB`o_&T-:i>eP(5UW^_%I!k@&*a.C&*jKa"$7=q8SA@mHZ05RH[&'4ScKm<H\Qcu%Sj=EjB:&qV>G)5ZH`.25>He@jHaj=EHb`/8)=mUsj--,H^pgNY_"YVTd'qA_^bb`foKE*soEYEtHk-5YI1HAcI168ZHOg8Datj_W%oEYZc#%opZ69bb^!IY=^!IPCb!IYId#sAAX5i4pr6BC%9^pifp^b\5$oF)<4I1HrrkU0d_T^RFUTPpMJJS21mk^0fFk^1)Nk^1BA%kSZ2iqAM8LhnKAUoW0ij"S=j%"S=j)FJ5<0OFY'#OFY%MOb=ca,_N:O,_9SV$0YSI$/fSY8]VcG!r<s9d^<^a8Iml"8jM8991$tO%P/$8f0);i6n<2-S^uT9l&<i]/#+9T#).q;uS:N#\8#T"g4bHJogG@W\EGu,P4D'V8PK)3icjA?OfZE1N#X%A*1\Ba*q\jh`p`=ks%H3U%$*[)r*B+R]!)2@_F*e>`5B.1n9k6OPfEK>('3oUQ=kmh>s9'@.W&pf;/oO_`D9'@.]dMF"A.>(-89'@.c&pf;2e8&]Yaut-*%WP#CI#-%ftTdhXrB<Y"On/8CW3dq:7]]L:Z/"pV&9"W(\[K?:@\.X%@Y.PXc#-S0$i@CZn!6[;\6<HS#+I7331Q80Tq[@"LUON_a%!IG>h_,,@eBA*8D!a7kH6Wu6qcCgIsW&(M$)sduL#sCX[ZL#lpQE7kX]Og-o#]Rls4[WJ[A'Z9aCu-tl-+j$_F9-dtFieSeK3^gi%E0h(<8&.cQLGS"f6cg5<o!.<_Hg+p[#/52d3^[7>hh,8sS=SUlTk=@!a1F,1VJFL#R*[Vtk-OLg#h-og%#*q*H3V9/E]q<K5i2ZQ%6I1a\d3C%d^Vh!*'D`Ua$cg,"B[!'5,<,o"4Zk(`%$8REFG@kiSj>,=H\BL_h]krETB$k>'7'l+i7*,bQ[Sc$=hm_p))D*_j0PDH%cnfJboF.7<HhY_cK\JE41]CMW:$<H]e&4J'BL:$!RaE@A-M._Ckn&4FdgR;V1nePI/_6oQOIFJ7B2D='iYbeg>'U8%F::?#CI6A*%Rb$CQ]I*7ZY\@r=6YtH]NZafea%)Lk)p&\*oBpXPg4Z'62X`Xr\4uF7#2K-b8'"Eg)0?O<K\c:)1[q87?UJbKcJY2=1]4+f3!+'a%o.pNInSncl4IhHdS;."\LbnlGMXrAZJoO7e_f5b(J=JbsY9>p<P`DE,geUFBm^("SP8dB+7l9SY&>2+'q7diB9-=2q-_/_iUY#g3%#?^upmq[Aq,WkZ%D*%$+)`>[ms7!'rs/DDa;N`P.P']uoqY5"/4am71']noYGJF"/lX*Mh)?i#;r&HIT2@IYa'\IrXP'E5YOLCGt%-bX>MLYaq,I8^oh"a1b3dhn!M(<LlXJEjPt9Kbb]d#_OD@F4)iYt3^/=aA3:#Ag'O+\p1Tgj6%.okRZDEohPZ"pnlWb?PDG_t[^Z%E=-23B\j;K)FUlfDQP,r=Gb9J*aXK-1IgAH[q5gq$;q;(XV%3<ageV*ETc)a.A=h;^f&^>IkGa4)CooPIVhe@Y+q(8X1;iA#igA9%nuu"rJ+nP."N#qn3i&!e7P-Xs+,Yq#<n9+moMf'rcnO$IcNM#MTc]_"_3gL"9fo8X!.A[:Qn27oTI\,>&u^\"n_%O3/0_B3R00MZ%s$7@JKYRd&c-ZF[[`E'58V>p;)I.9s13d)f!FZDeb(+&a4,EmQ*eS+W@_VbSp1I'=j]bYT&istui>*@o\oC*Sr4ZMj%,Y?+EdRt5%*umbEpZ2ND2:CI?LVu)t&:Uc&?aXUd@[`Z4s#-Es[r197_#2+-rSqhq^_1_O;e!%!\$QiD_EJj)B%&EJs%).%-`ZO50sZ%X\;Wpl%N3+'*/a.W7/Rb:A(lj3HfbFN2N1(KLbd5&mN`J@"mfd2/iWnQtQR^PIKT_VcpV_,@-+7(\1`i?;eA1:(U@0_7%AU/ODY3l:NBq"^%/mt`e=F+G]R7Rp!Z-7CN%W&?/D".q"G_LK"jnfo/c8)p]Btg@mG$`&*AFHk81%oS$XX]McbhTM.VK2AQ:aAM0&ZVUWa)4J<?T*4e%]62'QnG&]O0-&)VW+V$U"^DsTNT_k(Ln>q@aDuE#h&G2Tom!)iS1RaR$8ji><=Cg%r"lo=q6b0nE:r,],O4=KO:=9%]!4UI]$Tro%]OZ(Am1IT96qXKF#;#9!ICDXLM0:*GBMU9O1&:%Q5.UHp/A%L3GX:Z0:)cm$#kiWUZ3-SM%FsQ#r;Og&@[T1=fQXpl^arl9DAGPO%q#XEAPtgRE[E.<C$rMJ")%(eWX5/['V:4*)m:FQO*/>?>*RmdsC&^6`nN_s]Dr&#3/(-=b/U#'sLnMnQ\$`>q\8_!3iOoAHAoe?L%WJBF--sTDRJ64?C>5)=*kgisGD9^<WXLM45Nl.=U-nlXhn9))%l<RU&T7p11^gug5.]=#ASg^ASQStu2@.fICYl1cXro6&jNW,-N%s7+-Js$b[lq=AG%o7)&W?b^ONT7>SW?f>?:]*)d&'ai]s:L!'8COn?[i:PI?jOcF!G".Eu_"&^(@hI"]Cp\Cp:]\Y:a>e9B@gg7#%J1Xi@"M9PV2)8pH]>q^YdT+Rp6Ygk`R1O;_/,Cc-@oHsamN+`cXguYe"$I(jR*;ZVH@cLgLsh8\_UQ1]9HhC'qu)K8Z;fGT1rSo3%99gVnfkYuS"C$d15?!HCaB1SCq92H[TIU0m(;d^i=Y(#"r3"E88@K.Z=X6MQFfX(\'bhY)<T8,2,Gf[HlB\.3NkT686l.F'-tG*F%,1aZb"^jh/HnB-!\IS8[<#'#aGJoBNYiZRQ^^:1r^r1XQ4_gV*PH<N45V?aOTHbpXjMJ&5p#&=k&$r55aZ?P15)RP*ZVIQ\]`Q/n%LQY$G*C\*/KN5]bXi1GO)5Fu?L8s]t\A$*=\sOm:'S9eKQ7N7Xa+.e18mK7:A[,DbQlqo[ZONS?!kS(8`JC!u%.Y?O<$6'`mTSA/%m<Li<><nfApNl%GK($]?A!eeU.Om1=D_HP=E3U<DU(i`SZo^DlJ9./P\&3(C;&A]e3k=<+c2.NuNEK/h$@,qEWdV=X=HD4!oR\g[%Pffr0b9#=TMS(eSQrU40buf_SI?c=M/WADjU&q$fF'No`V#$ckGDTo_CJETD10r%J_-OQBrO>L:_G-)c#N.^5"l[WaWD1$fe6GbT%UL5gM)R\LmN"fYOW`8"pe&6NGrN6oAk7iIsVn;ltB!%@#GF=C-P[@`J'A.GjrpC-AjL)4fE/X#dB/1q\n$l`&4^5-HNO[lr)dQ1l%?-4!Q2)LLucLK@_7Q3iV[mRim_C(SN"AFIp3)`(s8b_%Eo,Dn[c81C1Wf`LS.6M'^;:DBm2J)a!?&>`\)&R$m/TmIKbud\5I%P2U%b&lAdm4Goro[,@0nJYAc;86\QK'^p*bpFiACp*0h'Nb(0#*EJL9^]):XD#eqc;sC+B/W"PKOsB7``VbaL)S/2MKBY9^G]NNkI\s6%Ge;5,"\<l<7Ti'rAuYHh',5s3A*m-pIH?u+L,-KOpV8VTe'riehf]H?]O0M:o"2kb>YCI@Dlb!s:`@C-'$1kj8&9'4rpoW$iG7cu%oA.u*,)o4PeneTg,s*'@WdCD4%CCDSdX.#2om?eDgZLH4\#-U"l:gJU/89r:XGO"6-ES!,1.tp0JX!(!:nOYB=..Kql`peFor__`%VFi1XH&:]dWLA79Xr&$DFNUL7j!(5PQ$g'jaA\"/[oJb+XQq'ejt9"0T`irY\Q5fnr>UO5;74RnlO`!I>).=9h;c)i>jj<Ro)j>5%HW"Y5o]e-*G>k)JQ4`#o_Q`lsl,=ASq)JV41&PnH;V1,<[oGf??sU7:8Q!`NMS*-Q9eoB,&CEjbOrCn[lGTo1Y8_c,"(4,:/O73+%4C$Krb$OY/jnmH>_N8^8L^L/"dI_Ln()j_9O1F$*S@GSrG_p-r7;1X:E%-nSL>Z;E5>/,MimkH,E8An+OBnF^Sd^a'-`6CnW9g.&%<o$8RXt98>DDX(fiEFlRHqr`k@J2Q#T,4"9HEN1Qo!dA[1q<`n@d0\#IUouP,J.[/W3NY$mNXZ1KNh((YP0J^[hW"^7Jk)hVa\l4%':=]Xs7+i?GNkrNs1e91A[ei&#jqfa+7;UK]hgi[a3ljc^jlCi!L&cKJX.0GYXAg4j]M?T9N?3W?BSBc@LGdDL1+2%brp,[c91r#%e\1X6"l/ga=[b(j!&MKaF^J]1<>>KXOH*2TFO*48<fEJIZH)IEd(E\#gH6:?X6!OTgm;$IWpk.DS>LR5QOt)AOVR/%&ZY]9llUH-%LIiFD2]lku;&G-`bVpmEqJb@\Tl`@rU"\LcM8t0EP(2u;,$`audUC)c&aGM(9J294WoC,/SN].;WDZdk.qO>.TbSAb;frWhZ=H;^%6P`dF%jk(Inhi:(I[20>LNV@1i"Hum.OO0q"0/",]6#F..]#;-3[]CaN<(eeNmg(TlODsI"u&jFCZV.n@S3j]!f0fqO+p^!/n5d^%rQ2rW(A)J.99<u>-@;Q/i*Nt8,)/q2jijD[\S!M-k$BkeQb)"$C$Tur'KXUB1u%[WTGPnYboYeFe@^,%=\eV(6Yd(GgZ;nA)f_2@%;i:=Mk0kTMf>\t$<A>F3>:j-=Wi2<KhDV$J8#ZHlClM:d7V7YH"EWkEffo/6E&7r/"P]8QJd*Jn0R'#"AG%"kK-7;kBo9:[p:_*r%JlNZOWZXK9lU9:?(d`H:[k2:8f9Uep$pAT-NDN:aGh5I:/b@l"Y':*+e)&($)&VJ$r*=WBZ_C`D[I'M^_psN(#WsJ[V)09Kfm(3+%C8+6\!4#W_1;LD@]C@`QMg<lQ*"pe4k""?i)^\3sr^&M9nDAsd%a3]3"Lr>,#VkZ/BBs.:VomWs]jTO;h@\i"*`M5SNEfJ^UeI(h%`dLcj`Y+@e#eEJ`(iu!1-m]f:Jj@[PiVX#(?S;M;6W;%fN``$s/pbgbA0"[;Kl"4sFKM\K[0E4oPl3BBXE4A!?@PFF]VH9Dj3>o+%8oJ.%V'8]7X4+h#LW'<tcI8\0`b_s7VbcQY)Xb1h]NoGEf^:)I"+RAgk:!CdDL=:Ne$>MHn;[jh?.1]hcl'.)7Bru#b53=^!)e5b%#PPD%3)!.*jEQT3>XY\%N-79K83[/R/P\NYm-k2sCJ8M&kTU<A%/K-)JZOC9SQkYP^65`';_/WLFheKc8.YU-\9a#V00+,m2gSJg%AP<K<5b5aQ:M%'3"d+%H6D88l3^OM@goT2cD]"g?k0M\%XI*n>h[gr`YkM,q[rGpZjNAs#%8.KF!&m@X"(h$KB\JI.[g&fYR/.N*%gIaC<!rq)[nCX`VbFI7hs"XlT#;Eacbu@ht'FRu=Yj69s*/`.ael0pZc""80@]B]MLb5,1=Ge#WJ?\9S[?B2D7V(8JD$Yr:i<m-4%hnl#0\S>>fO_@*#:N#7p0P'LBke)Hjf18]WpFm[V^f=h`7`uYQD4\MtP0AIU)ho,88EMm^X[>5XbQrKnn]R'UI1GC#JR-Zl#.l4#%ZUmbg]9uogLE/re,+-<mW3+IK=>.Ksfqp_=2[*c-7@IS$P,2F&#$Ki31Du+^(a6Kp.Y#G1m\@`\7B)g-?EX4:fn$L_D\ijDhM>%r%DY)+>NJPY.[qD&%WZrdul?6R];ZtED2g[7gYsaadXPjZJQ3[5Y\J\*S#e.IcBF#Jj@])tZ%FDI'qYW?aIh`el49\u$`uhq4?gD<O%B'nVXKII3HnmKSV2C1*4\M1-B23%t-YQ=#ag$E96/h9>#,-\Ygp?)!R$[*iJW;/b\1S&E>/nTSH)_+YGD<;Ddif]Xh)5Eml'jS82%r)8q:-0mA_Cc6=CfPYaq`&SN8+0f[`W=;;gNLR$b2D(ZlZOUGT(Hrtki);bS3i.S'MSDe:?/Uo%baCr[9!XhK*=<'g)7mUu&A'l7%0@n?Y=];p]K38?D2-DlS]ge:'=/a,ao4g/$f[+Ill\Qm7ToZ(9rl$:Y"@6)D"uQ&`A!67$YmkhXQ>o"_D[j8\HGfA49E$nm]C(-D%Pki0fKkS^a'aWSd;VL3H.PW?S>-*[r]=DmapM:)rZ;f`q&FJ8n^W%OJ\jNU&#6ss+Z=Z`\!g3@1VmL5q@d)oCVdlBeXns7D4?S]/%\%M7_<O(\#.J%f>%af`GZ.#J+?\ZYpXR6Ro^FbQU(cK,KPVr`UlaCuJa2XS`KZ:&(VRle3j96s+mAI>S-jCS3XGLX'"N7u>YsEg=%9<F"6MB_VjpcK9[K#,M$rAhrG(l7'Ch^J,FJot&`oi[g+,D+=7[`q>g&@**?F"F$AYuj[WqCH3&9d*^_a/:@2ci[FT>VqNWHnk=u%gjRkseY(-@Kbt:dpO*B%Y2L%l])Td[jb+d's4p$B,Zg*Q27BGP"9f.<j?@p@)#.<s9bb+C-j)lj:+];:"^]0,.;KHq!*jpPF_`p5%h[mpl-@KXaKuriB<h^G*Bo+KT$8.gXcj>^i(D$YVN4#E9IB[)fM)%i<dUHk2i@#gp+*,+>388s"!"=;>=p0U]I=QuYWsOXdhk`T/%SgKph-cffGOd1.t/(6pFLa0f;*'Zb4g(gSQ;m+'#"IVV.et%sU*bAe'"2#6C5/i);XE=/oK23FCA(D&45HGaTHs?]>$`t+Rf9lKi%LtYD15tJao16XKdAWaA'8.Hs?d(Wo<FftHK9j"'F[=C,_*Oh,^gf->?np9@K(`jk]!(`Vf_=.l2V,ga*;U>Rs:KIU]@%kQV,A6Rg%,kF?TFbA_3T?X5S!7j'J5&M:E;?`+>E((S$JUm!ao`HO>b*&mQ/auNbE_'^aCAUttJQY4F.g;H.e0Q'2BNB2+F.):@WeMY6lOM,5%F9cXc%+9o=c<ktrinaF`o,";@k@`s*YO=&)rEhga6(ec5\.]7*5T$ZSFb7;-ejtDd10LcO20+*qK[o#2Z@oVT_S\tQG3`QCit*LX%+^6F*V"A%%"<]KPgFii)0QT!%--J^c:^/a[P^'Z*_0CU8Vcgl7!dpAIU!$N6AqQZ65T3kd8(oRd(Xqbc80A$gbM".3?XloB6D'3s%<g/)$$W/fIe,VM9&!Q8;6E,!=XH6F"cC%`]]LNk*=@Wf_)pf8NX(ftk`&%!AXDYXA.Lm#%H&s6b9YA4P8>%CY,0:c!*MOYs0_E0c%U<IKUBIi`-0^FD*#EDHRS?S>&B\NYoMR''XlWM&%BL4FPXpQF_cqOPAP5[j[PaKT1%Kg_ZT6AQE*PpfiX@d4&LrA1bpF-c*(E:9\%9DiW-M;OKkgO,QA,lW75?fGua2*YC+Dabn"?fH!]DC0Am>i:+mrP"is]DnMdrD&t@mru/%IGVp"h&#7M9uQr;g"LlN`8BTR,l[3Y%qm;3p&bV6f&1m-iA!XnR-#QC`g-(o(2p/SaK5pBCqRi,7+U\n8&54HhCUFY4%/\NI=Hk`am=GAa6-2N.!jZP^\I)tQdMoAqOA$FF%R3!O:odZXm1/UZmJR:!m'AIX3Fb<7eV>j<<TU?K+7kWNWDXd=gb35_/'#K$uN8B<'4/VrWke#"T1]#uphu3BJd!*O1mmGu<<fjB/%T^Rn^hh/X]#/Fle^)s)jh-n_P,2=1ck1q?Q*?t@9AM>-:3ZVg#h.9>%i`Fs1?leBDh;r\uk'\92LY\eh*FbKYA>L;SY8q)_h.=JE%@*SY!J:2Ef^$sdK%UcKFI3sJmhAO+XZhFt4m*kADJ:7.#q[EOPk;>F+Y\tlC#M:Dnq:boH!`q]"WkJ,gP`7ua33\0:Qg!-Q3>niB%.QJV^"Q71PB^Qd)]IOrn2\gOJ<'u(Mq`W@;+O8iX/:=`-*%S>UE-a8W-4HYHh7F7%],RuYPK=*3!LCq:+5dQ,7`HU=]oI(b<>_=X%5iS&!T?L61W9$GKPD`27*<#HL"P:Pq'jucAHP&#gCprDk;+,.l(rb%`]G48b9T)'T1;s,/$dE`*q-Df]k*d7imP+m%*&p8Ic7Q0\%3?adq2nDVIOPGuSg'iM_c<Z"Y)S-S3kVSblRd&YlPuYG*Ic#l.LWP:u+ID4WN!:74fnMf:Ei!Cn[cA@`l?15O@TgUBFjL-+qQosI%I&4`0X63d3)U]&)\T-)^o3jE>Sl=moG<b!N<2-u1R8tdj4('](R_RI=jZj^Am'PGsdR7?"U/nsf6,Y+HCoC53iO2=`5#gh[c;GdV%fhNSR,_N)S"[H+"6nj`QZ;"5/[36[1H(#A0SQ,K'-H-O0.="3.6b"f._,FLYaVoa("RKr'.1G,>1U;<P-FasUeU5G;qFP)!3Y4hG%ea7Y0g;2I-eP8O;87+Ve!M0=gi$TTK/k%I)']L]R4tM*e+=O:q)/7r![Z2T!KuD"8*>0[Hc=hT/R9'?jbE^:P6e+K<'k-s*Lbu/3%]o/MVP0$&nlQ9n+&I92dXN%>/ccaGQF<JgADXp2QB/Eb!*!!4F@dU15gdKMblHk+>_R*++=!;`1X4.M3m565SNQE'Z6K1QpU!qrK%2QOn)q]?:h/;pT&#3-g=2DM+J]:K*5",aHc$j$8Hq@id2bs`Z<7EP`nfN5/a#pAM6gCSThQn91q'.X.dJi7Y%5ZYAU\^^ApT2r!J%MBs5"5\:?HXU7%OR!o.ZB#dq&;(U9TS?Z5,ne!WOh-%2=N?rX=2,>cIGLq<=7/5p#gQRE6ktf#RHM$n)p"=QP5<V#PIsUqcZ2Xcm%e$GD(PVD>iA<%"-W^&n=\q;dZ#r6Z=dO.7#II[6pc25\NB.pF%gc[[t^^KP;Gp"QVf15;\5@Jb`EO9jNZM<koBIu;grT,!*pr.8u%1a#>O=efPkLgVhHmmOJulH!0(gV6G:Tgpp-`dUDV>=gc6s,(\H5PQGCYE-DDp:#r%0<QoK5JcQ,A&lOPCF)/6'6pF9s*:tHbT6[G%rqH9LmeCOV'R`2+_IJX6Tp'sKNsNBMl`&3k^3I4)qU9#PI^qQ>PqRL^o?m(=\#*^\lFN"m44A65]l1;`n*OCm7ebDD$eATHg`<'!%CJTCIG;iaoFk75s<c:.(*n)%gqJYWa^L@(jGo@%I@^S`ag7M(4To!H%4l_cQnBGj[oJ_-@'+]=.S,?msXlK(NLBnLM#^Eks>:oTH%!kG_JR8;Dk4PUr>?L,E(M!f/hh!8j-D3`7n+.CcWdWT;4%sNB$jo2V>3t.U/r?e/fV%4R2YeoX(5@Qq9DL(,!o=\X%C.TE7+492p%QMY#Ec?5r;QRojk%eka+S-W@`gu#6"LGr)tgdLI$5$_7[)D*i^2H#"8Xr`O.D/-aA$\(CpX)l-E,WlQd3bg!)F?Mb_lcIiEn`@m9%=6jldH[G>,l0dX1r8R#&lL`?tS))cZl.`7sbL>;%(Dm+'AGsH9J,Rj8O/L=<J+`*_gT/M]e`th6qX1Dbe'$>rcdr8BB;\hCdpGnC%s%+g"^,Yq&>na9h\>Rld(U#GD^ONr.=q04L%BnX'\N%2`H1U%o"8tF(]AN5SY>0R-I?d"kO@PAGqr'1urrL3af=:~>%AI9_PrivateDataEnd